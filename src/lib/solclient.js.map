{"version":3,"file":"solclient.js","mappings":"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","sources":["webpack://solace/webpack/universalModuleDefinition","webpack://solace/./modules/solclient-session/lib/session-fsm.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solace/./modules/solclient-util/lib/uuid.js","webpack://solace/./modules/solclient-util/lib/process.js","webpack://solace/./modules/solclient-eskit/lib/iterator.js","webpack://solace/./modules/solclient-session/lib/session-request-types.js","webpack://solace/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solace/./modules/solclient-message-consumer/api.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solace/./modules/solclient-debug/api.js","webpack://solace/./node_modules/ieee754/index.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solace/./modules/solclient-util/lib/string-utils.js","webpack://solace/./modules/solclient-session/lib/global-context.js","webpack://solace/./modules/solclient-transport/lib/transport-base.js","webpack://solace/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solace/./modules/solclient-transport/lib/base-smf-client.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solace/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solace/./modules/solclient-message/lib/message-outcomes.js","webpack://solace/./node_modules/fflate/lib/browser.cjs","webpack://solace/./modules/solclient-log/lib/global-binding.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solace/./modules/solclient-destination/lib/destination-util.js","webpack://solace/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solace/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solace/./modules/solclient-sdt/api.js","webpack://solace/./modules/solclient-validate/api.js","webpack://solace/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solace/./modules/solclient-eskit/lib/mixin.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solace/./modules/solclient-session/lib/provision-event.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solace/./modules/solclient-util/api.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solace/./modules/solclient-log/lib/log-levels.js","webpack://solace/./modules/solclient-core/api-internal.js","webpack://solace/./modules/solclient-session/lib/session-fsm-event.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solace/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport.js","webpack://solace/./modules/solclient-smf/lib/codec/decode.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solace/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solace/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solace/./modules/solclient-destination/lib/queue.js","webpack://solace/./modules/solclient-fsm/lib/state-context.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solace/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solace/./modules/solclient-validate/lib/parameter.js","webpack://solace/./modules/solclient-destination/lib/destination-from-network.js","webpack://solace/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solace/./modules/solclient-session/lib/session-operations.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solace/./modules/solclient-log/lib/log-impl.js","webpack://solace/./modules/solclient-stats/lib/stat-types.js","webpack://solace/./modules/solclient-queue/lib/queue-access-types.js","webpack://solace/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solace/./modules/solclient-message/lib/message.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solace/./modules/solclient-eskit/lib/lazy.js","webpack://solace/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solace/./node_modules/browser-util-inspect/index.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solace/./modules/solclient-message-tracing/api.js","webpack://solace/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solace/./modules/solclient-smf/lib/codec/transport.js","webpack://solace/./modules/solclient-flow/lib/flow-operation.js","webpack://solace/./modules/solclient-session/lib/capability-types.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solace/./modules/solclient-eskit/lib/make-map.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solace/./modules/solclient-stats/lib/stats.js","webpack://solace/./modules/solclient-transport/lib/transport-error.js","webpack://solace/./modules/solclient-solcache-session/api.js","webpack://solace/./modules/solclient-log/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solace/./modules/solclient-queue/lib/endpoint-name-complaint.js","webpack://solace/./modules/solclient-validate/lib/base-checks.js","webpack://solace/./modules/solclient-message/lib/message-types.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solace/./modules/solclient-events/lib/timer.js","webpack://solace/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solace/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solace/./modules/solclient-transport/lib/smf-client.js","webpack://solace/./modules/solclient-session/lib/session-states.js","webpack://solace/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solace/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-states.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solace/./modules/solclient-events/api.js","webpack://solace/./modules/solclient-session/lib/authentication-schemes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solace/./modules/solclient-smf/api.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solace/./modules/solclient-fsm/lib/state-machine.js","webpack://solace/./modules/solclient-transport/lib/tsh-state.js","webpack://solace/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solace/./modules/solclient-message/lib/message-dump-flags.js","webpack://solace/./modules/solclient-error/lib/solace-error.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solace/./modules/solclient-util/lib/clone.js","webpack://solace/./modules/solclient-transport/lib/web/state-binary.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solace/./modules/solclient-util/lib/timing-bucket.js","webpack://solace/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solace/./modules/solclient-factory/api.js","webpack://solace/./modules/solclient-eskit/lib/resolver.js","webpack://solace/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solace/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solace/./modules/solclient-transport/lib/transport-factory.js","webpack://solace/./modules/solclient-smf/lib/codec/encode.js","webpack://solace/./modules/solclient-factory/lib/profile-binding.js","webpack://solace/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solace/./node_modules/long/umd/index.js","webpack://solace/./modules/solclient-session/api.js","webpack://solace/./modules/solclient-fsm/lib/exit-point.js","webpack://solace/./modules/solclient-util/lib/api-properties-validators.js","webpack://solace/./modules/solclient-smf/lib/smf-protocols.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solace/./modules/solclient-transport/lib/web/state-base64.js","webpack://solace/./modules/solclient-error/lib/error-subcodes.js","webpack://solace/./modules/solclient-destination/lib/destination.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solace/./modules/solclient-error/lib/operation-error.js","webpack://solace/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solace/./index.js","webpack://solace/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solace/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solace/./modules/solclient-eskit/lib/bidi-map.js","webpack://solace/./modules/solclient-destination/lib/subscription-info.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solace/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solace/./modules/solclient-stats/api.js","webpack://solace/./modules/solclient-error/lib/not-implemented-error.js","webpack://solace/./modules/solclient-eskit/lib/assert.js","webpack://solace/./modules/solclient-message-tracing/lib/message-trace-context.js","webpack://solace/./modules/solclient-message-publisher/api.js","webpack://solace/./modules/solclient-fsm/lib/entry-point.js","webpack://solace/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solace/./modules/solclient-events/lib/event-emitter.js","webpack://solace/./modules/solclient-fsm/lib/object.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solace/./modules/solclient-session/lib/session-state-names.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solace/./modules/solclient-queue/lib/queue-types.js","webpack://solace/./modules/solclient-message/api.js","webpack://solace/./modules/solclient-eskit/lib/array-operations.js","webpack://solace/./modules/solclient-util/lib/url.js","webpack://solace/./modules/solclient-session/lib/session-event-names.js","webpack://solace/./modules/solclient-session/lib/session-event-codes.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solace/./modules/solclient-sdt/lib/codec/api.js","webpack://solace/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solace/./modules/solclient-session/lib/default-capabilities.js","webpack://solace/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solace/./modules/solclient-env/api.js","webpack://solace/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solace/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solace/./modules/solclient-error/api.js","webpack://solace/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solace/./modules/solclient-message-tracing/lib/message-tracing-support.js","webpack://solace/./node_modules/events/events.js","webpack://solace/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solace/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solace/./modules/solclient-message-tracing/lib/message-trace-context-setter.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solace/./modules/solclient-fsm/lib/state.js","webpack://solace/./modules/solclient-message/lib/message-cache-status.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field.js","webpack://solace/./modules/solclient-session/lib/host-list.js","webpack://solace/./modules/solclient-fsm/api.js","webpack://solace/./modules/solclient-validate/lib/check.js","webpack://solace/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solace/./modules/solclient-eskit/api.js","webpack://solace/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solace/./node_modules/base64-js/index.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solace/./modules/solclient-session/lib/p2p-util.js","webpack://solace/./modules/solclient-smf/lib/codec/api.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solace/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solace/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solace/./modules/solclient-convert/lib/long.js","webpack://solace/./modules/solclient-fsm/lib/event.js","webpack://solace/./modules/solclient-core/api.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solace/./modules/solclient-eskit/lib/set-operations.js","webpack://solace/./modules/solclient-convert/lib/convert.js","webpack://solace/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solace/./modules/solclient-session/lib/correlated-request.js","webpack://solace/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solace/./modules/solclient-transport/api.js","webpack://solace/./modules/solclient-session/lib/session-event.js","webpack://solace/./modules/solclient-smf/lib/message-objects/api.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solace/./node_modules/buffer/index.js","webpack://solace/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solace/./modules/solclient-error/lib/request-event-codes.js","webpack://solace/./modules/solclient-destination/lib/topic.js","webpack://solace/./modules/solclient-debug/lib/debug.js","webpack://solace/./modules/solclient-stats/lib/stat-bymode.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solace/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solace/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solace/./modules/solclient-flow/lib/flow.js","webpack://solace/./modules/solclient-destination/lib/destination-type.js","webpack://solace/./modules/solclient-util/lib/array-utils.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solace/./modules/solclient-util/lib/browser-url-polyfill.js","webpack://solace/./modules/solclient-flow/api.js","webpack://solace/./modules/solclient-message/lib/message-dump-util.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solace/./modules/solclient-error/lib/request-error.js","webpack://solace/./modules/solclient-convert/lib/hex.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solace/./modules/solclient-eskit/lib/enum.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solace/./modules/solclient-transport/lib/web/http/api.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solace/./modules/solclient-transport/lib/transport-protocols.js","webpack://solace/./modules/solclient-transport/lib/buffer-queue.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solace/./modules/solclient-queue/lib/queue-properties.js","webpack://solace/./modules/solclient-replaystart/api.js","webpack://solace/./modules/solclient-util/lib/version.js","webpack://solace/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solace/./modules/solclient-message-tracing/lib/baggage.js","webpack://solace/./modules/solclient-queue/lib/queue-permissions.js","webpack://solace/./modules/solclient-util/lib/api-properties.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solace/./modules/solclient-transport/lib/web/api.js","webpack://solace/./modules/solclient-log/lib/console-log-impl.js","webpack://solace/./modules/solclient-session/lib/session.js","webpack://solace/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solace/./modules/solclient-destination/api.js","webpack://solace/./modules/solclient-queue/api.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solace/./modules/solclient-session/lib/session-properties.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solace/./modules/solclient-convert/lib/base64.js","webpack://solace/./modules/solclient-util/lib/string-buffer.js","webpack://solace/./modules/solclient-session/lib/session-properties-validator.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solace/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solace/./modules/solclient-convert/api.js","webpack://solace/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solace/./modules/solclient-convert/lib/bits.js","webpack://solace/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solace/./modules/solclient-smf/lib/codec/smp.js","webpack://solace/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solace/webpack/bootstrap","webpack://solace/webpack/runtime/global","webpack://solace/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"solace\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"solace\"] = factory();\n\telse\n\t\troot[\"solace\"] = factory();\n})(this, () => {\nreturn ","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageOutcome,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\n\nconst {\n  anythingToBuffer,\n} = Convert;\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\nconst zlib = require('zlib');\nconst fflate = require('fflate');\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this); // this._transport == null at this point \n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n\n    const { LOG_WARN } = this.logger;\n\n    // check for whether the broker session supports the capabilities\n    const settlementOutcomes = consumerProperties.requiredSettlementOutcomes;\n    if (settlementOutcomes && settlementOutcomes.length > 0) {\n      // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n      const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n      if(isNackRequired && !this._session.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n        const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n          settlementOutcomes.map(v => `solace.MessageOutcome.${MessageOutcome.nameOf(v)}`).join(', ')\n        } ]`;\n        // log the operation error as a Warning\n        LOG_WARN(outcomeNotSupportedError);\n        // then throw the error here\n        throw new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION, null);\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n         // console.log('ADCTRL message:');\n         // console.log(message);\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      let result = false;\n      if(this._correlatedReqs) {\n        result = delete this._correlatedReqs[correlationTag];\n      }\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    const {LOG_WARN, LOG_DEBUG} = this.logger\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      // compress payload if session property is enabled\n      if (this._sessionProperties.payloadCompressionLevel > 0 && ((Check.anything(message._binaryAttachment) && message._binaryAttachment.length > 0) || Check.anything(message._structuredContainer)) ){\n        let compressedAttachment;\n        let origSize = 0;\n        try {\n          if (BUILD_ENV.TARGET_NODE){\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: zlib.constants.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              // const encodedContainer = SDTCodec.encodeSingleElement(message._structuredContainer);\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n              origSize = encodedContainer.length;\n              compressedAttachment = zlib.deflateSync(encodedContainer, options);\n\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = zlib.deflateSync(message._binaryAttachment, options);\n            }\n          } else { //browser\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: fflate.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n\n              const textEncoded = anythingToBuffer(encodedContainer);\n              origSize = textEncoded.length;\n              compressedAttachment = fflate.zlibSync(textEncoded, options);\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = fflate.zlibSync(message._binaryAttachment, options);\n            }\n            compressedAttachment = anythingToBuffer(compressedAttachment);\n          }\n          \n          // This does not consider the size growth from adding \"deflate\" to the ce.\n          // If there alread was a ce: \", deflate\".length = 9 bytes.\n          // If there was no ce but there already was something else in the header map: 15 bytes.\n          // If there was nothing in the header map nor the user property map: 47 bytes.\n          // (use testContext.m_session.getStat(solace.StatType.TX_TOTAL_DATA_BYTES) in a test to \t)\n          if (compressedAttachment.length + 9 < origSize) {\n            message._setCompressedBinaryAttachment(compressedAttachment);\n            Check.nothing(message.getHttpContentEncoding()) ? message._compressedCE = \"deflate\" : message._compressedCE = message.getHttpContentEncoding() + \", deflate\";\n          } else {\n            // It would be nice to cache the encodedContainer instead of re-encoding it right away.\n            LOG_DEBUG(\"Not compressing because it grows the payload! \"+ origSize + \" -> \"+ compressedAttachment.length + \"+ 9\");\n          }\n        } catch(err) {\n          // if error occurred when compressing pass the normal binary attachment\n          LOG_WARN(\"Error occurred while compressing, message attachment was not compressed. Original attachment will be sent. \", err);\n        }\n      }\n    \n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n      // Clear internal-use field to free up memory and allow message object reuse by client code.\n      if (Check.anything(message._getCompressedBinaryAttachment())){\n        message._setCompressedBinaryAttachment();\n      }\n      delete message._compressedCE;\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    \n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisited.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    //const DebugLib = require('solclient-debug');\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    //console.log(\"content:\");\n    //console.log(DebugLib.Debug.formatDumpBytes( content.toString('latin1'), true, 2));\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  provisionEndpoint(queueDescriptior, queueProperties, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getCreate(queueDescriptior, queueProperties, correlationTag);\n    LOG_DEBUG(\"Sending CREATE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Provision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for CREATE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  deprovisionEndpoint(queueDescriptior, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getDelete(queueDescriptior, correlationTag);\n    LOG_DEBUG(\"Sending DELETE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Deprovision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for DELETE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     force,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg, undefined, force);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          force,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg, undefined, force);\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code, to be overridden in subclass\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    // added check to prevent it returning as undefined/null\n    return this._correlationCounter ? this._correlationCounter : 0;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of supported message settlement outcomes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageOutcome = {\n  /**\n   * Represents a successful message processing acknowledgement outcome.\n   *\n   * (see {@link solace.Message#acknowledge}) for more details\n   */\n  ACCEPTED:         0,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n   * the message.\n   * \n   * Delivery count for the message is incremented. Redelivery will be attempted. Message may\n   * be moved to DMQ once max-redelivered is reached. Message may be delayed if the endpoint has\n   * delayed redelivery configured.\n   */\n  FAILED:           1,\n  // /**\n  //  * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n  //  * the message.\n  //  * \n  //  * Delivery count for the message is NOT incremented. Redelivery will be attempted. Message may\n  //  * be moved to DMQ once max-redelivered is reached. \n  //  * A released message will always be eligible for redelivery, even if redeliveries are disabled. \n  //  * Message is immediately eligible for redelivery, even if endpoint is configured for delayed redelivery.\n  //  */\n  // RELEASED:           2,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application has rejected the\n   * message such as when application determines the message is invalid.\n   * \n   * Message will NOT be redelivered. Message will be moved to DMQ. If DMQ is not configured,\n   * message is deleted.\n   */\n  REJECTED:         3,\n};\n\nmodule.exports.MessageOutcome = Enum.new(MessageOutcome);\n","\"use strict\";\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar node_worker_1 = {};\nnode_worker_1[\"default\"] = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexports.FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return (0, node_worker_1.default)(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            if (split) {\n                this.b.set(chunk.subarray(0, split), this.s.z);\n                this.s.z = this.b.length;\n                this.p(this.b, false);\n            }\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    return Deflate;\n}());\nexports.Deflate = Deflate;\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexports.AsyncDeflate = AsyncDeflate;\nfunction deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\nexports.deflate = deflate;\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nfunction deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\nexports.deflateSync = deflateSync;\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexports.Inflate = Inflate;\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexports.AsyncInflate = AsyncInflate;\nfunction inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\nexports.inflate = inflate;\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.inflateSync = inflateSync;\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexports.Gzip = Gzip;\nexports.Compress = Gzip;\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexports.AsyncGzip = AsyncGzip;\nexports.AsyncCompress = AsyncGzip;\nfunction gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\nexports.gzip = gzip;\nexports.compress = gzip;\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nfunction gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\nexports.gzipSync = gzipSync;\nexports.compressSync = gzipSync;\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            if (this.p.length)\n                this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexports.Gunzip = Gunzip;\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this_1 = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, function (offset) { return _this_1.onmember && _this_1.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexports.AsyncGunzip = AsyncGunzip;\nfunction gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\nexports.gunzip = gunzip;\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\nexports.gunzipSync = gunzipSync;\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexports.Zlib = Zlib;\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexports.AsyncZlib = AsyncZlib;\nfunction zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\nexports.zlib = zlib;\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nfunction zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\nexports.zlibSync = zlibSync;\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexports.Unzlib = Unzlib;\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexports.AsyncUnzlib = AsyncUnzlib;\nfunction unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\nexports.unzlib = unzlib;\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.unzlibSync = unzlibSync;\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.o = StrmOpt.call(this, opts, cb) || {};\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_2 = this;\n                // enables reuse of this method by AsyncDecompress\n                var cb = function () { _this_2.ondata.apply(_this_2, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o, cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o, cb)\n                        : new this.Z(this.o, cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexports.Decompress = Decompress;\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        Decompress.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexports.AsyncDecompress = AsyncDecompress;\nfunction decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\nexports.decompress = decompress;\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\nexports.decompressSync = decompressSync;\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexports.DecodeUTF8 = DecodeUTF8;\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexports.EncodeUTF8 = EncodeUTF8;\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nfunction strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\nexports.strToU8 = strToU8;\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nfunction strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\nexports.strFromU8 = strFromU8;\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexports.ZipPassThrough = ZipPassThrough;\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexports.ZipDeflate = ZipDeflate;\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexports.AsyncZipDeflate = AsyncZipDeflate;\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexports.Zip = Zip;\nfunction zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\nexports.zip = zip;\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nfunction zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\nexports.zipSync = zipSync;\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexports.UnzipPassThrough = UnzipPassThrough;\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexports.UnzipInflate = UnzipInflate;\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexports.AsyncUnzipInflate = AsyncUnzipInflate;\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexports.Unzip = Unzip;\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nfunction unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\nexports.unzip = unzip;\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nfunction unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\nexports.unzipSync = unzipSync;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.FORCED_LENGTH_MODE = {\n  FIVE:  5,\n  SIX:   6\n};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value, forcedLengthMode = -1) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n\n  // prevent unsupported value from breaking default behaviour\n  if(forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) {\n    forcedLengthMode = -1;\n  }\n\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (\n    ((length < 253) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.FIVE)\n  ) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (\n    ((length < 256 * 256 - 4) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.SIX)\n  ) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const { SessionEvent } = require('./session-event');\n\nclass ProvisionEvent extends SessionEvent {\n  /**\n   * @constructor\n   * @param {solace.SessionEventCode} sessionEventCode The event code\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @param {QueueDescriptor} queueDescriptor Endpoint name and type as returned by the broker\n   * @param {QueueProperties} queueProperties Endpoint proerties as returned by the broker\n   * @private\n   */\n  constructor(\n      sessionEventCode,\n      infoStr,\n      responseCode = undefined,\n      errorSubcode = 0,\n      correlationKey = undefined,\n      reason = undefined,\n      queueDescriptor = null,\n      queueProperties = null) {\n  super([], sessionEventCode, infoStr, responseCode, errorSubcode, correlationKey, reason );\n  this._queueDescriptor = queueDescriptor;\n  this._queueProperties = queueProperties;\n  }\n\n\n  /**\n   * @type {QueueDescriptor}\n   * @description The endpoint name and type as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Durability is not set.\n   * Mostly relevant when the endpoint name was not provided in the provision call.\n   * @default null\n   */\n  get queueDescriptor() {\n    return this._queueDescriptor;\n  }\n\n  /**\n   * @internal\n   */\n  set queueDescriptor(value) {\n    this._queueDescriptor = value;\n  }\n\n  /**\n   * @type {QueueProperties}\n   * @description The endpoint properties as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Mostly relevant in case of an ENDPOINT_PROPERTY_MISMATCH provision error.\n   * @default null\n   */\n  get queueProperties() {\n    return this._queueProperties;\n  }\n\n  /**\n   * @internal\n   */\n  set queueProperties(value) {\n    this._queueProperties = value;\n  }\n  \n  [util_inspect_custom]() {\n    const result = super[util_inspect_custom]();\n    result.queueDescriptor = this._queueDescriptor;\n    result.queueProperties = this._queueProperties;\n    return result;\n  }\n\n}\n\nmodule.exports.ProvisionEvent = ProvisionEvent;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\nconst clone = require('./lib/clone');\n\nmodule.exports = {\n  clone,\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst MessageTracing = require('solclient-message-tracing');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  MessageTracing,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n    LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n    if (this._transportSession) {\n      this._transportSession._socket._sender._socket.destroy(new Error(errorMsg));\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst { Baggage, TraceContextSetter } = require('solclient-message-tracing');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long, Convert: { stringToUint8Array, anythingToBuffer } } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\nconst zlib = require('zlib');\nconst fflate = require('fflate');\nconst { Check } = require('solclient-validate');\n\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR,\n        LOG_WARN } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    let preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x40) !== 0){\n      message._setPayloadCompressed(preambleByte0);\n    }\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      const ce = headerMap.getField('ce');\n      const ct = headerMap.getField('ct');\n\n      const bag = headerMap.getField('bag'); // get the baggage field\n      const ctx = headerMap.getField('ctx'); // the message creation context field\n\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n      if (ce) {\n        message.setHttpContentEncoding(ce.getValue());\n      }\n      if (ct) {\n        message.setHttpContentType(ct.getValue());\n      }\n      if (bag) {\n        // set the baggage\n        const _baggageObj = new Baggage();\n        _baggageObj.setBaggage(bag.getValue());\n        message._setBaggage(_baggageObj);\n      }\n      if (ctx) {\n        // create a context setter from the bytes or string depending on the active profile\n        const _traceContextSetter = TraceContextSetter.fromTraceContext(ctx.getValue());\n         // use it to set the message creation context, can be null\n        message._setCreationContext(_traceContextSetter);\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // set the trace span transport context for the message if present\n  if (smfHeader.pm_ts_transport_context) {\n    // create a context setter from the bytes\n    const _traceContextSetter = TraceContextSetter.fromTraceContext(smfHeader.pm_ts_transport_context);\n    // use it to create the transport context\n    message._setTransportContext(_traceContextSetter);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n  // uncompress message\n  if(message._getPayloadCompressed() && Check.anything(message.getHttpContentEncoding())){\n    if (message.getHttpContentEncoding().endsWith('deflate')){\n        try {\n          let inflatedAttachment;\n          if (BUILD_ENV.TARGET_NODE) {\n            inflatedAttachment = zlib.inflateSync(message._binaryAttachment);\n          } else {\n            inflatedAttachment = fflate.unzlibSync( message._binaryAttachment);\n            inflatedAttachment = anythingToBuffer(inflatedAttachment);\n          }\n          message._setBinaryAttachment(inflatedAttachment);\n          message._setPayloadCompressed(null);\n\n          // Popping \"deflate\" off the end of the content encoding list.\n          if (message.getHttpContentEncoding().trim() === \"deflate\") {\n            delete message._httpContentEncoding;\n          } else {\n            let newCE = message.getHttpContentEncoding().slice(0, 0-\"deflate\".length).trimRight()\n              if (newCE.endsWith(\",\")) {\n                newCE = newCE.slice(0, -1);\n                message.setHttpContentEncoding(newCE);\n              } else {\n                delete message._httpContentEncoding;\n\t      }\n          }\n        } catch(err){\n          LOG_WARN(\"Message payload was not decompressed, there was an error. Leaving the message body compressed \", err)\n          //LOG_WARN(message.dump());\n          message._messageType = SolclientMessageLib.MessageType.BINARY;\n        }\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max, outcome = undefined) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  const paramLength = (outcome == undefined || outcome === 0) ? 18 : 19;\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(paramLength)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  if(outcome != undefined && outcome > 0) { // skip for MessageOutcome.ACCEPTED\n    data.push(Convert.int8ToStr(outcome)); // write the settlement outcome\n  }\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n      case SMFLib.SMFAdProtocolParam.PARTITION_GROUP_ID:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue(); // this is the Map() of all settlement ACK/NACK ranges\n          const uh = param.getUh();\n          const type = param.getType();\n          // iterate through the Map of ranges per settlement outcome\n          ranges.forEach((settlementRanges, outcome) => {\n            for (let i = 0; i < settlementRanges.length; ++i) {\n              const range = settlementRanges[i];\n              paramspace.push(encAdp64AckPairParam(uh,\n                                                   type,\n                                                   range[0],\n                                                   range[1],\n                                                   outcome));\n            }\n          });\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n  /**\n   * Count of received persistent and non-persistent messages that were rejected.\n   */\n  RX_SETTLE_REJECTED:       44,\n  /**\n   * Count of received persistent and non-persistent messages that were failed.\n   */\n  RX_SETTLE_FAILED:         45,\n  /**\n   * Count of received persistent and non-persistent messages that were accepted manually (no auto-acks).\n   */\n  RX_SETTLE_ACCEPTED:       46,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","const { clone } = require('solclient-util'); // using the modified local clone version\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageOutcome } = require('./message-outcomes');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\nconst { Baggage, MessageTracingSupport, TraceContext, TraceContextSetter } = require('solclient-message-tracing');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; // Makes the accessor throw, never returned to user.\n\n  // for tracing support\n  message._traceContextSetter = null;\n  message._creationContext = null;\n  message._transportContext = null;\n  message._baggage = new Baggage();\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * Function called to clear extended var-len message properties\n * @param {Message} message The message to update\n * @internal\n */\nfunction clearExtendedVarLenParameters(message) {\n  // clear the tracing support params since\n  // they use extended var-len encoding\n  message._transportContext = null;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n * @extends solace.MessageTracingSupport\n */\nclass Message extends MessageTracingSupport {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    super(); // call the tracing support constructor\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   * @default false\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   * @default MessageDeliveryModeType.DIRECT\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   * @default false\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /**\n   * Gets the Http Content Encoding\n   * @returns {?String} the http content encoding, if set.\n   */\n    getHttpContentEncoding() {\n      return this._httpContentEncoding;\n    }\n  \n    /**\n     * Sets the Http Content Encoding\n     * @param {String} value The http content encoding.\n     */\n    setHttpContentEncoding(value) {\n      this._httpContentEncoding = isStringOrNothing(\"httpContentEncoding\", value);\n      if (this._httpContentEncoding === \"\") {\n        delete this._httpContentEncoding;\n      }\n    }\n  \n    /**\n     * Gets the Http Content Type\n     * @returns {?String} the http content type, if set.\n     */\n     getHttpContentType() {\n      return this._httpContentType;\n    }\n  \n    /**\n     * Sets the Http Content Type\n     * @param {String} value The http content type.\n     */\n    setHttpContentType(value) {\n      this._httpContentType = isStringOrNothing('httpContentType', value);\n      if (this._httpContentType === \"\") {\n        delete this._httpContentType;\n      }\n    }\n    \n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   * @default 0\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {Number|undefined} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   *\n   * @returns {Number|undefined} The delivery count reported by the broker.\n   * @throws {solace.OperationError} if endpoint does not report delivery count (message is not persistent).\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n\n  /**\n   * Settles this message in a requested way.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {solace.MessageOutcome} messageSettlementOutcome type of the settlement outcome, not expected to be {@code null}\n   * @throws {@link solace.OperationError}\n   *  * if broker does not support the specified outcome option;\n   *  * if the flow was created without specifying required {@link MessageOutcome}\n   *    Options within the consumer properties;\n   *  * if the associated {@link solace.Session} is configured\n   *    to use SUPPORTED_MESSAGE_ACK_AUTO (the default behaviour),\n   *    the use of {@link MessageOutcome#REJECTED}\n   *    and {@link MessageOutcome#FAILED} are not supported;\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connected\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   *    @see {@link solace.MessageOutcome}for detailed explanation of available options\n   */\n  settle(messageSettlementOutcome) {\n    // implementation here\n    // validation checks here\n    if (this._acked) {\n      throw new OperationError('Message can only be settled once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot settle a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot settle a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot settle using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot settle using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application settled`);\n      return;\n    }\n\n    // validate the settlement outcome and send correct Enum value\n    const settlementOutcome = messageSettlementOutcome;\n    if (MessageOutcome.values.indexOf(settlementOutcome) === -1) {\n      throw new OperationError(`Settlement outcome for message must be valid`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // check that the broker consumer session has support for the outcome and \n    const doesConsumerSupportOutcome = this._consumer.getProperties().requiredSettlementOutcomes.some(v => v === settlementOutcome);\n    // that the session was created with support for the outcome\n    if (settlementOutcome != MessageOutcome.ACCEPTED && !doesConsumerSupportOutcome) {\n      throw new OperationError(`solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)} not supported for this Message Consumer`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // actual settlement logic\n    this._consumer.applicationSettle(this._guaranteedMsgId, settlementOutcome);\n    this._acked = true; // also set as ACKed/settled\n  }\n\n  /**\n   * Returns whether settle(solace.MessageOutcome) has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isSettled() {\n    return this._acked || false;\n  }\n\n  /**\n   * Internal validation checks before we attempt to acknowledge this message.\n   * @private\n   */\n  _validateBeforeAcknowledge() {\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n  }\n\n  /**\n   * Acknowledges this message.\n   * This is the same as calling {@link solace.Message#settle(solace.MessageOutcome.ACCEPTED)}.\n   * Internally uses Message.settle() with the ACCEPTED MessageOutcome.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application acknowledge`);\n      return;\n    }\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, false);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Used by the message-dispatcher to auto-acknowledge this message.\n   * @internal\n   */\n  _autoAcknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, true);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /*\n   * returns a compressed binary attachment\n   * Used internally on the encode path.\n   * @returns {Uint8Array} A compressed array based on the binaryAttachment\n   * @private\n   */\n  _getCompressedBinaryAttachment() {\n    return this._compressedBinaryAttachment;\n  }\n  \n  /*\n   * Sets the compressed attachment for the messsage \n   * based on the level that was set in payloadCompressionLevel\n   * Used internally on the encode path.\n   * @param {Uint8Array} value sets the compressed attachment\n   * @private \n   */\n  _setCompressedBinaryAttachment(value) {\n    this._compressedBinaryAttachment = value;\n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @returns {Boolean} value if the binary attachment was compressed\n   * @private \n   */\n  _getPayloadCompressed() {\n    return this._payloadCompressed; \n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @param {Boolean} \n   * @private \n  */\n  _setPayloadCompressed(value) {\n    this._payloadCompressed = value;\n  }\n\n  // Message Tracing Section\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    // return the parent method\n    return super.getTraceContextSetter();\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getCreationContext();\n  }\n \n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {solace.TraceContext} Transport context object associated with this message;\n   */\n  getTransportContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getTransportContext();\n  }\n\n  /**\n   * Set the transport context.\n   * Called when the message is received from broker\n   * \n   * @param {solace.TraceContextSetter} contextSetter \n   */\n  setTransportContext(contextSetter) {\n    // call the parent method.\n    super._setTransportContext(contextSetter);\n  }\n\n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    // returns the parent method baggage instance\n    // used for setting and retriving the baggage value \n    return super.getBaggage();\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n\n  /**\n   * Clears all extended var-len message properties on this message.\n   * The message no longer has any extended variable length\n   * properties set.\n   * \n   * @internal\n   */\n  clearExtendedVarLenParams() {\n    clearExtendedVarLenParameters(this);\n  }\n}\n\n/**\n * A standard property key that clients should use if they want to\n * group messages into different queue partitions.\n * Expected value is UTF-8 encoded up to 255 bytes long string.\n */\nMessage.SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY = 'JMSXGroupID';\n\nmodule.exports.Message = Message;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","/**\n * Module exports.\n */\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n * @license MIT (© Joyent)\n */\n/* legacy: obj, showHidden, depth, colors*/\n\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\n\nfunction hasOwn(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwn(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  try {\n    if (ctx.showHidden && Object.getOwnPropertyNames) {\n      keys = Object.getOwnPropertyNames(value);\n    }\n  } catch (e) {\n    // ignore\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (Array.isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = { value: void 0 };\n  try {\n    // ie6 › navigator.toString\n    // throws Error: Object doesn't support this property or method\n    desc.value = value[key];\n  } catch (e) {\n    // ignore\n  }\n  try {\n    // ie10 › Object.getOwnPropertyDescriptor(window.location, 'hash')\n    // throws TypeError: Object doesn't support this action\n    if (Object.getOwnPropertyDescriptor) {\n      desc = Object.getOwnPropertyDescriptor(value, key) || desc;\n    }\n  } catch (e) {\n    // ignore\n  }\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwn(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n}\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","const { Baggage } = require('./lib/baggage');\nconst { TraceContext } = require('./lib/message-trace-context');\nconst { TraceContextSetter } = require('./lib/message-trace-context-setter');\nconst { MessageTracingSupport } = require('./lib/message-tracing-support');\n\nmodule.exports.Baggage = Baggage;\nmodule.exports.TraceContext = TraceContext;\nmodule.exports.TraceContextSetter = TraceContextSetter;\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   * @deprecated since broker v9.10.0.12\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n  /**\n   * Support for ApplicationAck optional outcomes \"failed\" and \"rejected\".\n   */\n  AD_APP_ACK_FAILED:            30,\n  /**\n   * Broker supports variable-length SMF extended parameters.\n   */\n  VAR_LEN_EXT_PARAM:            31,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n  /**\n   * Indicates whether a client supports Partitioned Queues\n   * and whether a PartitionGroupId will be proccessed in a BindResponse message.\n   * Always true\n   * \n   * @since 10.12.0\n   */\n   PQ: 2,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  requiredSettlementOutcomes:              [], // MessageOutcome.ACCEPTED is not required to be set and always supported\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   * @default undefined\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The required settlement outcomes for the Message Consumer.\n   *\n   * A session is created with SUPPORTED_MESSAGE_ACK_CLIENT by setting\n   * the requiredSettlementOutcomes property to support negative acknowledgment outcomes.\n   *\n   * The {@link solace.MessageOutcome.ACCEPTED} outcome is not required to be set and is always\n   * supported as a settlement outcome.\n   *\n   * When the requiredSettlementOutcomes include either {@link solace.MessageOutcome.FAILED}\n   * or {@link solace.MessageOutcome.REJECTED}, a message can be settled with any of these outcomes.\n   *\n   * The {@link solace.Message#acknowledge} method internally calls the {@link solace.Message#settle}\n   * with the {@link solace.MessageOutcome.ACCEPTED} passed as the settlement outcome for that message.\n   *\n   * When received messages are Application Acknowledged/Settled with\n   * a {@link solace.MessageOutcome.ACCEPTED} outcome, they are removed from the Guaranteed\n   * Message storage on the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {Array.<solace.MessageOutcome>}\n   * @default []\n   */\n  get requiredSettlementOutcomes() {\n    return Check.something(this._requiredSettlementOutcomes)\n      && Check.array(this._requiredSettlementOutcomes)\n      ? this._requiredSettlementOutcomes\n      : DEFAULTS.requiredSettlementOutcomes;\n  }\n  set requiredSettlementOutcomes(value) {\n    this._requiredSettlementOutcomes = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Enum } = require('solclient-eskit');\n\n// Enum name, regexp, enum value, TE applicable\nconst nameChecks = [\n  [\"EMPTY_STRING\", /^$/, \"Zero length\", true],\n  [\"LT\", /</, \"Less than sign (<)\", true],\n  [\"GT\", />/, \"Greater than sign (>)\", true],\n  [\"ASTERISK\", /\\*/, \"Asterisk (*)\", true],\n  [\"QUESTION_MARK\", /\\?/, \"Question mark (?)\", true],\n  [\"AMPERSAND\", /&/, \"Ampersand (&)\", true],\n  [\"SEMICOLON\", /;/, \"Semicolon (;)\", true],\n  [\"LEADING_SLASH\", /^\\//, \"Starts with a slash (/).\", false],\n  [\"TRAILING_SLASH\", /\\/$/, \"Ends with a slash (/).\", false],\n  [\"DOUBLE_SLASH\", /\\/\\//, \"Empty level (//)\", false],\n  [\"TOO_LONG\", /.{200,}/, \"Longer than 200 characters\", true],\n  //[\"NO_ISSUE\", undefined, \"\"]\n];\n\n/**\n * The most frequent problems with endpoint names.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst EndpointNameComplaint = {\n  EMPTY_STRING: \"Zero length\",\n  LT: \"Less than sign (<)\",\n  GT: \"Greater than sign (>)\",\n  ASTERISK: \"Asterisk (*)\",\n  QUESTION_MARK: \"Question mark (?)\",\n  AMPERSAND: \"Ampersand (&)\",\n  SEMICOLON: \"Semicolon (;)\",\n  LEADING_SLASH: \"Starts with a slash (/).\",\n  TRAILING_SLASH: \"Ends with a slash (/).\",\n  DOUBLE_SLASH: \"Empty level (//)\",\n  TOO_LONG: \"Longer than 200 characters\",\n  NO_ISSUE: \"\"\n};\n\n//This should work, but the typescript generator doesn't like it.\n/*\nconst EndpointNameComplaint = {};\nnameChecks.forEach((triplet)=>{\n  EndpointNameComplaint[triplet[0]] = triplet[2];\n})\n*/\n\nfunction explainInvalidEndpointName(name, isTE) {\n  //complaints are ordered by probability\n  for (i in nameChecks) {\n    const triplet = nameChecks[i];\n    if (isTE && !triplet[3]) {\n      // Slash-related issues are queue only, so those rules are marked \"false\" in the check list.\n      continue;\n    }\n    if (name.match(triplet[1])) {\n      return triplet[2];\n    }\n  }\n  // This is an empty string because it's falsy.\n  return EndpointNameComplaint.NO_ISSUE;\n} \t\n\nmodule.exports.EndpointNameComplaint = Enum.new(EndpointNameComplaint);\n//module.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  // Got rid of the inconsequential ifs for old IE versions in 2024 (again?)\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   * @default null\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicSequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(message /*, flags*/) {\n    return ['HTTP Content Type', (message.getHttpContentType() !== undefined && message.getHttpContentType() !== null),\n      message.getHttpContentType(), null];\n  },\n\n  fpHttpContentEncoding(message /*, flags*/) {\n    return ['HTTP Content Encoding', (message.getHttpContentEncoding() !== undefined && message.getHttpContentEncoding() !== null),\n      message.getHttpContentEncoding(), null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (typeof cacheRequestId === 'number') {\n      return ['Cache Request Id', true, cacheRequestId, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n\n\n  fpTracingCreationContext(message, flags) {\n    const _creationContext = message.getCreationContext();\n\n    const isPresent = (_creationContext != null\n      && _creationContext.getTraceId() != null\n      && _creationContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_creationContext != null) ? _creationContext.toString() : null;\n    }\n    return ['Tracing CreationContext', isPresent, detailValue, null];\n  },\n\n  fpTracingTransportContext(message, flags) {\n    const _transportContext = message.getTransportContext();\n\n    const isPresent = (_transportContext != null\n      && _transportContext.getTraceId() != null\n      && _transportContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_transportContext != null) ? _transportContext.toString() : null;\n    }\n    return ['Trace Context SMF Parameter', isPresent, detailValue, null];\n  },\n\n  fpTracingBaggage(message, flags) {\n    const isPresent = (message.getBaggage() != null\n      && message.getBaggage().getBaggage() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      const _baggage = message.getBaggage();\n      detailValue = (_baggage != null) ? _baggage.getBaggage() : null;\n    }\n    return ['Tracing Baggage', isPresent, detailValue, null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n * @private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","/**\n * Copyright (c) 2011-2016 Paul Vorbach and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining \n * a copy of this software and associated documentation files \n * (the “Software”), to deal in the Software without restriction, \n * including without limitation the rights to use, copy, modify, \n * merge, publish, distribute, sublicense, and/or sell copies of \n * the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included \n * in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * The is a local modified version of the clone npm module (https://www.npmjs.com/package/clone).\n * According to its description, it offers a foolproof deep cloning \n * of objects, arrays, numbers, strings, maps, sets, \n * promises, etc. in JavaScript.\n * \n * I refactored it to be compatible with Webpack.\n * Refator List:\n * - update the use of the 'var' keyword to 'let' and 'const' where appropriate.\n * - Made the variable names more clearer and intuitive (clean code)\n * - I used ES6 contants/definitions where possible.\n * \n * Original can be found Here:\n * - On Npm -> https://www.npmjs.com/package/clone\n * - On GitHub -> https://github.com/pvorb/node-clone\n * \n * Created by oodigie on 26/05/2023.\n */\n\n'use strict';\n\nconst clone = (function() {\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nlet nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nlet nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nlet nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  const allParents = [];\n  const allChildren = [];\n\n  const useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    let child;\n    let proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      const index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      let keyChild, valueChild;\n      parent.forEach(function(value, key) {\n        keyChild = _clone(key, depth - 1);\n        valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      let entryChild;\n      parent.forEach(function(value) {\n        entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (let i in parent) {\n      let attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      const symbols = Object.getOwnPropertySymbols(parent);\n      for (let i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        let symbol = symbols[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      const allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (let i = 0; i < allPropertyNames.length; i++) {\n        let propertyName = allPropertyNames[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  let emptyCloneFunc = function () {};\n  emptyCloneFunc.prototype = parent;\n  return new emptyCloneFunc();\n};\n\n// private utility functions\n\nfunction __objToStr(obj) {\n  return Object.prototype.toString.call(obj);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(regExpOptions) {\n  let flags = '';\n  if (regExpOptions.global) flags += 'g';\n  if (regExpOptions.ignoreCase) flags += 'i';\n  if (regExpOptions.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n\n})();\n\nmodule.exports = clone;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n  uint8ArrayToString,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n  FORCED_LENGTH_MODE,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n  addToMapIfPresent(headerMap, 'ce', SDTFieldType.STRING, message._compressedCE ? message._compressedCE : message.getHttpContentEncoding());\n  addToMapIfPresent(headerMap, 'ct', SDTFieldType.STRING, message.getHttpContentType());\n\n  // the baggage value in the correct format. See - https://www.w3.org/TR/baggage/\n  const _baggage = message.getBaggage();\n  addToMapIfPresent(headerMap, 'bag', SDTFieldType.STRING, (_baggage ? _baggage.getBaggage() : null));\n  // message creation context will never be null\n  // set the encoded bytes into the map\n  const _creationContext = message.getCreationContext();\n  addToMapIfPresent(\n    headerMap, 'ctx', SDTFieldType.BYTEARRAY,\n    (_creationContext ? _creationContext.getEncodedTraceContext() : null)\n  );\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n\n  if (Check.anything(message._getCompressedBinaryAttachment())){\n    preambleByte0 |= 0x40;\n  }\n  \n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      }\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  // get the transport context, if available\n  const _transportContext = message.getTransportContext();\n  if(_transportContext != null) {\n    // set the encoded Uint8 array into the header property\n    smfHeader.pm_ts_transport_context = _transportContext.getEncodedTraceContext();\n  }\n  \n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      message.getCreationContext() ||\n      message._compressedCE ||\n      message.getHttpContentEncoding() ||\n      message.getHttpContentType() ||\n      (message.getBaggage() && message.getBaggage().getBaggage()) ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    if (Check.anything(message._getCompressedBinaryAttachment())){\n      addContentElementToArrays(csumm, payload, \n        message._getCompressedBinaryAttachment().toString('latin1'), ContentSummaryType.BINARY_ATTACHMENT);\n    } else {\n      addContentElementToArrays(csumm, payload,\n        message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n    }\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_ts_transport_context) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.TS_TRANSPORT_CONTEXT,\n                                                     uint8ArrayToString(header.pm_ts_transport_context),\n                                                     FORCED_LENGTH_MODE.SIX);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { ProvisionEvent } = require('./lib/provision-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.ProvisionEvent = ProvisionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n  PARTITION_GROUP_ID:                      0x38,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to or create a Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   * @deprecated since 10.3.1 - Replay is now supported on Temp Endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT:         160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                                161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                               162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                                 163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                           164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                             165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:                    166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                           167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                                    168,\n  /**\n   * Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n  REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                         169,\n  /**\n   * Browser flows to Partitioned Queues are not permitted.\n   * - 403 Browsing Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED:                     170,\n  /**\n   * Egress selectors are not permitted when binding to a Partitioned Queue.\n   * - 403 Selectors Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED:                    171,\n  /**\n   * Replay Not Supported on Anonymous Queue Without Subscriptions\n   * - 403 Replay Not Supported on Anonymous Queue Without Subscriptions\n   */\n  REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED:   172,\n  /**\n   * The message was rejected because the appliance has been configured\n   * to reject messages when sync replication mode is ineligible.\n   * - 503 Sync Replication Ineligible (Reject Messages when Synchronous Replication Mode is Ineligible)\n   * \n   * * The transaction was started as a synchronous replicated transaction,\n   * but replication became ineligible during the transaction.\n   * - 503 Sync Replication Ineligible (Replication Ineligible during Synchronous Replicated Transaction)\n   */\n  SYNC_REPLICATION_INELIGIBLE:                                  173,\n  /**\n   * An attempt was made to bind to a durable TE or Queue \n   * with a flow property of ‘non-durable’.\n   *\n   * Causes:\n   *  * 400 Invalid Queue or Topic Endpoint Durability\n   */\n  INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY:                   174,\n  /**\n   * Provisioning failed due to invalid queue name. \n   *\n   * Causes:\n   *  * 400 Invalid Queue Name\n   */\n  INVALID_QUEUE_NAME:                   175,\n  /**\n   * Provisioning failed due to invalid topic endpoint name. \n   *\n   * Causes:\n   *  * 400 Invalid Topic Endpoint Name\n   */\n  INVALID_TE_NAME:                   176,\n  /**\n   * Provisioning failed because the requested max message size was too large. \n   *\n   * Causes:\n   *  * 400 Message Size Out Of Range\n   */\n  MESSAGE_SIZE_OUT_OF_RANGE:         177,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 400 Unsupported permissions\n   */\n  UNSUPPORTED_PERMISSIONS:         178,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 503 Max endpoints exceeded\n   */\n  MAX_ENDPOINTS_EXCEEDED:         179,\n  /**\n   * Provisioning failed because router is unable to perform Assured Delivery. \n   *\n   * Causes:\n   *  * 507 Assured Delivery Not Ready\n   */\n  ASSURED_DELIVERY_NOT_READY:         180,\n  /**\n   * Provisioning failed due to a queue template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from queue template missing\n   */\n  COPY_FROM_QUEUE_TEMPLATE_MISSING:         181,\n  /**\n   * Provisioning failed due to a topic endpoint template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from topic-endpoint template missing\n   */\n  COPY_FROM_TE_TEMPLATE_MISSING:         182,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'invalid queue or topic endpoint durability', SC.INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND,\n    'invalid queue name', SC.INVALID_QUEUE_NAME,\n    'invalid topic endpoint name', SC.INVALID_TE_NAME,\n    'message size out of range', SC.MESSAGE_SIZE_OUT_OF_RANGE,\n    'unsupported permissions', SC.UNSUPPORTED_PERMISSIONS,\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    // 'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'replay not supported on anonymous queue without subscriptions', SC.REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'browsing not supported on partitioned queue', SC.PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED,\n    'selectors not supported on partitioned queue', SC.PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'sync replication ineligible', SC.SYNC_REPLICATION_INELIGIBLE,\n    'max endpoints exceeded', SC.MAX_ENDPOINTS_EXCEEDED,\n    'copy-from queue template missing', SC.COPY_FROM_QUEUE_TEMPLATE_MISSING,\n    'copy-from topic-endpoint template missing', SC.COPY_FROM_TE_TEMPLATE_MISSING,\n  ),\n  507, makeMap(\n    'assured delivery not ready', SC.ASSURED_DELIVERY_NOT_READY,\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import Long = require('long');\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\nconst {\n    isBoolean,\n    isStringOrNothing,\n} = Parameter;\n\nconst {\n    stringToUint8Array,\n    hexStringToUint8Array,\n} = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts readonly view on a metadata used for \n * distributed message tracing with Solace messaging APIs\n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\nclass TraceContext {\n\n    /**\n     * Abstract constructor for readonly view on metadata used \n     * for distributed message tracing.\n     * \n     * @param {TraceContextSetter} traceContextSetter {TraceContextSetter}\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor(traceContextSetter) {\n        this._traceId = isStringOrNothing('traceId', traceContextSetter.traceId);\n        this._spanId = isStringOrNothing('spanId', traceContextSetter.spanId);\n        this._isSampled = isBoolean('isSampled', traceContextSetter.isSampled);\n        this._traceState = traceContextSetter.traceState;\n        this._version = traceContextSetter.version;\n    }\n\n    /**\n     * Clone the a TraceContext object used \n     * for distributed message tracing.\n     * \n     * @param {TraceContext} toClone {TraceContext}\n     * @returns {TraceContext} the newly cloned TraceContext instance\n     */\n    static clone(toClone) {\n        const newContextSetter = new TraceContextSetter();\n        newContextSetter._setSpanId(toClone.getSpanId());\n        newContextSetter._setTraceId(toClone.getTraceId());\n        newContextSetter._setSampled(toClone.getIsSampled());\n        newContextSetter._setTraceState(toClone.getTraceState());\n        newContextSetter._setVersion(toClone.getVersion());\n        return new TraceContext(newContextSetter);\n    }\n\n    /**\n     * The version which for now is 1.\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);\n    }\n    /**\n     * Gets the version associated with the message trace.\n     * \n     * @returns {Number} The version encoded as Hex value\n     */\n    getVersion() {\n        return this.version;\n    }\n\n    /**\n     * The maximum allowed string size of trace state to propagate.\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n    */\n    get MAX_TRACE_STATE_LENGTH() {\n        return 512;\n    }\n \n    /**\n     * The tranceId property as a 16-length string\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Gets the value of the trace identifier associated with the message.\n     * \n     * @returns {String} value of trace identifier associated with the message as\n     * 16-length string.\n     */\n    getTraceId() {\n        return this._traceId;\n    }\n \n    /**\n     * The spanId property a 8-length string\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Gets the value of the span identifier associated with the message.\n     * \n     * @returns {String} value of span identifier associated with the message as\n     * 8-length string.\n     */\n    getSpanId() {\n        return this._spanId;\n    }\n\n    /**\n     * The isSampled boolean property\n    */\n    get isSampled() {\n        return this._isSampled;\n    }\n    /**\n     * Returns true if the sampling for the associated message is on,\n     * otherwise false.\n     * \n     * @returns {Boolean} indicates whether the sampling is on or off\n     */\n    getIsSampled() {\n        return this._isSampled || false;\n    }\n\n    /**\n     * The traceState property\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTraceState() {\n        return this._traceState || null;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTruncatedTraceState() {\n        return this._standardTraceStateTruncation(this.MAX_TRACE_STATE_LENGTH);\n    }\n\n\n    /**\n     * It returns the encoded bytes that is \n     * passed to the SMF header to be encoded in \n     * SMF for the message.\n     * \n     * @returns {?Uint8Array} The value of encoded trace span context\n     */\n    getEncodedTraceContext() {\n        // format the string payload \n        // and return the correct format as a byte array or null\n        if (this.traceId == null || this.spanId == null) {\n            return null;\n        }\n\n        const traceStateLength = this.traceState == null ? 0 : this.traceState.length;\n\n        // the fixed part of the encoded data is at least 32 bytes\n        const contentBuffer = new ArrayBuffer(32 + traceStateLength);\n        let offsetPos = 0; // start from the beginning of the buffer\n        const contentBufferDataView = new DataView(contentBuffer);\n\n        let byte1 = 0; // headerByte: version 4 bits, sampled 2 bits and RFU=0 2 bits\n        // set the version to the four MSB\n        byte1 |= (this.version << 4); // version=0001 (4 bits, version=1)\n        byte1 |= this.isSampled ? 0x04 : 0x00; //sampled=0100 (2 bits, sampled=1 and 2 bits RFU=0)\n\n        // write the 1 byte header\n        contentBufferDataView.setUint8(offsetPos, byte1, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write the first 16 bytes traceId\n        const traceId16byte = hexStringToUint8Array(this.traceId); // get the 8 byte array\n        for(let i = 0; i < 16; i ++) { // write the first 16 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, traceId16byte[i], false); // write the bytes\n        }\n        offsetPos += 16; // move pointer to next free position (plus 16 bytes)\n\n        // write the first 8 bytes spanId\n        const spanId8byte = hexStringToUint8Array(this.spanId) // get the 8 byte array\n        for(let i = 0; i < 8; i ++) { // write the first 8 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, spanId8byte[i], false); // write the bytes\n        }\n        offsetPos += 8; // move pointer to next free position (plus 8 bytes)\n\n        // write 1 byte InjectionStandard=1 (W3C)\n        contentBufferDataView.setUint8(offsetPos, 0x01, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write 4 bytes RFU=0\n        // use BigEndian; litteEndian = false\n        contentBufferDataView.setUint16(offsetPos, 0, false); // write first two RFU bytes of zeros\n        contentBufferDataView.setUint16(offsetPos + 2, 0, false); // write last two RFU bytes of zeros\n        offsetPos += 4; // move pointer to next free position\n\n\t    if (this.traceState == null) {\n            // write 2 bytes TraceState length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, 0, false); // write two bytes of zeros\n            offsetPos += 2; // move pointer to next free position\n\t    } else {\n\t      // If required, apply truncation logic on traceState\n\t      const truncatedTraceState = this.getTruncatedTraceState();\n\t      if (truncatedTraceState != null) {\n            // write 2 bytes TraceState length\n            const traceStateLength = truncatedTraceState.length;\n            // convert to two bytes\n            const traceStateLengthBytes = new Uint16Array([traceStateLength]); // get 2 bytes of length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, traceStateLengthBytes, false);\n            offsetPos += 2; // move pointer to next free position\n\n            // set the remaining trace state bytes\n            const traceStateBytes = stringToUint8Array(truncatedTraceState);\n            for(let i = 0; i < traceStateBytes.length; i ++) {\n                // use BigEndian; litteEndian = false\n                contentBufferDataView.setUint8(offsetPos + i, traceStateBytes[i], false); // write the bytes\n            }\n            offsetPos += traceStateBytes.length;\n\t      }\n\t    }\n\n        // get the 8-byte array\n\t    return new Uint8Array(contentBuffer);\n    }\n\n    /**\n     * Truncate long trace states properly\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n     * @private\n     * @param {Number} maxTraceStateLength the maximum length for the trace state\n     * @returns {?String} The truncated trace state\n     */\n    _standardTraceStateTruncation(maxTraceStateLength) {\n        // cover corner cases\n\t    if (!this._traceState || this._traceState == null) {\n\t      return null;\n\t    } else if (this._traceState.length < maxTraceStateLength) {\n\t      return this._traceState; // no need to truncate\n\t    }\n\t\n        const ignoredMembers = new Array();\n\t    const traceStateBuilderArray = new Array();\n        let traceStateBuilderArrayLength = 0;\n\t    const listMembers = this._traceState.split(',');\n\n\t    for (let i = 0; i < listMembers.length; i++) {\n            let listMember = listMembers[i]; // current iteration object\n            if (listMember !== '' && listMember != null) {\n                let currentMemberLength = listMember.length;\n                if (currentMemberLength > 128) {\n                    // first of all, let's ignore members with length > 128 char\n                    ignoredMembers.push(listMember);\n                } else {\n                    let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                        traceStateBuilderArrayLength > 0 ? 1 : 0));\n\n                    if (newExpectedLength <= maxTraceStateLength) {\n                        // the comma seperator is added at the end when building the string\n                        traceStateBuilderArray.push(listMember);\n                        // increment by length of added member + 1 (for the comma)\n                        traceStateBuilderArrayLength += (currentMemberLength + (\n                            traceStateBuilderArrayLength > 0 ? 1 : 0));\n                    } else {\n                        ignoredMembers.push(listMember);\n                    }\n                }\n            }\n\t    }\n\t\n\t    // See if we can add the ignored members now\n\t    for (let i = 0; i < ignoredMembers.length; i++) {\n            let currentMember = ignoredMembers[i];\n            let currentMemberLength = currentMember.length;\n\n            let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                traceStateBuilderArrayLength > 0 ? 1 : 0));\n            if (newExpectedLength <= maxTraceStateLength) {\n                // the comma seperator is added at the end when building the string\n                traceStateBuilderArray.push(currentMember);\n                // increment by length of added member + 1 (for the comma)\n                traceStateBuilderArrayLength += (currentMemberLength + (\n                    traceStateBuilderArrayLength > 0 ? 1 : 0));\n            }\n\t    }\n\t\n        // build the string with comma seperating the members\n\t    return traceStateBuilderArray.join(',');\n\t}\n\n    /**\n     * Returns the string representation of this object\n     * \n     * @override\n     */\n    toString() {\n        return \"{traceId=\" + this.getTraceId()\n            + \", spanId=\" + this.getSpanId()\n            + \", sampled=\" + this.isSampled\n            + \", traceState=\" + ((this.traceState == null) ? \"}\" : \"'\" + this.traceState + \"'}\");\n    }\n}\n\nmodule.exports.TraceContext = TraceContext;\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageOutcome } = require('./lib/message-outcomes');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageOutcome = MessageOutcome;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n  /**\n   * The provision or deprovision operation failed.\n   * @event solace.SessionEventCode#PROVISION_ERROR\n   * @param {solace.SessionEvent} error The details related to the failed provision/deprovison operation.\n   */\n  PROVISION_ERROR:                    30,\n  /**\n   * The provision or deprovision operation succeeded.\n   * @event solace.SessionEventCode#PROVISION_OK\n   * @param {solace.SessionEvent} event The details related to the successful provision or deprovision operation.\n   */\n  PROVISION_OK:                     31,\n\n  \n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n      // Assuming NACKs until proven otherwise (we have code to handle it missing on reconnect):\n      [CapabilityType.AD_APP_ACK_FAILED]: true,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageOutcome } = require('solclient-message');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n    this.partitionGroupId = undefined; // support Partition Q feature\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {any} isAutoAcked whether this is an auto-acked message\n   * @internal\n   */\n  applicationAck(messageId, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId, isAutoAcked);\n  }\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {solace.MessageOutcome} settlementOutcome The message settlement outcome\n   * @internal\n   */\n  applicationSettle(messageId, settlementOutcome) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application settlement for ${\n      messageId\n    } with outcome: solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)}`);\n    this._fsm.applicationSettle(messageId, settlementOutcome);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n  CapabilityType.AD_APP_ACK_FAILED,\n  CapabilityType.VAR_LEN_EXT_PARAM,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n  [ClientCapabilityType.PQ, 0x20],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID, ClientCapabilityType.PQ]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message._autoAcknowledge(); // No, so auto ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","\nconst { LogFormatter } = require('solclient-log');\nconst { Baggage } = require('./baggage');\nconst { TraceContext } = require('./message-trace-context');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\n/**\n * @classdesc\n * <b>This class is used to enable the distributed tracing \n * support for variety of Solace message types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @internal\n */\nclass MessageTracingSupport {\n\n  /**\n   * Represents OpenTelementry Support for Solace Messages.\n   * The solace.Message class will extend this class.\n   * \n   * @constructor\n   * @hideconstructor\n   * @private\n   **/\n  constructor() {\n    // empty constructor\n  }\n\n  /**\n   * Retrieves a {@link TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    if(this._traceContextSetter == null || this._traceContextSetter == undefined) {\n      // create a new context setter object\n      this._traceContextSetter = new TraceContextSetter();\n    }\n    return this._traceContextSetter;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {?solace.TraceContext} Transport context object associated with this message\n   */\n  getTransportContext() {\n    return this._transportContext;\n  }\n  /**\n   * The transport context setter\n   * \n   * @param {TraceContextSetter} contextSetter \n   */\n  _setTransportContext(contextSetter) {\n    if(contextSetter != null) {\n      this._transportContext = new TraceContext(contextSetter);\n    }\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {?solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // if there is no creation context, use the context setter to create it\n    return this._creationContext;\n  }\n  /**\n   * It is created only once by the producer/publisher and cannot be\n   * changed by intermediaries\n   * @param {TraceContextSetter} contextSetter \n   */\n  _setCreationContext(contextSetter) {\n    // set the creation context only once\n    if(contextSetter != null) {\n      this._creationContext = new TraceContext(contextSetter);\n    }\n  }\n \n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {?solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    return this._baggage;\n  }\n  /**\n   * The internal setter for the baggage prop.\n   * \n   * @param {Baggage} value \n   */\n  _setBaggage(value) {\n    this._baggage = value;\n  }\n}\n\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n    isNumber,\n    isBoolean,\n    isString,\n    isStringOrNothing,\n} = Parameter;\n\nconst { uint8ArrayToString } = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts settable metadata used for \n * distributed message tracing with Solace messaging APIs \n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class TraceContextSetter {\n\n    /**\n     * Abstract constructor for metadata used \n     * for distributed message tracing.\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor() {\n        this._traceId = null;\n        this._spanId = null;\n        this._isSampled = false;\n        this._traceState = null;\n        this._version = 0x01; // version=0001 (4 bits, version=1);\n    }\n\n    /**\n     * Clone this TraceContextSetter object.\n     * \n     * @returns {TraceContextSetter} the cloned TraceContextSetter instance\n     */\n    clone() {\n        const _clonedContextSetter = new TraceContextSetter();\n        _clonedContextSetter._setSpanId(this._spanId);\n        _clonedContextSetter._setTraceId(this._traceId);\n        _clonedContextSetter._setSampled(this._isSampled);\n        _clonedContextSetter._setTraceState(this._traceState);\n        _clonedContextSetter._setVersion(this._version);\n        return _clonedContextSetter;\n    }\n\n    /**\n     * The length of the traceId bytes in the binary message\n    */\n    static get TRACE_ID_BYTES_LENGTH() {\n        return 16;\n    }\n\n    /**\n     * The length of the spanId bytes in the binary message\n    */\n    static get SPAN_ID_BYTES_LENGTH() {\n        return 8;\n    }\n\n    /**\n     * The version which for now is 1. -> 0001\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);;\n    }\n    /**\n     * Sets the version\n     * \n     * @param {Number} value The version encoded as Hex value\n     */\n    setVersion(value) {\n        this._setVersion(isNumber('version', value));\n    }\n    _setVersion(value) {\n        this._version = value;\n    }\n\n    /**\n     * @private\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Sets the value of the trace identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 16-length Hex string\n     */\n    setTraceId(value) {\n        this._setTraceId(isString('traceId', value));\n    }\n    _setTraceId(value) {\n        this._traceId = value;\n    }\n \n    /**\n     * @private\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Sets the value of the span identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 8-length Hex string\n     */\n    setSpanId(value) {\n        this._setSpanId(isString('spanId', value));\n    }\n    _setSpanId(value) {\n        this._spanId = value;\n    }\n \n    /**\n     * @private\n    */\n    get isSampled() {\n        return this._isSampled || false;\n    }\n    /**\n     * Turns on or off sampling for the associated message.\n     * \n     * @param {Boolean} value if true sampling is on, off otherwise\n     */\n    setSampled(value) {\n        this._setSampled(isBoolean('isSampled', value));\n    }\n    _setSampled(value) {\n        this._isSampled = value;\n    }\n \n    /**\n     * @private\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Sets the value of the trace state associated with the message.\n     * \n     * @param {?String} value The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    setTraceState(value) {\n        this._setTraceState(isStringOrNothing('traceState', value));\n    }\n    _setTraceState(value) {\n        this._traceState = value;\n    }\n\n    /**\n     * Gets a new instance of the Message Trace Context Setter \n     * from the values in the SMF header associated with the message.\n     * \n     * @param {Buffer | Uint8Array | String | null} traceContextValue The value of trace context associated with the message\n     * @returns {solace.TraceContextSetter | null} Context setter object\n     */\n    static fromTraceContext(traceContextValue) {\n        // implementation here\n        if (traceContextValue == null) {\n            return null;\n        }\n\n        let traceContextBuffer = null;\n        if (BufferImpl.isBuffer(traceContextValue)) {\n            traceContextBuffer = traceContextValue; // do nothing since it is already a buffer\n        } else if (typeof traceContextValue === 'string') {\n            traceContextBuffer = BufferImpl.from(traceContextValue, 'latin1');\n        }\n\n        // the trace context value is at least 32 bytes (without trace state)\n        if (!traceContextBuffer || traceContextBuffer.length < 32) {\n            return null;\n        }\n\n        try {\n            const traceContextBytes = (new Uint8Array(traceContextBuffer)).buffer;\n            let bytesRead = 0; // to track the byte read offsets\n\n            const traceContextSetter = new TraceContextSetter();\n\n            const firstByte = traceContextBytes.slice(bytesRead, bytesRead + (1));\n            const byte1DataView = new DataView(firstByte, 0, 1);\n            let byte1 = byte1DataView.getUint8(bytesRead);// get the first byte\n\n            const version = byte1 >> 4; // get the version from the four MSB\n            traceContextSetter.setVersion(version); // set the version\n\n            const isSampled = ((byte1 & 0x0F) == 0x04);\n            traceContextSetter.setSampled(isSampled); // set the sampled status\n            bytesRead++;\n\n            const traceId16Bytes = traceContextBytes.slice(bytesRead, bytesRead + (16));\n            const traceId = uint8ArrayToString(traceId16Bytes, 'hex'); // set the traceId\n            traceContextSetter.setTraceId(traceId);\n            bytesRead += TraceContextSetter.TRACE_ID_BYTES_LENGTH;\n\n            const spanId8Bytes = traceContextBytes.slice(bytesRead, bytesRead + (8));\n            const spanId = uint8ArrayToString(spanId8Bytes, 'hex'); // set the spanId\n            traceContextSetter.setSpanId(spanId);\n            bytesRead += TraceContextSetter.SPAN_ID_BYTES_LENGTH;\n\n            bytesRead ++; // Skip InjectionStandard byte\n            bytesRead += 4; // Skip the 4 RFU bytes\n\n            const traceStateLengthBytes = traceContextBytes.slice(bytesRead, bytesRead + (2));\n            const traceStateLengthDataView = new DataView(traceStateLengthBytes, 0, traceStateLengthBytes.byteLength);\n            const traceStateLength = traceStateLengthDataView.getUint16(0, false);// get the trace length\n            bytesRead += 2; // move pointer past length bytes\n\n            // if there is a trace state value, read it\n            if (traceStateLength > 0) {\n                const traceStateBytes = traceContextBytes.slice(bytesRead, bytesRead + (traceStateLength));\n                const traceState = uint8ArrayToString(traceStateBytes); // set the trace state\n                traceContextSetter.setTraceState(traceState);\n            }\n            return traceContextSetter;\n        } catch (ex) {\n            return null;\n        }\n    }\n}\n\nmodule.exports.TraceContextSetter = TraceContextSetter;\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    // call this to initialize the _mutableState property\n    this.reset(); \n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      // finished DNS resolution checks\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","const { Enum, assert } = require('solclient-eskit');\nconst { MessageOutcome } = require('solclient-message');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state, settlementOutcome) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n      this.settlementOutcome = settlementOutcome || MessageOutcome.ACCEPTED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state, settlementOutcome = undefined) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n    this.settlementOutcome = (settlementOutcome !== undefined) ? settlementOutcome : null; // outcome not yet set at point of insertion\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n    this.settlementOutcome = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @param {?MessageOutcome} settlementOutcome where available, update the settlement outcome for the ID\n   * @private\n   */\n  updateAckState(id, state, settlementOutcome = undefined) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n    // where available, update the settlement outcome too\n    if(settlementOutcome != undefined) {\n      existing.settlementOutcome = settlementOutcome;\n    } else if(state === ApplicationAckState.ACKED_NOT_SENT) {\n      // set default settlement outcome to ACCEPTED for ACKed messages if no outcome available\n      existing.settlementOutcome = MessageOutcome.ACCEPTED;\n    }\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n  PARTITION_KEY_HASH:       0x35, // @Todo: not yet implemented as improvement for PQ\n  TS_TRANSPORT_CONTEXT:     0x36,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","module.exports.Long = require('long');\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  Baggage,\n  TraceContext,\n  TraceContextSetter,\n} = require('solclient-message-tracing');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  Baggage,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TraceContext,\n  TraceContextSetter,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\n\nfunction uint8ArrayToString(data, format = undefined) {\n  const dataLength = data.byteLength;\n  const uint8DataArray = new Uint8Array(BufferImpl.from(data));\n  let result = '';\n  for (let i = 0; i < dataLength; i++) {\n    if(format && format.toLowerCase() === 'hex') {\n      result += (uint8DataArray[i]).toString(16).padStart(2, '0');\n    } else {\n      result += String.fromCharCode(uint8DataArray[i] & 0xff);\n    }\n  }\n  return result;\n}\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction hexStringToUint8Array(data) {\n  // if null data, return empty Uint8Array\n  if(data == null) {\n    return new Uint8Array();\n  }\n  return Uint8Array.from(BufferImpl.from(data, 'hex'));\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  \n  uint8ArrayToString,\n  stringToUint8Array,\n\n  hexStringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      case SMFExtendedParameterType.TS_TRANSPORT_CONTEXT:\n        // from specs, trace span context must be at least 36 bytes\n        // use 36 - 4 (account for error in 2-byte variable length value calculation above) = 32\n        if(valueLen >= 32) {\n          // will convert this string to a UInt8Array later\n          smfHeader.pm_ts_transport_context = dataBuf.toString('latin1', pos, pos + valueLen);\n        } else {\n          LOG_TRACE('Skipped due to unexpected size of extended parameter ' +\n                    `type ${type} value length ${valueLen} offset ${pos}`);\n        }\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          // this is some kind of AD publisher ID in a direct message, but it's ony 4 bytes.\n          // It's of no use to us and is not exposed publicly.\n          // Skip.\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     * @default null\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnected;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","/* Any copyright is dedicated to the Public Domain.\n * http://creativecommons.org/publicdomain/zero/1.0/ */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-labels */\n/* eslint-env browser */\nmodule.exports = function (scope) {\n  // feature detect for URL constructor\n  let hasWorkingUrl = false;\n  if (!scope.forceJURL) {\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      hasWorkingUrl = u.href === 'http://a/c%20d';\n    } catch (e) {\n      // no problem\n    }\n  }\n\n  if (hasWorkingUrl) {\n    return;\n  }\n\n  // Otherwise the keys get minified.\n  /* eslint-disable dot-notation */\n  const relative = Object.create(null);\n  relative['ftp'] = 21;\n  relative['file'] = 0;\n  relative['gopher'] = 70;\n  relative['http'] = 80;\n  relative['https'] = 443;\n  relative['ws'] = 80;\n  relative['wss'] = 443;\n  /* eslint-enable dot-notation */\n\n  const relativePathDotMapping = Object.create(null);\n  relativePathDotMapping['%2e'] = '.';\n  relativePathDotMapping['.%2e'] = '..';\n  relativePathDotMapping['%2e.'] = '..';\n  relativePathDotMapping['%2e%2e'] = '..';\n\n  function clear() {\n    this._scheme = '';\n    this._schemeData = '';\n    this._username = '';\n    this._password = null;\n    this._host = '';\n    this._port = '';\n    this._path = [];\n    this._query = '';\n    this._fragment = '';\n    this._isInvalid = false;\n    this._isRelative = false;\n  }\n\n  function isRelativeScheme(scheme) {\n    return relative[scheme] !== undefined;\n  }\n\n  function invalid() {\n    clear.call(this);\n    this._isInvalid = true;\n  }\n\n  function IDNAToASCII(h) {\n    if (h === '') {\n      invalid.call(this);\n    }\n    // TODO: more robust\n    return h.toLowerCase();\n  }\n\n  function percentEscape(c) {\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ? `\n       [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  function percentEscapeQuery(c) {\n    // TODO: This actually needs to encode c using encoding and then\n    // convert the bytes one-by-one.\n\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ` (do not escape '?')\n       [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  let EOF;\n  const ALPHA = /[a-zA-Z]/;\n  const ALPHANUMERIC = /[a-zA-Z0-9+\\-.]/;\n\n  function parse(input, stateOverride, base) {\n    const errors = [];\n    function err(message) {\n      errors.push(message);\n    }\n\n    let state = stateOverride || 'scheme start';\n    let cursor = 0;\n    let buffer = '';\n    let seenAt = false;\n    let seenBracket = false;\n\n    loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {\n      const c = input[cursor];\n      switch (state) {\n        case 'scheme start':\n          if (c && ALPHA.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n            state = 'scheme';\n          } else if (!stateOverride) {\n            buffer = '';\n            state = 'no scheme';\n            continue;\n          } else {\n            err('Invalid scheme.');\n            break loop;\n          }\n          break;\n\n        case 'scheme':\n          if (c && ALPHANUMERIC.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n          } else if (c === ':') {\n            this._scheme = buffer;\n            buffer = '';\n            if (stateOverride) {\n              break loop;\n            }\n            if (isRelativeScheme(this._scheme)) {\n              this._isRelative = true;\n            }\n            if (this._scheme === 'file') {\n              state = 'relative';\n            } else if (this._isRelative && base && base._scheme === this._scheme) {\n              state = 'relative or authority';\n            } else if (this._isRelative) {\n              state = 'authority first slash';\n            } else {\n              state = 'scheme data';\n            }\n          } else if (!stateOverride) {\n            buffer = '';\n            cursor = 0;\n            state = 'no scheme';\n            continue;\n          } else if (EOF === c) {\n            break loop;\n          } else {\n            err(`Code point not allowed in scheme: ${c}`);\n            break loop;\n          }\n          break;\n\n        case 'scheme data':\n          if (c === '?') {\n            this._query = '?';\n            state = 'query';\n          } else if (c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            // TODO: error handling\n            this._schemeData += percentEscape(c);\n          }\n          break;\n\n        case 'no scheme':\n          if (!base || !(isRelativeScheme(base._scheme))) {\n            err('Missing scheme.');\n            invalid.call(this);\n          } else {\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative or authority':\n          if (c === '/' && input[cursor + 1] === '/') {\n            state = 'authority ignore slashes';\n          } else {\n            err(`Expected /, got: ${c}`);\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative':\n          this._isRelative = true;\n          if (this._scheme !== 'file') { this._scheme = base._scheme; }\n          if (EOF === c) {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._username = base._username;\n            this._password = base._password;\n            break loop;\n          } else if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') { err('\\\\ is an invalid code point.'); }\n            state = 'relative slash';\n          } else if (c === '?') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = '?';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'query';\n          } else if (c === '#') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._fragment = '#';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'fragment';\n          } else {\n            const nextC = input[cursor + 1];\n            const nextNextC = input[cursor + 2];\n            if (this._scheme !== 'file' || !ALPHA.test(c) ||\n                (nextC !== ':' && nextC !== '|') ||\n                (\n                  EOF !== nextNextC && nextNextC !== '/' &&\n                  nextNextC !== '\\\\' && nextNextC !== '?' && nextNextC !== '#'\n                )\n              ) {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n              this._path = base._path.slice();\n              this._path.pop();\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'relative slash':\n          if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') {\n              err('\\\\ is an invalid code point.');\n            }\n            if (this._scheme === 'file') {\n              state = 'file host';\n            } else {\n              state = 'authority ignore slashes';\n            }\n          } else {\n            if (this._scheme !== 'file') {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'authority first slash':\n          if (c === '/') {\n            state = 'authority second slash';\n          } else {\n            err(`Expected '/', got: ${c}`);\n            state = 'authority ignore slashes';\n            continue;\n          }\n          break;\n\n        case 'authority second slash':\n          state = 'authority ignore slashes';\n          if (c !== '/') {\n            err(`Expected '/', got: ${c}`);\n            continue;\n          }\n          break;\n\n        case 'authority ignore slashes':\n          if (c !== '/' && c !== '\\\\') {\n            state = 'authority';\n            continue;\n          } else {\n            err(`Expected authority, got: ${c}`);\n          }\n          break;\n\n        case 'authority':\n          if (c === '@') {\n            if (seenAt) {\n              err('@ already seen.');\n              buffer += '%40';\n            }\n            seenAt = true;\n            for (let i = 0; i < buffer.length; i++) {\n              const cp = buffer[i];\n              if (cp === '\\t' || cp === '\\n' || cp === '\\r') {\n                err('Invalid whitespace in authority.');\n                continue;\n              }\n              // TODO: check URL code points\n              if (cp === ':' && this._password === null) {\n                this._password = '';\n                continue;\n              }\n              const tempC = percentEscape(cp);\n              if (this._password !== null) {\n                this._password += tempC;\n              } else {\n                this._username += tempC;\n              }\n            }\n            buffer = '';\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            cursor -= buffer.length;\n            buffer = '';\n            state = 'host';\n            continue;\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'file host':\n          if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            if (buffer.length === 2 && ALPHA.test(buffer[0]) &&\n                (buffer[1] === ':' || buffer[1] === '|')) {\n              state = 'relative path';\n            } else if (buffer.length === 0) {\n              state = 'relative path start';\n            } else {\n              this._host = IDNAToASCII.call(this, buffer);\n              buffer = '';\n              state = 'relative path start';\n            }\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err('Invalid whitespace in file host.');\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'host':\n        case 'hostname':\n          if (c === ':' && !seenBracket) {\n            // TODO: host parsing\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'port';\n            if (stateOverride === 'hostname') {\n              break loop;\n            }\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'relative path start';\n            if (stateOverride) {\n              break loop;\n            }\n            continue;\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            if (c === '[') {\n              seenBracket = true;\n            } else if (c === ']') {\n              seenBracket = false;\n            }\n            buffer += c;\n          } else {\n            err(`Invalid code point in host/hostname: ${c}`);\n          }\n          break;\n\n        case 'port':\n          if (/[0-9]/.test(c)) {\n            buffer += c;\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#'\n                     || stateOverride) {\n            if (buffer !== '') {\n              const temp = parseInt(buffer, 10);\n              if (temp !== relative[this._scheme]) {\n                this._port = `${temp}`;\n              }\n              buffer = '';\n            }\n            if (stateOverride) {\n              break loop;\n            }\n            state = 'relative path start';\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err(`Invalid code point in port: ${c}`);\n          } else {\n            invalid.call(this);\n          }\n          break;\n\n        case 'relative path start':\n          if (c === '\\\\') {\n            err(\"'\\\\' not allowed in path.\");\n          }\n          state = 'relative path';\n          if (c !== '/' && c !== '\\\\') {\n            continue;\n          }\n          break;\n\n        case 'relative path':\n          if (EOF === c || c === '/' || c === '\\\\' ||\n              (!stateOverride && (c === '?' || c === '#'))) {\n            if (c === '\\\\') {\n              err('\\\\ not allowed in relative path.');\n            }\n            const tmp = relativePathDotMapping[buffer.toLowerCase()];\n            if (tmp) {\n              buffer = tmp;\n            }\n            if (buffer === '..') {\n              this._path.pop();\n              if (c !== '/' && c !== '\\\\') {\n                this._path.push('');\n              }\n            } else if (buffer === '.' && c !== '/' && c !== '\\\\') {\n              this._path.push('');\n            } else if (buffer !== '.') {\n              if (this._scheme === 'file' && this._path.length === 0 && buffer.length === 2 &&\n                  ALPHA.test(buffer[0]) && buffer[1] === '|') {\n                buffer = `${buffer[0]}:`;\n              }\n              this._path.push(buffer);\n            }\n            buffer = '';\n            if (c === '?') {\n              this._query = '?';\n              state = 'query';\n            } else if (c === '#') {\n              this._fragment = '#';\n              state = 'fragment';\n            }\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            buffer += percentEscape(c);\n          }\n          break;\n\n        case 'query':\n          if (!stateOverride && c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._query += percentEscapeQuery(c);\n          }\n          break;\n\n        case 'fragment':\n          if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._fragment += c;\n          }\n          break;\n\n        default:\n      }\n\n      cursor++;\n    }\n  }\n\n\n  // Does not process domain names or IP addresses.\n  // Does not handle encoding for the query parameter.\n  /* eslint-disable no-param-reassign */\n  function PolyfillURL(url, base /* , encoding */) {\n    if (base !== undefined && !(base instanceof PolyfillURL)) {\n      base = new PolyfillURL(String(base));\n    }\n\n    url = String(url);\n    this._url = url;\n    clear.call(this);\n\n    const input = url.replace(/^[ \\t\\r\\n\\f]+|[ \\t\\r\\n\\f]+$/g, '');\n    // encoding = encoding || 'utf-8'\n\n    parse.call(this, input, null, base);\n  }\n\n  PolyfillURL.prototype = {\n    toString() {\n      return this.href;\n    },\n    get href() {\n      if (this._isInvalid) { return this._url; }\n\n      let authority = '';\n      if (this._username !== '' || this._password !== null) {\n        authority = `${this._username +\n            (this._password !== null ? `:${this._password}` : '')}@`;\n      }\n\n      return this.protocol +\n          (this._isRelative ? `//${authority}${this.host}` : '') +\n          this.pathname + this._query + this._fragment;\n    },\n    set href(href) {\n      clear.call(this);\n      parse.call(this, href);\n    },\n\n    get protocol() {\n      return `${this._scheme}:`;\n    },\n    set protocol(protocol) {\n      if (this._isInvalid) { return; }\n      parse.call(this, `${protocol}:`, 'scheme start');\n    },\n\n    get host() {\n      if (this._isInvalid) return '';\n      if (this._port) return `${this._host}:${this._port}`;\n      return this._host;\n    },\n    set host(host) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, host, 'host');\n    },\n\n    get hostname() {\n      return this._host;\n    },\n    set hostname(hostname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, hostname, 'hostname');\n    },\n\n    get port() {\n      return this._port;\n    },\n    set port(port) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, port, 'port');\n    },\n\n    get pathname() {\n      if (this._isInvalid) return '';\n      if (this._isRelative) return `/${this._path.join('/')}`;\n      return this._schemeData;\n    },\n    set pathname(pathname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._path = [];\n      parse.call(this, pathname, 'relative path start');\n    },\n\n    get search() {\n      return this._isInvalid || !this._query || this._query === '?' ?\n          '' : this._query;\n    },\n    set search(search) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._query = '?';\n      if (search[0] === '?') { search = search.slice(1); }\n      parse.call(this, search, 'query');\n    },\n\n    get hash() {\n      return this._isInvalid || !this._fragment || this._fragment === '#' ?\n          '' : this._fragment;\n    },\n    set hash(hash) {\n      if (this._isInvalid) { return; }\n      this._fragment = '#';\n      if (hash[0] === '#') { hash = hash.slice(1); }\n      parse.call(this, hash, 'fragment');\n    },\n\n    get origin() {\n      if (this._isInvalid || !this._scheme) {\n        return '';\n      }\n      // javascript: Gecko returns String(\"\"), WebKit/Blink String(\"null\")\n      // Gecko throws error for \"data://\"\n      // data: Gecko returns \"\", Blink returns \"data://\", WebKit returns \"null\"\n      // Gecko returns String(\"\") for file: mailto:\n      // WebKit/Blink returns String(\"SCHEME://\") for file: mailto:\n      switch (this._scheme) {\n        case 'data':\n        case 'file':\n        case 'javascript':\n        case 'mailto':\n          return 'null';\n        default:\n      }\n      const host = this.host;\n      if (!host) {\n        return '';\n      }\n      return `${this._scheme}://${host}`;\n    },\n  };\n\n  // Copy over the static methods\n  const OriginalURL = scope.URL;\n  if (OriginalURL) {\n    PolyfillURL.createObjectURL = function createObjectURL(...args) {\n      // IE extension allows a second optional options argument.\n      // http://msdn.microsoft.com/en-us/library/ie/hh772302(v=vs.85).aspx\n      return OriginalURL.createObjectURL(...args);\n    };\n    PolyfillURL.revokeObjectURL = function revokeObjectURL(url) {\n      OriginalURL.revokeObjectURL(url);\n    };\n  }\n\n  scope.URL = PolyfillURL;\n};\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} [queueSpec.name=null] The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName() || ''}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { MessageOutcome, RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\n// assumption is that this first message (messageId = 0) settlement outcome is ACCEPTED (ACKed)\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT, MessageOutcome.ACCEPTED);\n\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n    this._hasAutoAckSupport = autoAck;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n\n    function verifyNackSettlementOutcomesSupport(requiredSettlementOutcomes) {\n      let error = null;\n      // check for whether the broker session supports the NACK capability\n      const settlementOutcomes = requiredSettlementOutcomes;\n      if (settlementOutcomes && settlementOutcomes.length > 0) {\n        // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n        const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n        if(isNackRequired && !fsm._sessionInterface.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n          const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n            settlementOutcomes.map(v => MessageOutcome.nameOf(v)).join(', ')\n          } ]`;\n          // log the operation error as a Warning\n          LOG_WARN(outcomeNotSupportedError);\n          // then create the actual OperationError object here\n          error = new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION);\n        }      \n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n      else if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n\n    /**\n     * Check Capabilities on Re-Bind\n     * \n     * @param {*} curState - current state\n     * @param {*} externalTransition - is an external transition?\n     * @returns {State} retrurns the new state for the state machine\n     * @private\n     */\n    function checkCapabilitiesChoicePointOnRebind(curState, externalTransition = false) {\n      let error = null;\n      if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to re-bind\n      if (externalTransition) {\n        return curState.externalTransitionTo(fsm.Reconnecting.RBindSent);\n      }\n      return curState.transitionTo(fsm.Reconnecting.RBindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state and partition group ID, if any');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          (properties.requiredSettlementOutcomes && properties.requiredSettlementOutcomes.length > 0));\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          properties.requiredSettlementOutcomes]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        // the partition group ID\n        let partitionGroupIdValue = msg.getPartitionGroupId();\n        if(partitionGroupIdValue == undefined || partitionGroupIdValue == null) {\n          partitionGroupIdValue = undefined; // set it as undefined\n          fsm._clearPartitionGroupId(); // clear the partitionGroupId\n        }\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n          partitionGroupId:     partitionGroupIdValue,\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n          partitionGroupId:     partitionGroupIdValue,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return checkCapabilitiesChoicePointOnRebind(this, false);\n          // return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return checkCapabilitiesChoicePointOnRebind(this, false);\n        // return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return checkCapabilitiesChoicePointOnRebind(this, true);\n          // return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return checkCapabilitiesChoicePointOnRebind(this, false);\n      // return this.transitionTo(fsm.Reconnecting.RBindSent);\n    });\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emitting UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emitting UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          const dupAckRanges = new Map();\n          dupAckRanges.set(MessageOutcome.ACCEPTED, [[messageID, messageID]]);\n          this._sendAck(dupAckRanges); // send ack for duplicates as ACCEPTED outcome (broker would use previous settlement outcome for message)\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId, isAutoAcked = false) {\n    // internally call the applicationSettle(messageId, MessageOutcome.ACCEPTED); \n    // since the implementations are the same\n    this.applicationSettle(messageId, MessageOutcome.ACCEPTED, isAutoAcked);\n  }\n\n  applicationSettle(messageId, messageOutcome = MessageOutcome.ACCEPTED, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n\n    // increment the correct stat for the outcome\n    switch(messageOutcome) {\n      case MessageOutcome.FAILED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.FAILED');\n        // count persistent and non-persistent settled failed msgs\n        this._consumer.incStat(StatType.RX_SETTLE_FAILED);\n        break;\n      // case MessageOutcome.RELEASED:\n      //   // no current support for RELEASED settlement Outcome\n      //   break;\n      case MessageOutcome.REJECTED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.REJECTED');\n        // count persistent and non-persistent settled rejected msgs\n        this._consumer.incStat(StatType.RX_SETTLE_REJECTED);\n        break;\n\n      case MessageOutcome.ACCEPTED:\n         // count persistent and non-persistent settled accepted msgs\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.ACCEPTED');\n        // count for manual calls on Message.acknowledge(); or Message.settle(outcome); methods\n        // so that we don't count for auto-Acks\n        if(!isAutoAcked) {\n          this._consumer.incStat(StatType.RX_SETTLE_ACCEPTED); // count persistent and non-persistent settled accepted msgs\n        }\n        // increment the Acked stat for calls to accept() and auto-acks\n        this._consumer.incStat(StatType.RX_ACKED); // count it as normal acknowledgement\n        break;\n    }\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      const oldAckRanges = new Map();\n      oldAckRanges.set(messageOutcome, [[messageId, messageId]]);\n      this._sendAck(oldAckRanges); // send settlement outcome for message\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT, messageOutcome);\n    // if the message outcome is not ACCEPTED, then flush the buffer immediately\n    if(messageOutcome !== MessageOutcome.ACCEPTED) {\n      this._sendAcks(true); // send the accumulated Ack(s) and Nacks immediately\n    } else {\n      this._setTransportAckTimer();\n    }\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _clearPartitionGroupId() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Clear the consumer.partitionGroupId; Set it to undefined');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n\n    LOG_TRACE('Initializing partitionGroupId');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Map.<Array.<ackpair>>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    // they will hold an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    const currentRangeLength = currentRange.length;\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      // check for the type of settlement outcome and push if same as aggregation group\n      if(\n        currentRangeLength === 0 ||\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome === applicationAck.settlementOutcome)\n      ) {\n        currentRange.push(applicationAck);\n        return; // Wait for end of range or flush\n      }\n      // if settlement outcomes were flushed and applicationAck still remaining, start another aggregation group\n      else if(\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome !== applicationAck.settlementOutcome)\n      ) {\n        const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n        ackRanges[rangeOutcome].push(currentRange); // flush the range since we detect a change in outcomes\n\n        acksPendingState.currentRange = []; // Clear the accumulators for this range.\n        acksPendingState.currentRange.push(applicationAck); // push the detected change\n        return; // Wait for end of range or flush\n      }\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range for each of the settlement outcomes.\n    if (currentRangeLength) {\n      const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n      ackRanges[rangeOutcome].push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n\n    // aggregate the total length of the ack/nack ranges\n    let totalRangeLen  = 0;\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      totalRangeLen += ackRanges[allMessageOutcomes[i]].length;\n    }\n\n    if (applicationAck === null || (totalRangeLen === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES)) {\n      // Reduce each range for each of the settlement outcomes to a first and last ID.\n      const bareRanges = new Map(); // ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n      let hasAnyBareRanges = false;\n\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        // check for value and only put real values into map\n        if(ackRanges[allMessageOutcomes[i]].length > 0) {\n          bareRanges.set(allMessageOutcomes[i], ackRanges[allMessageOutcomes[i]].map(\n            range => [range[0].id, range[range.length - 1].id]\n          ));\n          // we have written at least one outcome ack/nack range into the map\n          hasAnyBareRanges = true;\n        }\n      }\n\n      if (hasAnyBareRanges || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n\n        this._sendAck(bareRanges); // now contains a Map of Arrays to pass settlement outcomes to Broker\n\n        // expectation is only ONE NACK before we flush the (N)acks in the RingBuffer to the broker\n        const failedBareRanges = bareRanges.get(MessageOutcome.FAILED);\n        const rejectedBareRanges = bareRanges.get(MessageOutcome.REJECTED);\n\n        // Warning: this log statement reduces debug performance by about 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks(ACCEPTED): ${bareRanges.has(MessageOutcome.ACCEPTED)\n            ? bareRanges.get(MessageOutcome.ACCEPTED).map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}\\n`,\n          `Application Nacks(FAILED): ${bareRanges.has(MessageOutcome.FAILED)\n            ? `[${failedBareRanges[0][0]}..${failedBareRanges[0][1]}]`\n            : '[]'}\\n`,\n          `Application Nacks(REJECTED): ${bareRanges.has(MessageOutcome.REJECTED)\n            ? `[${rejectedBareRanges[0][0]}..${rejectedBareRanges[0][1]}]`\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        ackRanges[allMessageOutcomes[i]].forEach((ackRange) => {\n          ackRange.forEach((ack) => {\n            if (ack.state !== ApplicationAckState.ACKED_SENT) {\n              try {\n                this._applicationAcks.updateAckState(ack.id,\n                                                     ApplicationAckState.ACKED_SENT);\n              } catch (e) {\n                const { LOG_ERROR } = this.logger;\n                LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n              }\n            }\n          });\n        });\n      }\n\n      // Clear the main accumulators since it has hit the wire.\n      acksPendingState.ackRanges = [];\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n      }\n    }\n    // Clear the accumulators for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [], // holds an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n      currentRange:      [], // holds an Array for each supported settlement outcomes per aggregation (i.e. indexes -> 0,1,2,3)\n    };\n\n    // initialize the ackRanges with Array of Arrays\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n    }\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      assert(acksPendingState.ackRanges[allMessageOutcomes[i]].length === 0);\n    }\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n  get hasAutoAckSupport() {\n    return this._hasAutoAckSupport;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object, or to {@link solace.Session#provisionEndpoint} .\n * Upon creation of a queue or TE, undefined\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : undefined,\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Parameter: { isStringOrNothing } } = require('solclient-validate');\n\n/**\n * @classdesc\n * <b>This class abstracts baggage metadata used for distributed\n * message tracing with Solace messaging APIs types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class Baggage {\n \n    /**\n     * Get the value of the baggage associated with the message.\n     * This method is for internal use only.\n     *\n     * @returns {?String} value of baggage associated with the message\n     * @internal\n     */\n    getBaggage() {\n        return this._baggage || null;\n    }\n \n    /**\n     * Sets the value of the baggage associated with this message\n     * This method is for internal use only.\n     *\n     * @param {?String} value The valid value of baggage associated with this  message\n     * @see {@link https://www.w3.org/TR/2022/WD-baggage-20220928|w3c baggage format specification}  \n     * @internal\n     */\n    setBaggage(value) {\n        this._setBaggage(isStringOrNothing('baggage', value));\n    }\n    _setBaggage(value) {\n        this._baggage = value;\n    }\n \n}\n\nmodule.exports.Baggage = Baggage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const cloneObj = require('./clone'); // using the modified local clone version\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  sdtstream.rewind();\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  sdtstream.rewind();\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        NotImplementedError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor, QueueProperties, QueuePropertiesValidator,\n        QueueType, explainInvalidEndpointName } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { ProvisionEvent } = require('./provision-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n * @fires solace.SessionEventCode#PROVISION_OK\n * @fires solace.SessionEventCode#PROVISION_ERROR\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      false, //observe socket buffer size constraint, return NO_SPACE if full.\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send unsubscribe request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send unsubscribe request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              // TODO: handle transport error?\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  true, // force beyond socket buffer limit because there's no error handling\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n              // TODO: handle transport error?\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    true, // force beyond socket buffer limit because there's no error handling\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n              // TODO: handle transport error?\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              true, // force beyond socket buffer limit because there's no error handling\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n\n    // check to see if we can send variable length params to the broker\n    if (!this.isCapable(CapabilityType.VAR_LEN_EXT_PARAM)) {\n      LOG_TRACE('Broker session does not support VAR LEN SMF extended parameters');\n      // clear these message properties since var-len extended\n      // properties not supported on broker\n      message.clearExtendedVarLenParams();\n\n      // throw error if these extended var-length message properties are set\n      if(this._failOnExtendedVariableLengthProperties(message)) {\n        throw new OperationError(\n          'Broker does not support variable length SMF extended parameters',\n          ErrorSubcode.INVALID_OPERATION);\n      }\n    }\n    this.validateAndSendMessage(message);\n  }\n\n  _failOnExtendedVariableLengthProperties(message) {\n    return false; // return false since no properties for now\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   *\n   * <p>The API fills in the correlationId and replyTo fields in the request when they are not preset by the application.\n   * This is the preferred use case to ensure replies are directed back to the correct requester.</p>\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n \n  /**\n   * Provisons a queue or topic endpoint on the broker without binding a flow or adding a subscription.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Only durable endpoints supported currently.\n   * @param {solace.QueueProperties} queueProperties Optional, in-out parameter.\n   *  In: Properties of the Queue/TE to be created. Empty or undefined fields are left to broker defaults.\n   *  Out (on PROVISION_OK, not on function return): Properties of the endpoint as created.\n   * @param {boolean} ignoreExists Makes the operation idempotent if true, by ignoring \"endpoint already exists\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  provisionEndpoint(queueDescriptor, queueProperties, ignoreExists, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreExists', ignoreExists);\n    Parameter.isInstanceOf('queueDescriptor', queueDescriptor, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueDescriptor must be supplied, can't be \"+queueDescriptor);\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"provisionEndpoint only works on named endpoints\");\n    // Cloning to apply the durable:true default.\n    const queueDescriptor2 = new QueueDescriptor(queueDescriptor);\n    if (!queueDescriptor2.durable) {\n      throw new NotImplementedError('provisionEndpoint() only works for durable endpoints.');\n      //console.log(\"Temporarily allowing durable Create.\");\n    }\n    if (queueProperties) {\n      Parameter.isInstanceOfOrNothing('queueProperties', queueProperties, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueProperties must be an object, ideally a solace.QueueProperties instance. Can't be \"+queueProperties);\n      QueuePropertiesValidator.validate(queueProperties);\n    }\n    const callback = this.handleProvisionResponse.bind(this, ignoreExists, true);\n    return this._sessionFSM.provisionEndpoint(queueDescriptor2, queueProperties, correlationKey, callback);\n\n\n  }\n\n  /**\n   * Deprovisons a queue or topic endpoint on the broker.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Durability is ignored.\n   * @param {boolean} ignoreMisssing Makes the operation idempotent if true, by ignoring \"endpoint doesn't exist\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  deprovisionEndpoint(queueDescriptor, ignoreMissing, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreMissing', ignoreMissing);\n    if (!(queueDescriptor instanceof Object)) {\n      throw new OperationError('queueDesscriptor object required', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"deprovisionEndpoint only works on named endpoints\");\n\n    // Leaving the last two parameters, the SMF response object and the CorrelatedRequest, unbound.\n    const callback = this.handleProvisionResponse.bind(this, ignoreMissing, false);\n\n    return this._sessionFSM.deprovisionEndpoint(queueDescriptor, correlationKey, callback);\n\n  }\n\n  /**\n   * Internal callback for provision/deprovision response handling.\n   * @param {solace.QueueProperties} queueProperties to update from the response (provision only)\n   * @param {boolean} ignore ignoreMissing or ignoreExists was set.\n   * @param {boolean} provision true for provision, false for deprovision.\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleProvisionResponse(ignore, provision, msg, request) {\n    const {correlationKey} = request;\n    const responseCode = msg._smfHeader.pm_respcode;\n    const responseString = msg._smfHeader.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);   \n    const queueDescriptor = new QueueDescriptor();\n    queueDescriptor.durable = undefined;\n    const queueProperties = new QueueProperties();\n    const { DestinationUtil } = DestinationLib;\n\n    if (msg.getQueueNameBytes() && msg.getQueueNameBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getQueueNameBytes()); \n      queueDescriptor.type = QueueType.QUEUE;\n    } else if (msg.getTopicEndpointBytes() && msg.getTopicEndpointBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getTopicEndpointBytes()); \n      queueDescriptor.type = QueueType.TOPIC_ENDPOINT;\n    } else {\n      queueDescriptor.name =  undefined;\n      queueDescriptor.type = undefined;\n    }\n\n    queueDescriptor.durable = msg.getDurability();\n    queueProperties.accessType = msg.getAccessType();\n    queueProperties.discardBehavior = msg.getQueueDiscardBehavior();\n    queueProperties.maxMessageRedelivery = msg.getMaxRedelivery();\n    queueProperties.maxMessageSize = msg.getMaxMsgSize();\n    queueProperties.permissions = msg.getAllOthersPermissions();\n    queueProperties.quotaMB = msg.getQuota();\n    queueProperties.respectsTTL = msg.getRespectsTTL();\n\n    let reason = null;\n    if ((responseCode === 400) && (errorSubcode === ErrorSubcode.INVALID_QUEUE_NAME || errorSubcode === ErrorSubcode.INVALID_TE_NAME)) {\n      reason = explainInvalidEndpointName(queueDescriptor.name);\n    }\n\n\n    let outcome = SessionEventCode.PROVISION_ERROR;\n    if (responseCode === 200) {\n      outcome = SessionEventCode.PROVISION_OK;\n    } else {\n      if (ignore && provision && errorSubcode == ErrorSubcode.ENDPOINT_ALREADY_EXISTS)  {\n        outcome = SessionEventCode.PROVISION_OK;\n      } else if (ignore && !provision && (errorSubcode == ErrorSubcode.UNKNOWN_QUEUE_NAME || errorSubcode == ErrorSubcode.UNKNOWN_TOPIC_ENDPOINT_NAME) ) {\n        outcome = SessionEventCode.PROVISION_OK;\n      }\n    }\n\n    const provisionEvent = new ProvisionEvent(outcome,\n        responseString,\n        responseCode,\n        errorSubcode,\n        correlationKey,\n        reason,\n        queueDescriptor,\n        queueProperties);\n    this.sendEvent(provisionEvent);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\nconst { EndpointNameComplaint, explainInvalidEndpointName } = require('./lib/endpoint-name-complaint');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\nmodule.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n    _payloadCompressionLevel:   0,\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n  'tlsv1.3',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @default null\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @default null\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description Deprecated, use {@link solace.SessionProperties#tlsMinProtocol} and {@link solace.SessionProperties#tlsMaxProtocol} instead.\n   * @default null\n   * @target node\n   * @deprecated\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#tlsMinProtocol\n   * @type {String}\n   * @description The oldest TLS version to accept when connecting to the broker.\n   * Allowed values are: TLSv1.1, TLSv1.2, TLSv1.3\n   * @default \"TLSv1.2\"\n   * @target node\n   */\n  get tlsMinProtocol() {\n    return Check.nothing(this._tlsMinProtocol) ? '' : this._tlsMinProtocol;\n  }\n  set tlsMinProtocol(newValue) {\n    this._tlsMinProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#tlsMaxProtocol\n   * @type {String}\n   * @description The newest TLS version to negtiate when connecting to the broker.\n   * Allowed values are: TLSv1.1, TLSv1.2, TLSv1.3\n   * @default null\n   * @target node\n   */\n  get tlsMaxProtocol() {\n    return Check.nothing(this._tlsMaxProtocol) ? '' : this._tlsMaxProtocol;\n  }\n  set tlsMaxProtocol(newValue) {\n    this._tlsMaxProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections using TLSv1.2 or older. Ignored when TLSv1.3 is negotiated.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'tlsMinProtocol':           this.tlsMinProtocol,\n      'tlsMaxProtocol':           this.tlsMaxProtocol,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   * @default undefined\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  // ================== PAYLOAD COMPRESSION ========================\n  /**\n   * @name solace.SessionProperties#payloadCompressionLevel\n   * @type {Number}\n   * @description Valid values for the payload compression level to be applied to the payload of a message published by a client are 0-9.\n   * <p> Value meanings: </p>\n   * <ul>\n   * <li> 0 - disable payload compression (the default) </li>\n   * <li> 1 - lowest CPU impact </li>\n   * <li> 9 - highest compression </li>\n   * </ul>\n   * Values 1-9 are passed straight to zlib, 0 disables the payload compression feature on outgoing messages.\n   * No impact on payload-compressed incoming messages. \n   * <p>\n   * Default: 0\n   * </p>\n   * @default 0\n   */\n  get payloadCompressionLevel(){\n    return Check.nothing(this._payloadCompressionLevel)? 0 : this._payloadCompressionLevel;\n  }\n  set payloadCompressionLevel(newValue){\n    this._payloadCompressionLevel = newValue;\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n      'payloadCompressionLevel':          this.payloadCompressionLevel\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for pre-TLSv1.3 TLS connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using pre-TLSv1.3 TLS connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using TLS connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n    ['tlsv1.3']: 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\n// Works on an array, not an enum. Not very consistent, but it's what I need just now.\nfunction valIsMemberIgnoreCase(typeDesc, instance, key, arr, enumName, allowFalsy) {\n  const val = instance[key];\n  if (allowFalsy && !val ) return;\n  if (typeof (val) !== 'undefined' && !arr.some(v => v.toLowerCase() === val.toLowerCase())) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n    v('payloadCompressionLevel', [valNumber], [valRange, 0, 9]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('tlsMinProtocol', [valString], [valIsMemberIgnoreCase, SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS, \"SUPPORTED_SSL_PROTOCOLS\" , true]);\n      v('tlsMaxProtocol', [valString], [valIsMemberIgnoreCase, SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS, \"SUPPORTED_SSL_PROTOCOLS\" , true]);\n\n      if (props.tlsMinProtocol && props.tlsMaxProtocol) {\n        const minIndex = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS.indexOf(props.tlsMinProtocol.toLowerCase())\n        const maxIndex = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS.indexOf(props.tlsMaxProtocol.toLowerCase())\n        if (minIndex > maxIndex) {\n          throw new OperationError(`SessionProperties validation: Property 'tlsMinProtocol' ` +\n                                   `cannot be higher than 'tlsMaxProtocol'.`,\n                                   ErrorSubcode.PARAMETER_CONFLICT);\n        }\n      }\n\n      if (props.sslExcludedProtocols && (props.tlsMinProtocol || props.tlsMaxProtocol)) {\n        throw new OperationError(\"SessionProperties validation: Can't mix deprecated 'sslExcludedProtocols' \"+\n                                 \"with 'tlsMinProtocol' and 'tlsMaxProtocol'.\",\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n    this.pm_ts_transport_context = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { MessageOutcome } = require('solclient-message');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DUARBILITY_INT_TO_BOOL = {\n  1: true,  // durable\n  2: false, // non-durable guaranteed\n  3: false  // non-durable reliable\n}\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} Durability (durable vs non-durable), if present\n   */\n  getDurability() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_DURABLE, strToInt8, bUInt8);\n    if (param === 3) {\n      LOG_INFO(\"Non durable reliable queue. This does not happen often.\");\n    }\n    return DUARBILITY_INT_TO_BOOL[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated topic endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated queue name\n   */\n  getQueueNameBytes() {\n    return this._readParameter(SMFAdProtocolParam.QUEUENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The partitionGroupId, if present\n   */\n  getPartitionGroupId() {\n    return this._readParameter(SMFAdProtocolParam.PARTITION_GROUP_ID,\n                               strToInt16, bUInt16BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      (queueDescriptor.durable ? 1 : 2) // Durable vs Non-Durable-Guaranteed\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Creates a DELETE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request, ignoring durability\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getDelete(\n    queueDescriptor,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.DELETE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   *  @param {Long} [partitionGroupId=undefined] Partition Group ID for support of\n   *          Partition Queue feature, associate new flow with the same\n   *          PartitionGroupId as an old flow (e.g due to a reconnect).\n   * @param {Boolean} [hasNackSupport=false] If true, flow is created with Consumer Redelivery\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined,\n                                partitionGroupId = undefined,\n                                hasNackSupport = false) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    /**\n     * A Flow that has Browser support cannot have NACK support \n     */\n    if (hasNackSupport /* is true */) {\n      // [AssuredCtrl FlowType Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x3 // create flow with Consumer Redelivery support\n      ));\n    } else if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2 // create flow with browser support\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    // support for PartitionGroupId. Only send when not null and undefined\n    if (partitionGroupId !== undefined && partitionGroupId !== null) {\n      // [AssuredCtrl PartitionGroupId Parameter]    ***\n      LOG_TRACE(`Adding partitionGroupId to message: ${partitionGroupId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.PARTITION_GROUP_ID,\n        partitionGroupId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Map.<Array.<Array.<Long>>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `Map.set( MessageOutcome.ACCEPTED, [ [singleMessageId, singleMessageId] ] )`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && (applicationAckRanges.size > 0)) {\n      // aggregate the total length of the ack/nack ranges\n      let totalRangeLen  = 0;\n      const allOutcomes = MessageOutcome.values;\n      for(let i = 0; i < allOutcomes.length; i ++) {\n        totalRangeLen += applicationAckRanges.has(allOutcomes[i]) ? applicationAckRanges.get(allOutcomes[i]).length : 0;\n      }\n\n      if (totalRangeLen > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(5237);\n"],"names":["root","factory","exports","module","define","amd","this","ConsumerLib","PublisherLib","SMFLib","SolclientFactoryLib","TransportLib","assert","CapabilityType","Check","CorrelatedRequest","Destination","ErrorResponseSubcodeMapper","ErrorSubcode","OperationError","FsmEvent","State","StateMachine","Hex","LogFormatter","Message","MessageOutcome","MessageDeliveryModeType","P2PUtil","SessionEvent","SessionEventCode","SessionEventName","SessionFSMEvent","SessionRequestType","SessionStateName","SslDowngrade","StatType","StatsByMode","StringUtils","SubscriptionUpdateTimeoutMessages","Codec","SDTCodec","Convert","anythingToBuffer","formatHexString","stripNullTerminate","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","fflate","SessionFSM","constructor","sessionProperties","session","stats","hosts","super","name","fsm","logger","args","sessionIdHex","getCurrentStateName","LOG_TRACE","LOG_DEBUG","LOG_INFO","log","wrap","_sessionProperties","_session","_sessionStatistics","_hosts","_consumers","ConsumerFlows","_flowInterfaceFactory","flow","getCorrelationTag","bind","incStat","sendData","message","send","sendToTransport","sendControl","enqueueRequest","enqueueOutstandingCorrelatedReq","createDestinationFromDescriptor","createTemporaryDestination","isCapable","getCapability","updateQueueSubscription","canAck","_userBackpressured","clearCurrentError","initial","transitionTo","SessionDisconnected","context","getStateMachine","reset","unhandledEventReaction","sEvent","curState","getCurrentState","getName","CREATE_SUBSCRIBER","add","guaranteedFlowObject","DISPOSE","terminate","disposeInternal","FLOW_UP","SessionConnecting","CONNECTING","parentContext","handleTransportDestroyed","clearConnectTimer","_currentHost","getNextHost","transitionToExitPoint","connectWaitTimeInMsecs","_connectWaitTimer","setTimeout","processEvent","CONNECT_WAIT_TIMEOUT","WaitingForInterConnectTimeout","WaitingForTransport","entry","setConnectTimer","entryPoint","wasConnected","undefined","disconnected","_connectFailEvent","DISCONNECTED","_connectSuccessEvent","DestroyingTransport","DOWN_ERROR","RECONNECTED_NOTICE","_reconnectRetries","err","_currentError","eventText","responseCode","errorSubcode","eventReason","setPostEventAction","emitSessionEvent","build","RECONNECTING_NOTICE","CONNECT_FAILED_ERROR","UP_NOTICE","resolveHosts","setCurrentError","UNRESOLVED_HOSTS","EXCEPTION","DNS_RESOLUTION_COMPLETE","WaitingForDNS","reaction","DISCONNECT","transitionToEntryPoint","CONNECT_TIMEOUT","TIMEOUT","SEND_ERROR","sessionEvent","errEvent","TRANSPORT_DESTROYED","exit","clearTimeout","exitPoint","currentHostToString","CAN_ACCEPT_DATA","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","call","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","e","subcode","INTERNAL_ERROR","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","returnCode","_transport","connect","TransportReturnCode","OK","CONNECTION_ERROR","describe","sessionId","internalTransition","TRANSPORT_UP","sendClientCtrlLogin","WaitingForLogin","LOGIN_FAILURE","WAITING_FOR_LOGIN","setClientCtrlTimer","TRANSPORT_PROTOCOL_CLIENTCTRL","clientCtrlMsg","smfMsg","response","getResponse","respCode","_responseCode","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","Object","assign","COMPRESSED_TLS_NOT_SUPPORTED","NO_LOCAL_NOT_SUPPORTED","rawSubcode","getErrorSubcode","responseString","UNKNOWN_ERROR","DOWNGRADE_TIMEOUT","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","rc","updateTransportCompression","newTransport","TRANSPORT_CHANGE_DONE","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","SUBSCRIBE_TIMEOUT","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","TRANSPORT_PROTOCOL_SMP","smfRespHeader","smfHeader","subscriptionStr","encodedUtf8Subscription","pm_respcode","respText","pm_respstr","DestroyTransport","canConnectPublisher","_defaultPublisher","isBindWaiting","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","TRANSPORT_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","FLOW_FAILED","canConnectConsumer","flows","forEach","consumer","sendConsumerSessionUpEvent","reconnectingFlows","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","toString","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","CONNECT","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","MessageConsumerEventName","isGathering","adaptedListenForDestroy","installfn","downEvents","known","has","pending","onFlowDown","event","_removeListener","delete","checkPendingFlows","_disconnectSession","ex","_once","DOWN","size","proceed","FLOWS_DISCONNECTED","Set","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","TRANSPORT_FLUSHED","addToSubscriptionCache","destination","nothing","_subscriptionCache","key","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","correlationTag","_correlatedReqs","req","LOG_ERROR","timer","ConsumerFSMEvent","ConsumerFSMEventNames","keys","processFSMEvent","SESSION_DOWN","PublisherFSMEvent","PublisherFSMEventNames","_clientCtrlTimer","_connectTimer","_keepAliveTimer","clearInterval","resetKeepAliveCounter","noLocalSupported","noLocal","caps","getRouterCapabilities","NO_LOCAL","_compressedTLS","COMPRESSED_SSL","checkSessionDestinationCapability","error","getType","getSubscriptionInfo","isShare","isNoExport","SHARED_SUBSCRIPTIONS","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","_subscriptionCacheKeys","p2pTopic","getP2PTopicSubscription","p2pInboxBase","push","createMessagePublisher","publisherProperties","enabled","MessagePublisher","MessagePublisherEventName","publisher","properties","sessionInterfaceFactory","on","UP","description","REJECTED_MESSAGE","ctrlMessage","header","getADErrorSubcode","REJECTED_MESSAGE_ERROR","getCorrelationKey","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","data","messages","count","REPUBLISHING_UNACKED_MESSAGES","CAN_SEND","GUARANTEED_MESSAGING_DOWN","GUARANTEED_MESSAGE_PUBLISHER_DOWN","SESSION_UP","SESSION_UP_NO_AD","isAD","createMessageConsumer","MessageConsumer","consumerProperties","getProperties","topicEndpointSubscription","LOG_WARN","settlementOutcomes","requiredSettlementOutcomes","length","some","v","FAILED","REJECTED","AD_APP_ACK_FAILED","outcomeNotSupportedError","map","nameOf","join","INVALID_OPERATION","info","createQueueBrowser","MessageConsumerAcknowledgeMode","QueueBrowser","queueDescriptor","acknowledgeMode","CLIENT","browser","prototype","hasOwnProperty","connectTimeoutInMsecs","connectAttempts","windowSize","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","msg","destroy","_smfClient","_disposed","operations","resetStats","_kaStats","removeFromSubscriptionCache","dispose","disposeAll","operationKey","operation","sendEvent","reqTimeoutCb","reqTimeout","correlationKey","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","stack","callback","flush","nextCorrelationTag","currentState","getFinalState","DISPOSED","getStat","statType","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","flowId","getFlowId","pm_corrtag","updateRxStats","cancelledRequest","respRecvdCallback","RX_REPLY_MSG_DISCARD","msgType","SMFAdProtocolMessageType","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","getFlowById","disposed","handleUncorrelatedControlMessage","RX_DISCARD_NO_MATCHING_CONSUMER","handleADTrMessage","pm_ad_flowid","handleDataMessage","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","PROPERTY_UPDATE_ERROR","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","topicName","replace","handleSMFMessage","discardMessage","RX_DISCARD_SMF_UNKNOWN_ELEMENT","smf_protocol","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","PROTOCOL_ERROR","request","confirm","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_NOT_FOUND","handleSubscriptionTimeout","result","handleTransportEvent","transportEvent","infoStr","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","getSubcode","GuaranteedFlowControlledRelief","DATA_DECODE_ERROR","PARSE_FAILURE","TSESSION","messageType","value","host","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","clone","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","KEEP_ALIVE_FAILURE","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","payloadCompressionLevel","anything","_binaryAttachment","_structuredContainer","compressedAttachment","origSize","options","level","Z_FINISH","getSdtContainer","encodedContainer","encodeSingleElement","textEncoded","zlibSync","_setCompressedBinaryAttachment","getHttpContentEncoding","_compressedCE","deliveryMode","getDeliveryMode","DIRECT","_payload_is_memoized","_memoized_csumm","_memoized_payload","PERSISTENT","NON_PERSISTENT","reason","adLocallyDisabled","GM_UNAVAILABLE","_gmSendDisallowed","prepareAdMessageAndSend","_getCompressedBinaryAttachment","NO_SPACE","INSUFFICIENT_SPACE","SolclientFactory","createTopicDestination","shift","requestConfirmation","topicDestination","sendSubscribe","topic","sub","_eventCode","keepAliveIntervalInMsecs","setInterval","statTarget","forceAllowEnqueue","content","Encode","encodeCompoundMessage","updateTxStats","compressionLevel","match","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","rxMsgObj","requestTimeout","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","newValue","getUpdate","provisionEndpoint","queueDescriptior","queueProperties","AdProtocolMessage","getCreate","deprovisionEndpoint","getDelete","transportDowngradeTimeoutInMsecs","source","target","subscriptionUpdate","subject","requestType","force","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","queue","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","messageLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","getReplyTo","TX_REQUEST_SENT","isRedelivered","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","props","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","getP2PInboxTopic","updateCapabilities","gmCap","_getCapability","GUARANTEED_MESSAGE_PUBLISH","oldName","newName","onVRNChanged","VIRTUALROUTER_NAME_CHANGED","severTls","startCompression","Flow","PrivateFlowEventName","MessagePublisherProperties","PublisherFSM","direct","emits","values","_fsm","_makeFSM","formatter","_bindWaiting","BIND_WAITING","_onBindWaiting","_onBindFailed","_onDown","_onUp","sessionInterface","_sessionInterface","_properties","_flowId","_flowName","publisherId","_publisherId","start","FLOW_CLOSE","getDisposedEvent","handleAck","id","ACK","ack","handleNack","nack","getLastMsgIdAcked","FLOW_UNBOUND","dataMsg","util_inspect","_disposeFSM","_isDisconnected","isDisconnected","Enum","WebTransportState","new","DOWNGRADING","DESTROYING","UUID","generateUUID","d","Date","getTime","c","r","Math","random","floor","WINDOWS_VERSION_MAP","window","g","BROWSER_PROCESS","process","product","platform","agent","navigator","safeEncode","str","userAgent","browserAgentInfo","agentStr","agentInfo","version","os","arch","agentHas","strs","indexOf","firstValue","vals","filter","Boolean","rule","test","exec","split","slice","parseInt","versionTest","versionPart","k","versionMatch","getBrowserAgentInfo","Process","Iterator","arr","end","_arr","_index","_end","deref","incr","makeIterator","REMOVE_P2PINBOX","MessageConsumerEvent","MessageConsumerProperties","QueueBrowserEventName","QueueBrowserProperties","CacheRequestResult","_returnCode","_subcode","_topic","_error","getReturnCode","getReturnSubcode","getTopic","getError","Debug","read","buffer","offset","isLE","mLen","nBytes","m","eLen","eMax","eBias","nBits","i","s","NaN","Infinity","pow","write","rt","abs","isNaN","LN2","HTTPLib","WebSocketTransportSession","HTTPConnection","WebTransportCapabilities","webSocket","browserSupportsBinaryWebSockets","xhrBinary","browserSupportsXhrBinary","streaming","browserSupportsStreamingResponse","EncodeSingleElementLib","UtilLib","EncodeHeader","SDTDataTypes","SDTMapContainer","encodeHeader","EncodeMap","encodeMap","sdtmap","buf","getKeys","sdtfield","strKeyField","strKeyName","getField","nullTerminate","String","EncodeSingleElement","encodeSingleElementToBuf","StringBuffer","LUT_PRINTABLE","tmp","fromCharCode","padLeftRight","minLen","padSide","padChar","append","charAt","leastSpaces","line","spaces","capitalizeWord","toUpperCase","substr","isEmptyFun","isEmpty","notEmpty","toSafeChars","padLeft","padRight","Error","charCodeAt","hexdump","output","printable","spacer","pos","linelen","sLength","ccode","clear","heredoc","literals","substitutions","subst","lines","reduce","substring","C_2_32","leftPad","len","repeat","GlobalContext","sessionCounter","idCounter","RandId","toFixed","NextSessionCounter","NextId","GenerateClientName","GenerateUserIdentification","GenerateClientDescription","TransportBase","url","eventCB","client","transportProps","_url","_ssl","useSsl","_client","_eventCB","_props","immediate","forceFailure","getTransportProtocol","transportProtocol","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","PARAMETER_OUT_OF_RANGE","MessageLib","BidiMap","PriorityUserCosMap","MessageUserCosType","COS1","COS2","COS3","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","CacheReturnCode","FAIL","INCOMPLETE","APIPropertiesValidators","MessagePublisherAcknowledgeMode","validateInstance","valBoolean","valIsMember","valNumber","valRange","MessagePublisherPropertiesValidator","validate","instance","Number","MAX_VALUE","DestinationLib","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","SDTFieldType","baseTypes","BOOL","UINT8","INT8","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","STRING","BYTEARRAY","FLOATTYPE","DOUBLETYPE","failInvalidParameter","valueType","PARAMETER_INVALID_TYPE","validateSdtField","type","MAP","instanceOf","STREAM","SDTStreamContainer","DESTINATION","ACCEPTED","defineProperty","ch2","node_worker_1","transfer","cb","w","Worker","URL","createObjectURL","Blob","onmessage","ed","$e$","postMessage","u8","Uint8Array","u16","Uint16Array","i32","Int32Array","fleb","fdeb","clim","freb","eb","b","j","_a","fl","revfl","_b","fd","revfd","rev","x","hMap","cd","mb","l","co","le","rvb","sv","r_1","flt","fdt","flm","flrm","fdm","fdrm","max","a","bits","p","o","bits16","shft","slc","subarray","FlateErrorCode","UnexpectedEOF","InvalidBlockType","InvalidLengthLiteral","InvalidDistance","StreamFinished","NoStreamHandler","InvalidHeader","NoCallback","InvalidUTF8","ExtraFieldTooLong","InvalidDate","FilenameTooLong","StreamFinishing","InvalidZipData","UnknownCompressionMethod","ec","ind","nt","code","captureStackTrace","inflt","dat","st","dict","sl","dl","f","noBuf","resize","noSt","cbuf","bl","nbuf","set","final","bt","lm","dm","lbt","dbt","n","tbts","t","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","lt","dt","lms","dms","lpos","sym","dsym","dend","min","wbits","wbits16","hTree","t2","et","sort","i0","i1","i2","maxSym","tr","mbt","ln","lft","cst","i2_1","i2_2","i2_3","lc","cl","cli","cln","cls","clen","cf","wfblk","out","wblk","syms","lf","df","li","bs","dlt","mlb","ddt","mdb","_c","lclt","nlc","_d","lcdt","ndc","lcfreq","_e","lct","mlcb","nlcc","ll","flen","ftlen","dtlen","llm","lcts","it","clct","dst","deo","dflt","lvl","plvl","pre","post","z","ceil","lst","opt","msk_1","prev","head","h","bs1_1","bs2_1","hsh","lc_1","wi","hv","imod","pimod","rem","ch_1","dif","maxn","maxd","ml","nl","mmd","md","ti","lin","din","crct","crc","cr","adler","dopt","dictionary","newDat","mem","mrg","wcln","fn","fnStr","td","ks","lastIndexOf","st_1","spInd","ch","wrkr","fns","init","td_1","cbfs","bInflt","inflateSync","pbf","gopt","bDflt","deflateSync","gze","gzh","gzhl","wbytes","guze","gzs","gzl","zle","zlh","zule","zls","cbify","opts","consume","astrm","strm","ondata","ev","astrmify","ext","Array","isArray","b2","b4","b8","filename","mtime","now","flg","zs","lv","StrmOpt","Deflate","chunk","endLen","newBuf","AsyncDeflate","deflate","Inflate","bts","AsyncInflate","inflate","Gzip","raw","Compress","AsyncGzip","gzip","gzipSync","AsyncCompress","compress","compressSync","Gunzip","onmember","AsyncGunzip","_this_1","gunzip","gunzipSync","Zlib","AsyncZlib","zlib","Unzlib","AsyncUnzlib","unzlib","unzlibSync","Decompress","G","I","Z","_this_2","apply","arguments","AsyncDecompress","decompress","decompressSync","fltn","val","op","te","TextEncoder","TextDecoder","tds","decode","stream","dutf8","DecodeUTF8","EncodeUTF8","strToU8","latin1","ar_1","encode","ar","ai","strFromU8","dbf","slzh","zh","fnl","es","z64e","sc","su","off","exfl","wzh","u","ce","extra","col","exl","flag","compression","y","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","attrs","exf","wzf","ZipPassThrough","ZipDeflate","AsyncZipDeflate","Zip","file","fl_1","com","comment","hl_1","chks_1","pAll_1","_i","chks_2","chk","tr_1","ind_1","uf_1","nxt","cl_1","dd","splice","zip","tot","slft","files","term","tAll","cbd","mt","cbf","oe","cdl","badd","loc","_loop_1","ms","cbl","zipSync","UnzipPassThrough","UnzipInflate","AsyncUnzipInflate","_","sz","Unzip","onfile","toAdd","is","oc","_loop_2","sig","this_1","bf","cmp_1","chks_3","unshift","d_1","sc_1","su_1","fn_1","file_1","ctr","chks_4","originalSize","register","decoder","queueMicrotask","unzip","ze","fltr","_loop_3","c_1","no","infl","unzipSync","c_2","LogLevel","state","impl","INFO","LogBinding","GlobalBinding","ReplayStartLocation","ReplayStartType","ReplayStartLocationBeginning","_type","BEGINNING","DestinationType","SubscriptionInfo","ucs2ToUtf8","utf8ToUcs2","ProfileBinding","DESTINATION_PREFIX_FROM_TYPE","QUEUE","TEMPORARY_QUEUE","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","bytes","exceptionCreator","nameLength","bytesLength","isWildcarded","encodeBytes","topicUtf8Encode","prefix","networkName","DestinationUtil","createTemporaryName","vrid","TOPIC","decodeBytes","validateAndEncode","constError","subscriptionInfo","prefixType","startsWith","errorConst","subInfo","subInfoConst","parseFromName","QueueAccessType","QueueDiscardBehavior","QueuePermissions","QueuePropertiesValidator","permissions","accessType","quotaMB","maxMessageSize","respectsTTL","discardBehavior","maxMessageRedelivery","FactoryProfile","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","legacyInstance","v10Instance","forwardInstance","SolclientFactoryProfiles","_legacy","_v10","_forward","_default","version7","version10","version10_5","Lazy","Bits","ContentSummaryElement","ContentSummaryType","SMFUH","lazyValue","int8ToStr","int16ToStr","int24ToStr","int32ToStr","delModeEnumBidiMap","el","lutDelModeToEnum","forward","lutEnumToDelMode","reverse","uhTypeMap","paramTypeCount","uh","byte1","lenMap","fill","idx","lightMap","lenCount","ContentSummaryDecodeMap","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","ParamParse","FIVE","SIX","dataBuf","readUInt8","paramLen","readInt32BE","delmode","lookup","get","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","readUInt16BE","readUIntBE","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","firstByte","paramtype","forcedLengthMode","lengthModeMap","lengthMode","lengthString","FORCED_LENGTH_MODE","byte2","SDTDestType","SDTField","SDTUnsupportedValueError","SDTValueErrorSubcode","Parameter","BinaryMetaBlock","payload","asEncodedSmf","smf","fromEncodedSmf","bufSmf","chunkCount","fourbyte","payloadLen","payloadOffset","Mixin","targetProto","addProto","getOwnPropertyNames","getOwnPropertyDescriptor","APIProperties","getDefaultLogLevel","SolclientFactoryProperties","logLevel","profile","_profile","number","_logLevel","_logger","ProvisionEvent","sessionEventCode","_queueDescriptor","_queueProperties","spec","details","ArrayUtils","parseURL","TimingBucket","Version","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","getDefaults","acknowledgeTimeoutInMsecs","PER_MESSAGE","connectRetryCount","_enabled","defined","_windowSize","_acknowledgeTimeoutInMsecs","_acknowledgeMode","_connectRetryCount","_connectTimeoutInMsecs","FATAL","ERROR","WARN","DEBUG","TRACE","ESKit","Factory","FSM","Log","MessageTracing","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","fields","getExtraStringInfo","SMFParameter","begin","_value","_uh","_buffer","_begin","getValue","getUh","getBuffer","getBegin","getEnd","Long","DEFAULTS","_lastAcked","fromNumber","_lastSent","_next","longToString","MessageIds","lastAcked","fromValue","lastSent","setLastSent","next","HTTPTransportSession","TransportProtocol","TransportProtocolHandler","WebTransportEvent","WebTransportFSM","WebTransport","getId","webTransportProtocolList","_transportHandler","_webTransportFsm","notifyEvent","handleDestroyed","_transportSession","wEvent","_transportEvent","DOWNGRADE_FAILED","_lastDowngradeSucceeded","DOWNGRADE_SUCCEEDED","connectInternal","tpProtocol","HTTP_BASE64","HTTP_BINARY","HTTP_BINARY_STREAMING","evt","WS_BINARY","DESTROY","_destroyMsg","errorMsg","_socket","_sender","canCompleteDowngrade","destroyInternal","completeDowngrade","getConnError","_connError","DOWNGRADE","_downgradeMsg","DebugLib","SolclientDestinationLib","SolclientMessageLib","Baggage","TraceContextSetter","SolclientSDTLib","stringToUint8Array","parseAdpAt","parseCCAt","ParseSMF","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","MessageType","TEXT","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","parseSingleElement","sdtstream","getNext","preambleByte0","_setPayloadCompressed","_messageType","BINARY","preambleByte1","setAsReplyMessage","sdtMap","setUserPropertyMap","headerMap","ci","mi","si","sn","ts","ct","bag","ctx","setCorrelationId","setApplicationMessageId","setApplicationMessageType","setReplyTo","setSenderId","setSequenceNumber","getValueNoThrow","setSenderTimestamp","setGMExpiration","setHttpContentEncoding","setHttpContentType","_baggageObj","setBaggage","_setBaggage","_traceContextSetter","fromTraceContext","_setCreationContext","Decode","decodeCompoundMessage","payloadPosition","headerLength","payloadLength","_smfHeader","_setDeliverToOne","smf_dto","_setDeliveryMode","_setDestination","DestinationFromNetwork","createDestinationFromBytes","_setDiscardIndication","_setElidingEligible","smf_elidingEligible","_setDMQEligible","smf_deadMessageQueueEligible","_setUserCos","smf_priority","_setPriority","pm_msg_priority","pm_userdata","_setUserData","setRedelivered","pm_ad_redelflag","pm_ad_flowredelflag","setFlowId","setGuaranteedMessageId","pm_ad_msgid","setGuaranteedPreviousMessageId","pm_ad_prevmsgid","setPublisherId","pm_ad_publisherid","setPublisherMessageId","pm_ad_publishermsgid","setTopicSequenceNumber","pm_ad_topicSequenceNumber","setDeliveryCount","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","_setSpoolerUniqueId","pm_ad_replication_mate_ack_message_id","_setSpoolerMessageId","pm_ad_local_spooler_message_id","isLong","pm_ad_ttl","setTimeToLive","toNumber","pm_ts_transport_context","_setTransportContext","cs","pm_content_summary","currentChunk","chunkBegin","position","chunkEnd","_setBinaryAttachment","binaryMetadataChunk","_setXmlMetadata","_setXmlContentInternal","_getPayloadCompressed","endsWith","inflatedAttachment","trim","_httpContentEncoding","newCE","trimRight","adaptSmfToMessage","formatDumpBytes","SMFSMPMessageTypeFlags","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_TOPIC","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_DELIVERALWAYS","setBits","encAdp0Param","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","int64ToStr","RSValueLenMap","encAdpReplayParam","valType","valObj","DATE","RGMID","suid","messageId","encAdp64AckPairParam","outcome","paramLength","encAdpUTF8NTParam","onebyte","adpVersion","twobyte","readUInt32BE","adpMsg","paramUH","paramType","paramValueLen","smfParam","addParameter","encAdp","paramspace","paramarray","getParameterArray","param","SMFAdProtocolParam","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","EP_BEHAVIOUR","PARTITION_GROUP_ID","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","settlementRanges","range","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","SELECTOR","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","CUT_THROUGH","APPLICATION_PUB_ACK","paramdata","threebytes","padBytes","twobytes","TransportAckResult","DUPLICATE","OUT_OF_ORDER","TransportAcks","base","_acksPending","ZERO","tryReceive","messageID","prevMessageID","_lastReceived","gte","setAcked","acksPending","lastReceived","DestinationUtilLib","Queue","getOffset","_offset","createFromLocalName","queueName","encoding","isValidated","StateLib","FsmObject","StateContext","logPadding","ancestorList","func","initialReaction","action","ReactionResult","caller","destState","getAncestorList","onInitial","external","processReactionResult","curContext","destStateIter","lowestCommonAncestor","onExit","getParent","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","TransportClientStats","TransportSessionState","WebTransportSessionBase","_connectTimeout","_clientstats","_sendBufferMaxSize","sendBufferMaxSize","_maxPayloadBytes","maxWebPayload","_queuedData","_queuedDataSize","_canSendNeeded","_state","createConnectTimeout","connectTimerExpiry","cancelConnectTimeout","allowEnqueue","datalen","enqueueFailNoSpace","getQueuedDataToSend","bytesAllowed","getBufferedAmount","_bufferedAmountQueryIntervalInMsecs","_bufferedAmountQueryIntervalDelayMultiplier","payloadSize","elem","elemLength","TSHState","StateWebSocketBinary","exitCb","nextState","validateLegal","NO_OBJ","subcodeSummary","expected","got","expectedStr","gotStr","toLowerCase","check","validatorArgs","validateError","typename","boolean","orNothing","memberOfEnum","names","member","function","orNull","orUndefined","memberOf","object","objectValues","operator","operand","rangeCompare","string","equal","Topic","createDestinationFromName","networkTopicName","networkTopicBytes","QUEUE_PREFIX","SMFTransportSessionMessageType","CREATE","CREATE_RESP","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","SessionOperation","CTRL","SEND","QUERY_OPERATION","SESSION_DISCONNECT","FLOW_ACTIVE_IND","FLOW_OPEN","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","TRANSPORT_ERROR","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","LogImpl","trace","debug","warn","fatal","TX_REQUEST_TIMEOUT","RX_DIRECT_BYTES","RX_DIRECT_MSGS","RX_REPLY_MSG_RECVED","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","RX_CACHE_MSG","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","TX_PERSISTENT_BYTES_REDELIVERED","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_ACKS_RXED","TX_WINDOW_CLOSE","TX_ACK_TIMEOUT","RX_PERSISTENT_BYTES","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_BYTES","RX_NONPERSISTENT_MSGS","RX_ACKED","RX_DISCARD_DUPLICATE","RX_DISCARD_OUT_OF_ORDER","RX_SETTLE_REJECTED","RX_SETTLE_FAILED","RX_SETTLE_ACCEPTED","EXCLUSIVE","NONEXCLUSIVE","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","MessageCacheStatus","MessageDumpFlag","MessageDumpUtil","RgmidFactory","MessageTracingSupport","TraceContext","isBoolean","isEnumMember","isInstanceOf","isInstanceOfOrNothing","isNumberOrNothing","isStringOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","LIVE","_spoolerUniqueId","_priority","_deliveryCount","_creationContext","_transportContext","_baggage","_applicationMessageId","getApplicationMessageId","_applicationMessageType","getApplicationMessageType","getBinaryAttachment","setBinaryAttachment","getCacheRequestId","_cacheRequestId","_setCacheRequestID","cacheRequestID","getCorrelationId","_correlationId","_correlationKey","setCorrelationKey","isDeliverToOne","_deliverToOne","setDeliverToOne","setDeliveryMode","getDestination","_destination","setDestination","isDiscardIndication","_discardIndication","setDiscardIndication","isElidingEligible","_elidingEligible","setElidingEligible","getHttpContentType","_httpContentType","getPublisherId","getPublisherMessageId","_publisherMsgId","getTimeToLive","_timeToLive","getGMExpiration","_expiration","isDMQEligible","_dmqEligible","setDMQEligible","getGuaranteedPreviousMessageId","_guaranteedPrevMsgId","_getSpoolerUniqueId","INVALID_SUID","getMessageConsumer","_consumer","setMessageConsumer","getGuaranteedMessageId","_guaranteedMsgId","_spoolerMessageId","getReplicationGroupMessageId","eq","smid","from","msgid","getTopicSequenceNumber","_topicSequenceNumber","topicSeqNo","getDeliveryCount","deliveryCount","settle","messageSettlementOutcome","_acked","MESSAGE_ALREADY_ACKNOWLEDGED","MESSAGE_DELIVERY_MODE_MISMATCH","SESSION_NOT_CONNECTED","hasAutoAckSupport","settlementOutcome","doesConsumerSupportOutcome","applicationSettle","isSettled","_validateBeforeAcknowledge","acknowledge","applicationAck","_autoAcknowledge","isAcknowledged","isAcknowledgeImmediately","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","getCacheStatus","_setCacheStatus","cacheStatus","isReplyMessage","_replyMessage","_redelivered","getReceiverTimestamp","_receiverTimestamp","_replyTo","getSenderId","_senderId","getSenderTimestamp","_senderTimestamp","getSequenceNumber","_sequenceNumberError","_sequenceNumber","_autoSequenceNumber","getUserCos","getPriority","setUserCos","setPriority","getUserData","_userData","setUserData","getXmlContent","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","unescape","encodeURIComponent","setXmlMetadata","_xmlMetadata","getXmlMetadata","_binaryMetaChunk","meta","hasAutoSequenceNumber","hasAutoSenderTimestamp","_autoSenderTimestamp","getUserPropertyMap","_userPropertyMap","setSdtContainer","container","structuredContainer","binaryAttachment","binaryAttachmentLength","_compressedBinaryAttachment","_payloadCompressed","getTraceContextSetter","getCreationContext","getTransportContext","setTransportContext","contextSetter","getBaggage","dump","flags","MSGDUMP_FULL","validFlags","clearExtendedVarLenParams","SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY","ParseSingleElementLib","ParseFieldHeader","ParseMap","mapObj","keyFieldHeader","parseFieldHeader","create","keyString","valueFieldHeader","valueField","ParseSingleElement","addField","DEFAULT_PROPERTY_OPTIONS","enumerable","setPropertyValue","lazyProperty","evalFn","configurable","lazyProperties","obj","SolaceError","sourceData","inspect","getSourceData","seen","stylize","stylizeNoColor","depth","colors","showHidden","origin","isObject","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","arg","style","styles","isFunction","isString","isNull","hasOwn","prop","isRegExp","re","objectToString","isError","isDate","formatError","recurseTimes","ret","primitive","simple","JSON","stringify","formatPrimitive","visibleKeys","array","hash","arrayToHash","RegExp","braces","toUTCString","formatProperty","formatArray","pop","cur","reduceToSingleString","desc","tag","valueLen","byte0","strSdtLen","Map","Stream","MessageRxCBInfo","messageRxCBFunction","userObject","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","FlowOperation","START","STOP","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","GUARANTEED_MESSAGE_CONSUME","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","MAX_GUARANTEED_MSG_SIZE","ACTIVE_CONSUMER_INDICATION","COMPRESSION","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","MESSAGE_REPLAY","BR_REPLAY_ERRORID","VAR_LEN_EXT_PARAM","ClientCapabilityType","UNBIND_ACK","BR_ERRORID","PQ","ParseDestination","ParseFloat","ParseInteger","ParseStream","parseFloatField","parseIntegerField","parseMapAt","parseStreamAt","parseDestination","fieldHeader","elemValLen","Null","NULLTYPE","Integer","UnsignedInteger","Float","Char","ByteArray","SMFMessage","SMF_MESSAGE","UNKNOWN","StringToBuffer","stringToBuffer","makeMap","keyValuePairs","QueueLib","AUTO","activeIndicationEnabled","_browser","replayStartLocation","reconnectAttempts","reconnectIntervalInMsecs","createIfMissing","something","AbstractQueueDescriptor","QueueDescriptor","QueueProperties","_bindTimeoutInMsecs","_connectAttempts","_topicEndpointSubscription","createFromName","_requiredSettlementOutcomes","_transportAcknowledgeTimeoutInMsecs","acknowledgeThreshold","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","_noLocal","_replayStartLocation","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","SolclientSession","PublisherStateNames","flowIdDec","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emit","TRANSPORT_FULL","UNBOUND","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","OPENPUBFLOW","respStr","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","_messageIds","_unackedList","_connectReason","_renumber","payloadSizeLimit","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","externalTransitionTo","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","PublisherCloseFlowSent","PublisherUp","pEvent","UNKNOWN_FLOW_NAME","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","RESEND_COMPLETE","getActiveState","TX_WINDOW_CLOSED","unackedList","dupMsg","adaptMessageToSmf_payloadMemoize","MESSAGE_TOO_LARGE","_cloneNumbers","msgId","_startAckTimer","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","current","fromMsg","toMsg","_setPostEventAction","_postEventAction","streamObj","EventEmitter","formatEventName","eventName","messageConsumer","MESSAGE","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","GM_DISABLED","_onConsumerGMDisabled","disconnect","stop","removeMessageFromQueue","Stats","parent","_parent","_statsMap","TransportError","CacheCBInfo","CacheContext","CacheLiveDataAction","CacheRequest","CacheReturnSubcode","CacheSession","CacheSessionProperties","CACHE_REQUEST_PREFIX","ConsoleLogImpl","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","addGlobalFuncs","newLevel","addInitializer","Binding","_formatter","self","genericFunction","targetSelf","TransportSessionEvent","strToByteArray","strToHexArray","BufferImpl","baseUrl","_haveToken","_confMaxWebPayload","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_sid","_transportProtocol","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_incomingBuffer","_packetReadState","transportContentType","_contentType","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","INVALID_STATE_FOR_OPERATION","_createConn","handleCreateResponse","handleCreateConnFailure","createMsg","WAITING_FOR_CREATE","connError","CONNECTION_FAILED","WAITING_FOR_DESTROY","abort","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","dataIn","enqueueData","remainder","transportPacketLen","_smfDataTSHeaderParts","dataLen","initPreformattedHeaders","_flushCallback","sendQueuedData","tsRc","parsedResponse","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","rxDataBuffer","recStat","rxDataString","handleRxError","isSMFHeaderAvailable","isSMFHeaderValid","errorInfo","status","asyncSendEvent","finalize","nameChecks","EndpointNameComplaint","EMPTY_STRING","LT","GT","ASTERISK","QUESTION_MARK","AMPERSAND","SEMICOLON","LEADING_SLASH","TRAILING_SLASH","DOUBLE_SLASH","TOO_LONG","NO_ISSUE","explainInvalidEndpointName","isTE","triplet","flatten","concat","BaseChecks","instanceOfAny","types","empty","truthy","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","epsilon","included","includes","none","cacheRequestCorrelationId","BaseMessage","SMFHeader","SMFSMPMessageType","encodedUtf8QueueName","smpFlags","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","requestConfirm","smp","ADDSUBSCRIPTION","REMSUBSCRIPTION","getBytes","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","SMF_SMP_FLAG_PERSIST","Timer","cancel","newInterval","interval","onInterval","timerRef","newTimeout","timeout","onExpire","XHRFactory","allowFail","xhr","XMLHttpRequest","CREATE_XHR_FAILED","SessionState","CONNECTED","SESSION_ERROR","smf_uh","messageConsumerEventName","_messageConsumerEventName","_infoStr","_errorSubcode","_reason","requestEventCode","VALUE_OUTSIDE_SUPPORTED_RANGE","readFloatBE","readDoubleBE","AuthenticationScheme","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","CodecLib","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","ConsumerStateNames","UNBOUND_AWAIT_SESSION_UP","UNBOUND_AWAIT_FLOWOPEN","UNBOUND_AWAIT_ANY","BIND_SENT","FLOW_UP_XFER","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","RECONNECTING","RECONNECTING_BIND_SENT","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_AWAIT_TIMER","CREATE_SENT","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","eventQueue","finalState","handleUncaughtException","exc","processingEvents","_onEventCompletion","handleEvent","terminateFsm","postEventAction","activeStates","isStateActive","handleUnhandledEvent","uncaughtExceptionReaction","exitCallback","_exitCallback","_nextState","_unsupportedRuntimeMessage","getNextState","setNextState","getUseSsl","onEnter","MessageDumpUtilLib","MessageDumpStandardProvider","fpDestination","dest","fpSenderId","fpAppmsgType","fpAppMsgId","fpSequenceNumber","sequenceNum","fpTopicSequenceNumber","fpCorrelationId","fpHttpContentType","fpHttpContentEncoding","fpSendTimestamp","timestamp","formatDate","fpRcvTimestamp","fpClassOfService","fpDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","fpTimeToLive","timeToLive","mdu","fpExpiration","fpMessageDMQEligible","fpMessageRedelivered","fpMessageDeliveryCount","fpDiscardIndication","fpAckImmediately","fpElidingEligible","fpReplyMessage","fpReplyTo","replyTo","fpDeliverToOne","fpCacheMessage","fpCacheRequestId","cacheRequestId","fpUserPropertyMap","propMap","detailValue","printMap","fpCorrelationTag","strValue","fpUserData","fpXmlMetadata","xmlMetadata","fpTracingCreationContext","isPresent","getTraceId","getSpanId","fpTracingTransportContext","fpTracingBaggage","fpSdtStream","sdtFieldValue","countItems","printStream","fpSdtMap","fpBinaryAttachment","att","fpXmlContent","xml","DISCONNECT_FAILED_ERROR","EncodeInteger","EncodeStream","IEEE754LIB","int48ToStr","encodeStream","C_2_48","fieldVal","toIEEE754Single","toIEEE754Double","hdr","MSGDUMP_BRIEF","_instanceof","nativeMap","nativeSet","nativePromise","Promise","allParents","allChildren","useBuffer","Buffer","_clone","child","proto","resolve","reject","then","__isArray","__isRegExp","__getRegExpFlags","lastIndex","__isDate","isBuffer","allocUnsafe","copy","getPrototypeOf","index","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","descriptor","allPropertyNames","propertyName","__objToStr","regExpOptions","global","ignoreCase","multiline","clonePrototype","emptyCloneFunc","StateBinary","FULFILL","FLOW_THRU","buckets","bucketCount","normalized","cont","Resolver","compoundKey","rawPath","path","pathArr","commonSource","keySource","traversePath","toIEEE754","vIn","ebits","fbits","bias","fromIEEE754","byteI","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","hasNext","TcpRawTransport","CompressedTransport","TlsOnlyTransport","TcpTlsTransport","compressingLayer","plaintextTransport","setClientStats","setUnderlyingTransport","tlsLayer","uncompressedTransport","rehome","encryptedTransport","precallback","tlsShutdown","Base64","base64Encode","uint8ArrayToString","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","encodedSdtPayload","getEncodedTraceContext","sdtPreamble","sdtStreamContainer","adaptMessageToBinaryMeta","binaryMetaSMF","MAX_24BITS","maskValues","bitRange","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_ttl","params","TR_TOPICNAME","pm_queue_len","LIGHT_QUEUE_NAME_OFFSET","pm_queue_offset","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","pm_ad_ackimm","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","TS_TRANSPORT_CONTEXT","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","smfHeaderIn","payloadBytes","adaptMessageToSmf_payloadFinalize","pm_ad_publishermsgId","userData","adaptMessageToSmf_nonPayload","setPayloadSize","binding","hostListDNSFilter","urls","address","resolved","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","wasm","WebAssembly","Instance","Module","low","high","unsigned","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","mul","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","res","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","MutableSessionProperty","SessionEventCBInfo","SessionProperties","createSession","createFactory","messageCallbackInfo","eventCallbackInfo","ExitPoint","outerState","exitPointName","innerState","getDestState","typeDesc","validator","valInstance","typeInstance","typeInstanceDesc","valNotEmpty","valLength","valString","enumInstance","enumName","allowNull","valStringOrArray","valArrayIsMember","allowUndefined","allowEmpty","allowDuplicate","ele","valArrayOfString","valTopicString","typedesc","valTopicStringOrEmpty","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","TRANSPORT_PRIORITY","LINGER_OPTION","GRANTED_PERMISSIONS","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ENDPOINT_ID","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","StateBase64","NO_ERROR","INVALID_SESSION_OPERATION","MESSAGE_VPN_NOT_ALLOWED","MESSAGE_VPN_UNAVAILABLE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","CLIENT_NAME_ALREADY_IN_USE","CLIENT_NAME_INVALID","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","SUBSCRIPTION_ACL_DENIED","PUBLISH_ACL_DENIED","PARAMETER_CONFLICT","OUT_OF_RESOURCES","COMMUNICATION_ERROR","TOPIC_MISSING","XML_PARSE_ERROR","SUBSCRIPTION_INVALID","SUBSCRIPTION_ERROR_OTHER","SUBSCRIPTION_TOO_MANY","SUBSCRIPTION_ATTRIBUTES_CONFLICT","DATA_ERROR_OTHER","INACTIVITY_TIMEOUT","UNKNOWN_TRANSPORT_SESSION_ID","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","REPLICATION_IS_STANDBY","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","ALREADY_BOUND","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","UNKNOWN_QUEUE_NAME","UNKNOWN_TOPIC_ENDPOINT_NAME","MAX_CLIENTS_FOR_QUEUE","MAX_CLIENTS_FOR_TE","UNEXPECTED_UNBIND","QUEUE_NOT_FOUND","SPOOL_OVER_QUOTA","QUEUE_SHUTDOWN","TOPIC_ENDPOINT_SHUTDOWN","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","ENDPOINT_ALREADY_EXISTS","PERMISSION_NOT_ALLOWED","INVALID_SELECTOR","MAX_MESSAGE_USAGE_EXCEEDED","ENDPOINT_PROPERTY_MISMATCH","NO_SUBSCRIPTION_MATCH","SUBSCRIPTION_DOES_NOT_MATCH","SELECTOR_DOES_NOT_MATCH","INVALID_DTE_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","CALLBACK_ERROR","NOLOCAL_DISCARD","GM_NOT_READY","LOW_PRIORITY_MSG_CONGESTION","QUOTA_OUT_OF_RANGE","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","REPLAY_NOT_SUPPORTED","REPLAY_DISABLED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_START_TIME_NOT_AVAILABLE","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","MISMATCHED_ENDPOINT_ERROR_ID","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_STARTED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","REPLAY_START_MESSAGE_NOT_AVAILABLE","MESSAGE_ID_NOT_COMPARABLE","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED","PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED","SYNC_REPLICATION_INELIGIBLE","INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY","INVALID_QUEUE_NAME","INVALID_TE_NAME","MESSAGE_SIZE_OUT_OF_RANGE","UNSUPPORTED_PERMISSIONS","MAX_ENDPOINTS_EXCEEDED","ASSURED_DELIVERY_NOT_READY","COPY_FROM_QUEUE_TEMPLATE_MISSING","COPY_FROM_TE_TEMPLATE_MISSING","_name","_bytes","_isValidated","_isWildcarded","_subscriptionInfo","valueOf","WebSocketCloseCodes","WebTransportsLib","lutTransportProtocols","StateStreamingAndBinary","useSSL","transport","downgradeTransport","TransportConstructor","switchState","newState","sessionEventCBFunction","SC","ROOT_MAPPING","AD_MAPPING","getSubcodeMappingInner","respErrorCode","codeMap","searchKey","foundKey","find","mapKey","getSubcodeMapping","ReplayStartLocationDate","_replayStartValue","createReplayStartLocationDate","dateTime","pairs","setValues","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","NOEXPORT_PREFIX","shareGroup","groupIndex","SHARE_PREFIX","LEVEL_DELIMETER_LEN","LEVEL_DELIMETER","dispatchTopicIndex","parse","layers","parseLayers","constOffset","constResult","subscriptionStringParse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","factoryState","initializeCount","initializers","factoryProps","initializer","_getInitializeCount","profiles","destType","destBytes","SDTFieldLib","_stream","_writable","_readPt","rewind","typeOrField","NotImplementedError","hexStringToUint8Array","traceContextSetter","_traceId","traceId","_spanId","spanId","_isSampled","isSampled","_traceState","traceState","_version","toClone","newContextSetter","_setSpanId","_setTraceId","_setSampled","getIsSampled","_setTraceState","getTraceState","_setVersion","getVersion","MAX_TRACE_STATE_LENGTH","getTruncatedTraceState","_standardTraceStateTruncation","traceStateLength","contentBuffer","ArrayBuffer","offsetPos","contentBufferDataView","DataView","setUint8","traceId16byte","spanId8byte","setUint16","truncatedTraceState","traceStateLengthBytes","traceStateBytes","maxTraceStateLength","ignoredMembers","traceStateBuilderArray","traceStateBuilderArrayLength","listMembers","listMember","currentMemberLength","currentMember","EntryPoint","entryPointName","BufferQueue","logPeekBuffer","bufPair","peekView","remaining","_rxDataCB","rxDataArrayBuffer","putSuccess","put","messageLen","msgBuffer","incomingMsg","_sessionId","advance","WINDOWED","NodeEventEmitter","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","DISABLED_ACTIONS","ignore","fail","unsafe","bareEmit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","emitSet","emitArray","buildFilter","_emits","_defaultEmitDirect","emitDirect","_directEventName","listener","_verifyListenerEvent","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","firstDirect","_onFirstDirectListener","onListener","throwInternal","emitBase","_internalError","formatErrorEvent","formattedName","innerEx","isDirect","disableEmitter","extraStringInfo","QueueType","QueueDescriptorValidator","TRANSPORT_FAIL","transportIn","WebTransportDown","WebTransportConnecting","WebTransportDestroying","_eventReason","attemptDowngrade","WebTransportUp","WebTransportDowngrading","notifyDowngradeFailed","tsEvent","TOPIC_ENDPOINT","ReplicationGroupMessageId","createMessage","createReplicationGroupMessageId","defaultComparator","astr","bstr","ArrayOperations","insertOrdered","element","comparator","inplaceInsertOrdered","scope","TRANSPORT_PARSE_ERROR","SUBSCRIPTION_ERROR","SUBSCRIPTION_OK","REQUEST_ABORTED","REQUEST_TIMEOUT","PROPERTY_UPDATE_OK","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","PROVISION_ERROR","PROVISION_OK","sendXhrBinary","sendXhrText","arrayBufferToString","prependOrigin","location","WaitedToken","HadToken","ReturnedToken","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","attempt","maxRetry","open","onreadystatechange","xhrStateChange","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","responseType","responseText","decodedData","dataLength","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","onprogress","NONE","DefaultCapabilities","createDefaultCapabilities","assumedMaxAdSize","RMID_VERSION_1_PREFIX","validRmidHexRegex","isValue","spoolerUniqueId","effectiveMessageId","_suid","_messageId","otherReplicationGroupMessageId","oId","hexString","rgmidStr","rmidBufs","rmidHex","rmidBuffer","buflen","ConsumerFSM","MessageConsumerPropertiesValidator","localCounter","applyProperties","superFormatter","_active","endpointErrorId","partitionGroupId","_on","ACTIVE","_onFlowActive","INACTIVE","_onFlowDisconnected","_onFlowUp","_operationCheck","requestStartDispatchUser","requestStopDispatchUser","isAutoAcked","acceptMessage","UNBIND","getEndpointErrorId","FLOWCHANGEUPDATE","active","getActiveFlow","_accessType","_emit","queueDiscardBehavior","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","wantFlowChangeNotify","maxWindowSize","addSubscription","success","subCode","removeSubscription","apiEnv","envObject","SMFClientCtrlAuthType","strToInt8","strToInt16","strToInt32","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","getParameter","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","prmGetDtoPriorityValue","dto","local","network","prmParseDtoPriorityValue","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","capLen","sprop","compressedTLS","plaintextTLS","cc","isClientCert","authenticationScheme","password","userName","subscriberLocalPriority","subscriberNetworkPriority","DELIVERTOONEPRIORITY","vpnName","applicationDescription","CLIENTDESC","userIdentification","AUTHENTICATION_SCHEME","idToken","accessToken","issuerIdentifier","CLIENTNAME","clientName","mode","formattedDate","SSL_DOWNGRADE","clientCaps","clientCapList","highestCap","capBits","cap","clientCapsToStr","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","CLIENT_DESCRIPTION","appdesc","CLIENT_NAME","validateClientName","strName","encodeResult","valTopicEndpointSubscription","isDurable","rawProperties","durable","SessionLib","CacheSessionSubscribeInfo","noOp","privateInterface","_validateProps","cacheName","maxAgeSec","maxMessages","timeoutMsec","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","getEventCBInfo","getMessageCBInfo","setMessageCBInfo","_handleMessage","setEventCBInfo","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","cacheSession","_getOutstandingRequest","correlationID","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","subscriptionWaiting","_startCacheRequest","_terminateRequest","_checkRequestCompletion","childRequests","timeoutHandle","replyReceived","parentRequest","_unregisterRequest","SUSPECT_DATA","dataReceived","liveDataFulfilled","LIVE_DATA_FULFILL","REQUEST_COMPLETE","NO_DATA","_sendSeeOther","cacheGetResult","clusterName","childRequest","requestID","liveDataAction","addChild","_registerRequest","startRequestTimeout","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","clearRequestTimeout","streamField","ERROR_RESPONSE","_incStat","getRootRequest","INVALID_SESSION","_decodeMessageStream","exception","every","checkCID","_performLiveDataAction","queuedLiveData","_fulfillRequest","_trackCompletionStats","_notifyCallback","CACHE_SESSION_DISPOSED","sendCacheRequest","subscribe","cbInfo","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","REQUEST_ALREADY_IN_PROGRESS","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","getRequestID","suppressClusters","cachePrefix","getSessionProperties","p2pInboxInUse","cacheMessageType","VERSION","REPLY_SIZE_LIMIT","includeOtherClusters","round","getCallback","innerMessage","SUSPECT","CACHED","cacheRequest","getUserObject","cacheCBFunction","RequestError","RequestEventCode","MessageDispatcher","emitter","autoAck","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","RECONNECTED","ReflectOwnKeys","R","Reflect","ReflectApply","receiver","Function","ownKeys","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","handler","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","TypeError","_getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","console","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","addEventListener","wrapListener","removeEventListener","setMaxListeners","getMaxListeners","doError","er","listeners","originalListener","spliceOne","rawListeners","eventNames","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","BIND","UNSUBSCRIBE","DELETE","TRANSACTIONCTRL","XACTRL","isNumber","_clonedContextSetter","TRACE_ID_BYTES_LENGTH","SPAN_ID_BYTES_LENGTH","setVersion","setTraceId","setSpanId","setSampled","setTraceState","traceContextValue","traceContextBuffer","traceContextBytes","bytesRead","getUint8","traceId16Bytes","spanId8Bytes","byteLength","getUint16","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","extensions","reactions","entryPoints","exitPoints","extension","getEntryPointDestState","getExitPointDestState","appEntryFunc","appExitFunc","eventUnhandled","tsEventCode","_transportEventCode","transportEventCode","getResponseCode","setError","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","href","connectTryCount","POSITIVE_INFINITY","reconnectTryCount","connectTryCountPerHost","_mutableState","succeeded","syscall","hostname","hostPointer","hostTries","listTries","exhausted","lastHostInfo","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","hostNumber","thenGen","doOp","elseFn","when","condition","unless","sendXhrBinaryMSIE10","overrideMimeType","setRequestHeader","sendXhrBinaryXHR2","connClose","SetOperations","mixin","_map","deleteField","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","parts","maxChunkLength","len2","encodeChunk","num","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","exists","ApplicationAckRingBuffer","_size","_insertIndex","insert","beforeEvictCallback","insertIndex","inserting","evicting","front","firstIndex","rawIndex","updateAckState","PADDING","SUB_ID_LIST","GENERIC_ATTACHMENT","AD_FLOWREDELIVERED_FLAG","AD_TOPICSEQUENCE_NUMBER","AD_ACK_MESSAGE_ID","AD_SPOOLER_UNIQUE_ID","AD_REPL_MATE_ACK_MSGID","AD_REDELIVERY_COUNT","PARTITION_KEY_HASH","FactoryLib","solace","_internal","inplaceUnion","setA","setB","inplaceDifference","inplaceIntersection","isSuperset","subset","difference","intersection","union","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","ARRAY_BUFFER_CONVERT_CHUNK","arrayBuf","uint8Array","int32","strToUInt32","ab","stringToArrayBuffer","format","uint8DataArray","padStart","int8","int16","int24","strToInt24","int64","strToUInt64","byteArrayToStr","byteArray","ucs2","utf8","decodeURIComponent","escape","byteOffset","base64Decode","parseSMFExtendedStream","streamLen","pUH","isSMFAvailable","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parseTopicQueueOffsets","parsedTopicOffsets","pStart","pType","pValueLen","pLen","parseResponseParam","parseDeliveryMode","contentSummary","parseContentSummary","TransportSessionStates","buildType","Superclass","superclassArgs","_sessionEventCode","errorSubCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","ck","TYPE_CACHE","base64","ieee754","customInspectSymbol","Symbol","K_MAX_LENGTH","createBuffer","setPrototypeOf","encodingOrOffset","isEncoding","actual","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","checked","numberIsNaN","fromObject","toPrimitive","assertSize","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","indexSize","arrLength","foundIndex","found","hexWrite","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","units","utf16leToBytes","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","foo","typedArraySupport","poolSize","alloc","allocUnsafeSlow","_isBuffer","swap16","swap32","swap64","toLocaleString","thisStart","thisEnd","thisCopy","targetCopy","isFinite","toJSON","hexSliceLookupTable","checkOffset","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","readUintLE","readUIntLE","readUintBE","readUint8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readBigInt64LE","readBigInt64BE","readFloatLE","readDoubleLE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","getMessage","Base","writable","addNumericalSeparator","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","received","isInteger","INVALID_BASE64_RE","leadSurrogate","base64clean","src","alphabet","table","i16","BufferBigIntNotDefined","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","queueSpec","maybeAdaptFromDestination","_durable","PRINTABLE_LUT","showDecode","leftPadding","ascii","lineBytes","parseSMFStream","IGNORE","REJECT","_parameters","ALWAYS_OPS","flowProperties","emitterOptions","emitterOptionsFull","_disposing","_userDisconnected","_stats","_privateEventEmitter","clearStats","userDisconnected","_midDispatch","terminateWithRunningFSM","_setCanonical","acc","childIn","removeChild","childIndex","collapse","getCBInfo","getLiveDataAction","cacheSessionTimeoutCB","DEFAULT_REPLY_SIZE_LIMIT","hasWorkingUrl","forceJURL","pathname","relative","relativePathDotMapping","_scheme","_schemeData","_username","_password","_host","_port","_path","_query","_fragment","_isInvalid","_isRelative","isRelativeScheme","scheme","invalid","IDNAToASCII","percentEscape","unicode","percentEscapeQuery","EOF","ALPHA","ALPHANUMERIC","stateOverride","cursor","seenAt","seenBracket","loop","nextC","nextNextC","cp","tempC","temp","PolyfillURL","authority","protocol","port","search","OriginalURL","revokeObjectURL","MessageDumpStandardProviderLib","MessageDumpState","dumpProviders","providers","getOutOfRangeValue","rawData","sdtField","indent","strIndent","sdtStream","timeStamp","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","provider","autoDecodeVarLengthNumber","elemType","lenBytes","elemLen","SUBCODE_FROM_EC","eventCode","_requestEventCode","superObj","numToHex","_allFlows","_reconnectingFlows","_flowsById","flowUp","flowDisposed","flowDown","matches","defineProperties","_canonical","enumValue","noneValue","unknownValue","isEnum","ofStrings","strings","ofNumbers","createFromSpec","ZERO_APP_ACK","_acknowledgeThreshold","_localPreferredWindowSize","_localMaxWindowSize","_hasAutoAckSupport","_messageDispatch","_resetRemoteConnectionState","_resetLocalConnectionState","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","emitBindFailed","verifyNackSettlementOutcomesSupport","checkCapabilitiesChoicePoint","verifyEndpointSubscription","Unbound","CreateSent","BindSent","checkCapabilitiesChoicePointOnRebind","externalTransition","Reconnecting","RBindSent","_addEventToEmit","_requestStartDispatch","_requestStopDispatch","requestStopDispatchFSM","transitionToUnbound","_dispose","getCloseMessageConsumer","handleAccidentalBind","emitDisabledEvent","AwaitSessionUp","AwaitFlowOpen","emitBindWaiting","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","partitionGroupIdValue","getPartitionGroupId","_clearPartitionGroupId","lastMsgIdAcked","getAccessType","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","getRespectsTTL","activeFlow","getWantFlowChangeNotify","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","_remoteWindowSize","PROTOTOCOL_ERROR","respEvent","UnbindSent","FlowUp","RAwaitSessionUp","RAwaitTimer","emitRebindFailed","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","_sendAcks","sendUnbindRequest","_endpointClear","handleUnbindTimeout","handleUnbindResponse","sendCreateRequest","handleCreateTimeout","idstr","_fsmDispatch","messageSuid","ackResult","transportAckRequired","maxPendingAcks","_applicationAcks","_oldUnacked","_setTransportAckTimer","dupAckRanges","_sendAck","applicationAckRequired","messageOutcome","oldAckRanges","UNBOUND_AWAITING_FLOWOPEN","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_clearTransportAckTimer","_transportAckTimer","_unacked","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","allMessageOutcomes","currentRangeLength","totalRangeLen","MAX_CLIENT_ACK_RANGES","bareRanges","hasAnyBareRanges","forceTransportAck","failedBareRanges","rejectedBareRanges","ackRange","concatFrom","buf0","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","maxSize","_queue","_maxSize","oIndex","adaptData","done","createField","isSigned","longValue","field","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","createReplayStartLocationBeginning","MODE","FORMATTED_DATE","pad","SUMMARY","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","cloneObj","STUB","generateLogHeader","levelStr","date","levelStrPadding","YY","MM","DD","hh","mm","ss","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","SessionPropertiesValidator","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","_setUserIdentification","selectedProtocol","defaultList","transportProtocolDefaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","stateName","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","handleDTEUnsubscribeResponse","updateProperty","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","smpResp","resp","ignoreDuplicateSubscriptionError","afterRemoveCallback","ignoreSubscriptionNotFoundError","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","_failOnExtendedVariableLengthProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","getSessionState","_setWebTransportProtocolInUse","capabilityType","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","ignoreExists","queueDescriptor2","handleProvisionResponse","ignoreMissing","provision","getQueueNameBytes","getDurability","provisionEvent","browserProperties","destinationType","vrn","localName","operationEnum","allow","NEW","routerCapabilities","sendDest","noSenderTimestamp","senderTimestamp","generateSendTimestamps","noSequenceNumber","sequenceNumber","generateSequenceNumber","noSenderId","senderId","includeSenderId","reqFailedCb","replyRecvdCb","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","generateReceiveTimestamps","adCtrlMessage","eventCBInfo","messageCBInfo","rfu","buildErrorEvent","createTopic","createDurableQueueDestination","SessionPropertiesBase","_tpProtocol","_tpDowngradeTimeout","_transportProtocolList","bufferedAmountQueryIntervalInMsecs","_bufferedAmountQueryInterval","transportProtocolInUse","_tpProtocolInUse","_setTransportProtocolInUse","webTransportProtocolInUse","_tpContentType","_lendsInspect","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_publisherProperties","_payloadCompressionLevel","makeDefaults","_authScheme","_accessToken","_idToken","_issuerIdentifier","_userName","_clientName","_appDesc","_vpnName","vpnNameInUse","defaultConnectTimeoutInMsecs","transportCount","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","_genSendTimestamps","_genReceiveTimestamps","_includeSenderId","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","_subLocalPriority","_subNetworkPriority","_ignoreDupSubError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","_assumedMaxAdSize","_maxWebPayload","nonHTTPTransportPropsSet","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","KEY_STR","ENC_LUT","DecodeError","LegacyEncoder","base64_encode","chr1","chr2","chr3","enc1","enc2","enc3","enc4","base64_decode","isNode","hasBlob","BufferEncoder","WindowEncoder","ALLOWED_PROTOCOLS","valClientName","valUrlList","valArray","all","regex","arrayLength","currententry","matchUrl","useClientCert","nonHttpPropsSet","isHttpTransport","propNames","validatePropsSupportedByTransport","recommendedMin","connectTimeout","smfmessage","getEventText","_eventText","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DUARBILITY_INT_TO_BOOL","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","_readParameter","bufMethod","masked","getLastMsgIdReceived","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","hasNackSupport","endpointBytes","endpointType","rsValue","lastMessageIdAcked","applicationAckRanges","allOutcomes","curMask","msgFlags","queueLength","subsLength","MyWebSocket","WebSocket","adaptURL","_bufferedAmountQueryTimer","onOpen","onClose","originalSocket","msgBuf","wasClean","onDrain","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","onError","WAITING_FOR_CONNECT","onMessage","binaryType","onopen","onclose","onerror","bufferAllow","maxPayloadBytes","close","cancelQuery","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis"],"sourceRoot":""}