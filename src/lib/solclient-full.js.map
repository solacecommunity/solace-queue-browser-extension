{"version":3,"file":"solclient-full.js","mappings":";AAAA,UAA2CA,MAAMC;IAChD,IAAsB,aAAnB,OAAOC,WAA0C,aAAlB,OAAOC,QACxCA,OAAOD,UAAUD,QAAQ,QACrB,IAAqB,eAAlB,OAAOG,UAAyBA,OAAOC,KAC9CD,OAAO,UAAU,IAAIH,OAAO,QACxB,IAAsB,aAAnB,OAAOC,SACdA,QAAQ,YAAYD,QAAQ,QAE5BD,KAAK,YAAYC,QAAQ;AAC1B,EAAEK,MAAM;IACT;;;gBCRAH,OAAOD,UAAU,oBAAjB;;;gBCFA,MAAQK,SAAW,oBAAQ,2CAAc,EAA1B;gBACf,MAAQC,OAAS,oBAAQ,yCAAY,EAAxB;gBACb,MAAQC,UAAY,oBAAQ,4CAAe,EAA3B;gBAChB,MAAQC,MAAQ,oBAAQ,wCAAW,EAAvB;gBACZ,MAAQC,OAAS,oBAAQ,yCAAY,EAAxB;gBAEbR,OAAOD,QAAQK,SAASA;gBACxBJ,OAAOD,QAAQM,OAAOA;gBACtBL,OAAOD,QAAQO,UAAUA;gBACzBN,OAAOD,QAAQQ,MAAMA;gBACrBP,OAAOD,QAAQS,OAAOA;;;;gBCAtB,MAAMC,UAAU;gBAChB,MAAMC,UAAU,EACd,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GACtB,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IACzB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,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","sources":["webpack://solace/webpack/universalModuleDefinition","webpack://solace/./index.js","webpack://solace/./modules/solclient-convert/api.js","webpack://solace/./modules/solclient-convert/lib/base64.js","webpack://solace/./modules/solclient-convert/lib/bits.js","webpack://solace/./modules/solclient-convert/lib/convert.js","webpack://solace/./modules/solclient-convert/lib/hex.js","webpack://solace/./modules/solclient-convert/lib/long.js","webpack://solace/./modules/solclient-core/api-internal.js","webpack://solace/./modules/solclient-core/api.js","webpack://solace/./modules/solclient-debug/api.js","webpack://solace/./modules/solclient-debug/lib/debug.js","webpack://solace/./modules/solclient-destination/api.js","webpack://solace/./modules/solclient-destination/lib/destination-from-network.js","webpack://solace/./modules/solclient-destination/lib/destination-type.js","webpack://solace/./modules/solclient-destination/lib/destination-util.js","webpack://solace/./modules/solclient-destination/lib/destination.js","webpack://solace/./modules/solclient-destination/lib/queue.js","webpack://solace/./modules/solclient-destination/lib/subscription-info.js","webpack://solace/./modules/solclient-destination/lib/topic.js","webpack://solace/./modules/solclient-env/api.js","webpack://solace/./modules/solclient-error/api.js","webpack://solace/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solace/./modules/solclient-error/lib/error-subcodes.js","webpack://solace/./modules/solclient-error/lib/not-implemented-error.js","webpack://solace/./modules/solclient-error/lib/operation-error.js","webpack://solace/./modules/solclient-error/lib/request-error.js","webpack://solace/./modules/solclient-error/lib/request-event-codes.js","webpack://solace/./modules/solclient-error/lib/solace-error.js","webpack://solace/./modules/solclient-eskit/api.js","webpack://solace/./modules/solclient-eskit/lib/array-operations.js","webpack://solace/./modules/solclient-eskit/lib/assert.js","webpack://solace/./modules/solclient-eskit/lib/bidi-map.js","webpack://solace/./modules/solclient-eskit/lib/enum.js","webpack://solace/./modules/solclient-eskit/lib/iterator.js","webpack://solace/./modules/solclient-eskit/lib/lazy.js","webpack://solace/./modules/solclient-eskit/lib/make-map.js","webpack://solace/./modules/solclient-eskit/lib/mixin.js","webpack://solace/./modules/solclient-eskit/lib/resolver.js","webpack://solace/./modules/solclient-eskit/lib/set-operations.js","webpack://solace/./modules/solclient-events/api.js","webpack://solace/./modules/solclient-events/lib/event-emitter.js","webpack://solace/./modules/solclient-events/lib/timer.js","webpack://solace/./modules/solclient-factory/api.js","webpack://solace/./modules/solclient-factory/lib/profile-binding.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory.js","webpack://solace/./modules/solclient-flow/api.js","webpack://solace/./modules/solclient-flow/lib/flow-operation.js","webpack://solace/./modules/solclient-flow/lib/flow.js","webpack://solace/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solace/./modules/solclient-fsm/api.js","webpack://solace/./modules/solclient-fsm/lib/entry-point.js","webpack://solace/./modules/solclient-fsm/lib/event.js","webpack://solace/./modules/solclient-fsm/lib/exit-point.js","webpack://solace/./modules/solclient-fsm/lib/object.js","webpack://solace/./modules/solclient-fsm/lib/state-context.js","webpack://solace/./modules/solclient-fsm/lib/state-machine.js","webpack://solace/./modules/solclient-fsm/lib/state.js","webpack://solace/./modules/solclient-log/api.js","webpack://solace/./modules/solclient-log/lib/console-log-impl.js","webpack://solace/./modules/solclient-log/lib/global-binding.js","webpack://solace/./modules/solclient-log/lib/log-impl.js","webpack://solace/./modules/solclient-log/lib/log-levels.js","webpack://solace/./modules/solclient-message-consumer/api.js","webpack://solace/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solace/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solace/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solace/./modules/solclient-message-publisher/api.js","webpack://solace/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solace/./modules/solclient-message-tracing/api.js","webpack://solace/./modules/solclient-message-tracing/lib/baggage.js","webpack://solace/./modules/solclient-message-tracing/lib/message-trace-context-setter.js","webpack://solace/./modules/solclient-message-tracing/lib/message-trace-context.js","webpack://solace/./modules/solclient-message-tracing/lib/message-tracing-support.js","webpack://solace/./modules/solclient-message/api.js","webpack://solace/./modules/solclient-message/lib/message-cache-status.js","webpack://solace/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solace/./modules/solclient-message/lib/message-dump-flags.js","webpack://solace/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solace/./modules/solclient-message/lib/message-dump-util.js","webpack://solace/./modules/solclient-message/lib/message-outcomes.js","webpack://solace/./modules/solclient-message/lib/message-types.js","webpack://solace/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solace/./modules/solclient-message/lib/message.js","webpack://solace/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solace/./modules/solclient-queue/api.js","webpack://solace/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/endpoint-name-complaint.js","webpack://solace/./modules/solclient-queue/lib/queue-access-types.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solace/./modules/solclient-queue/lib/queue-permissions.js","webpack://solace/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-properties.js","webpack://solace/./modules/solclient-queue/lib/queue-types.js","webpack://solace/./modules/solclient-replaystart/api.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solace/./modules/solclient-sdt/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solace/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solace/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field.js","webpack://solace/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solace/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solace/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solace/./modules/solclient-session/api.js","webpack://solace/./modules/solclient-session/lib/authentication-schemes.js","webpack://solace/./modules/solclient-session/lib/capability-types.js","webpack://solace/./modules/solclient-session/lib/correlated-request.js","webpack://solace/./modules/solclient-session/lib/default-capabilities.js","webpack://solace/./modules/solclient-session/lib/global-context.js","webpack://solace/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solace/./modules/solclient-session/lib/host-list.js","webpack://solace/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solace/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solace/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solace/./modules/solclient-session/lib/p2p-util.js","webpack://solace/./modules/solclient-session/lib/provision-event.js","webpack://solace/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solace/./modules/solclient-session/lib/session-event-codes.js","webpack://solace/./modules/solclient-session/lib/session-event-names.js","webpack://solace/./modules/solclient-session/lib/session-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm.js","webpack://solace/./modules/solclient-session/lib/session-operations.js","webpack://solace/./modules/solclient-session/lib/session-properties-validator.js","webpack://solace/./modules/solclient-session/lib/session-properties.js","webpack://solace/./modules/solclient-session/lib/session-request-types.js","webpack://solace/./modules/solclient-session/lib/session-state-names.js","webpack://solace/./modules/solclient-session/lib/session-states.js","webpack://solace/./modules/solclient-session/lib/session.js","webpack://solace/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solace/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solace/./modules/solclient-smf/api.js","webpack://solace/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solace/./modules/solclient-smf/lib/codec/api.js","webpack://solace/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solace/./modules/solclient-smf/lib/codec/decode.js","webpack://solace/./modules/solclient-smf/lib/codec/encode.js","webpack://solace/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solace/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solace/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solace/./modules/solclient-smf/lib/codec/smp.js","webpack://solace/./modules/solclient-smf/lib/codec/transport.js","webpack://solace/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/api.js","webpack://solace/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solace/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solace/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solace/./modules/solclient-smf/lib/smf-protocols.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solace/./modules/solclient-solcache-session/api.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solace/./modules/solclient-stats/api.js","webpack://solace/./modules/solclient-stats/lib/stat-bymode.js","webpack://solace/./modules/solclient-stats/lib/stat-types.js","webpack://solace/./modules/solclient-stats/lib/stats.js","webpack://solace/./modules/solclient-transport/api.js","webpack://solace/./modules/solclient-transport/lib/base-smf-client.js","webpack://solace/./modules/solclient-transport/lib/buffer-queue.js","webpack://solace/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solace/./modules/solclient-transport/lib/smf-client.js","webpack://solace/./modules/solclient-transport/lib/transport-base.js","webpack://solace/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solace/./modules/solclient-transport/lib/transport-error.js","webpack://solace/./modules/solclient-transport/lib/transport-factory.js","webpack://solace/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solace/./modules/solclient-transport/lib/transport-protocols.js","webpack://solace/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event.js","webpack://solace/./modules/solclient-transport/lib/transport-session-states.js","webpack://solace/./modules/solclient-transport/lib/tsh-state.js","webpack://solace/./modules/solclient-transport/lib/web/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solace/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solace/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solace/./modules/solclient-transport/lib/web/state-base64.js","webpack://solace/./modules/solclient-transport/lib/web/state-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solace/./modules/solclient-util/api.js","webpack://solace/./modules/solclient-util/lib/api-properties-validators.js","webpack://solace/./modules/solclient-util/lib/api-properties.js","webpack://solace/./modules/solclient-util/lib/array-utils.js","webpack://solace/./modules/solclient-util/lib/browser-url-polyfill.js","webpack://solace/./modules/solclient-util/lib/clone.js","webpack://solace/./modules/solclient-util/lib/process.js","webpack://solace/./modules/solclient-util/lib/string-buffer.js","webpack://solace/./modules/solclient-util/lib/string-utils.js","webpack://solace/./modules/solclient-util/lib/timing-bucket.js","webpack://solace/./modules/solclient-util/lib/url.js","webpack://solace/./modules/solclient-util/lib/uuid.js","webpack://solace/./modules/solclient-util/lib/version.js","webpack://solace/./modules/solclient-validate/api.js","webpack://solace/./modules/solclient-validate/lib/base-checks.js","webpack://solace/./modules/solclient-validate/lib/check.js","webpack://solace/./modules/solclient-validate/lib/parameter.js","webpack://solace/./node_modules/base64-js/index.js","webpack://solace/./node_modules/browser-util-inspect/index.js","webpack://solace/./node_modules/buffer/index.js","webpack://solace/./node_modules/events/events.js","webpack://solace/./node_modules/fflate/lib/browser.cjs","webpack://solace/./node_modules/ieee754/index.js","webpack://solace/./node_modules/long/umd/index.js","webpack://solace/webpack/bootstrap","webpack://solace/webpack/runtime/global","webpack://solace/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"solace\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"solace\"] = factory();\n\telse\n\t\troot[\"solace\"] = factory();\n})(this, () => {\nreturn ","// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\n\nfunction uint8ArrayToString(data, format = undefined) {\n  const dataLength = data.byteLength;\n  const uint8DataArray = new Uint8Array(BufferImpl.from(data));\n  let result = '';\n  for (let i = 0; i < dataLength; i++) {\n    if(format && format.toLowerCase() === 'hex') {\n      result += (uint8DataArray[i]).toString(16).padStart(2, '0');\n    } else {\n      result += String.fromCharCode(uint8DataArray[i] & 0xff);\n    }\n  }\n  return result;\n}\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction hexStringToUint8Array(data) {\n  // if null data, return empty Uint8Array\n  if(data == null) {\n    return new Uint8Array();\n  }\n  return Uint8Array.from(BufferImpl.from(data, 'hex'));\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  \n  uint8ArrayToString,\n  stringToUint8Array,\n\n  hexStringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst MessageTracing = require('solclient-message-tracing');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  MessageTracing,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  Baggage,\n  TraceContext,\n  TraceContextSetter,\n} = require('solclient-message-tracing');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  Baggage,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TraceContext,\n  TraceContextSetter,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'invalid queue or topic endpoint durability', SC.INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND,\n    'invalid queue name', SC.INVALID_QUEUE_NAME,\n    'invalid topic endpoint name', SC.INVALID_TE_NAME,\n    'message size out of range', SC.MESSAGE_SIZE_OUT_OF_RANGE,\n    'unsupported permissions', SC.UNSUPPORTED_PERMISSIONS,\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    // 'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'replay not supported on anonymous queue without subscriptions', SC.REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'browsing not supported on partitioned queue', SC.PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED,\n    'selectors not supported on partitioned queue', SC.PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'sync replication ineligible', SC.SYNC_REPLICATION_INELIGIBLE,\n    'max endpoints exceeded', SC.MAX_ENDPOINTS_EXCEEDED,\n    'copy-from queue template missing', SC.COPY_FROM_QUEUE_TEMPLATE_MISSING,\n    'copy-from topic-endpoint template missing', SC.COPY_FROM_TE_TEMPLATE_MISSING,\n  ),\n  507, makeMap(\n    'assured delivery not ready', SC.ASSURED_DELIVERY_NOT_READY,\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to or create a Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   * @deprecated since 10.3.1 - Replay is now supported on Temp Endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT:         160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                                161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                               162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                                 163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                           164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                             165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:                    166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                           167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                                    168,\n  /**\n   * Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n  REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                         169,\n  /**\n   * Browser flows to Partitioned Queues are not permitted.\n   * - 403 Browsing Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED:                     170,\n  /**\n   * Egress selectors are not permitted when binding to a Partitioned Queue.\n   * - 403 Selectors Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED:                    171,\n  /**\n   * Replay Not Supported on Anonymous Queue Without Subscriptions\n   * - 403 Replay Not Supported on Anonymous Queue Without Subscriptions\n   */\n  REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED:   172,\n  /**\n   * The message was rejected because the appliance has been configured\n   * to reject messages when sync replication mode is ineligible.\n   * - 503 Sync Replication Ineligible (Reject Messages when Synchronous Replication Mode is Ineligible)\n   * \n   * * The transaction was started as a synchronous replicated transaction,\n   * but replication became ineligible during the transaction.\n   * - 503 Sync Replication Ineligible (Replication Ineligible during Synchronous Replicated Transaction)\n   */\n  SYNC_REPLICATION_INELIGIBLE:                                  173,\n  /**\n   * An attempt was made to bind to a durable TE or Queue \n   * with a flow property of ‘non-durable’.\n   *\n   * Causes:\n   *  * 400 Invalid Queue or Topic Endpoint Durability\n   */\n  INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY:                   174,\n  /**\n   * Provisioning failed due to invalid queue name. \n   *\n   * Causes:\n   *  * 400 Invalid Queue Name\n   */\n  INVALID_QUEUE_NAME:                   175,\n  /**\n   * Provisioning failed due to invalid topic endpoint name. \n   *\n   * Causes:\n   *  * 400 Invalid Topic Endpoint Name\n   */\n  INVALID_TE_NAME:                   176,\n  /**\n   * Provisioning failed because the requested max message size was too large. \n   *\n   * Causes:\n   *  * 400 Message Size Out Of Range\n   */\n  MESSAGE_SIZE_OUT_OF_RANGE:         177,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 400 Unsupported permissions\n   */\n  UNSUPPORTED_PERMISSIONS:         178,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 503 Max endpoints exceeded\n   */\n  MAX_ENDPOINTS_EXCEEDED:         179,\n  /**\n   * Provisioning failed because router is unable to perform Assured Delivery. \n   *\n   * Causes:\n   *  * 507 Assured Delivery Not Ready\n   */\n  ASSURED_DELIVERY_NOT_READY:         180,\n  /**\n   * Provisioning failed due to a queue template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from queue template missing\n   */\n  COPY_FROM_QUEUE_TEMPLATE_MISSING:         181,\n  /**\n   * Provisioning failed due to a topic endpoint template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from topic-endpoint template missing\n   */\n  COPY_FROM_TE_TEMPLATE_MISSING:         182,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import Long = require('long');\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnected;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { MessageOutcome } = require('solclient-message');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state, settlementOutcome) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n      this.settlementOutcome = settlementOutcome || MessageOutcome.ACCEPTED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state, settlementOutcome = undefined) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n    this.settlementOutcome = (settlementOutcome !== undefined) ? settlementOutcome : null; // outcome not yet set at point of insertion\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n    this.settlementOutcome = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @param {?MessageOutcome} settlementOutcome where available, update the settlement outcome for the ID\n   * @private\n   */\n  updateAckState(id, state, settlementOutcome = undefined) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n    // where available, update the settlement outcome too\n    if(settlementOutcome != undefined) {\n      existing.settlementOutcome = settlementOutcome;\n    } else if(state === ApplicationAckState.ACKED_NOT_SENT) {\n      // set default settlement outcome to ACCEPTED for ACKed messages if no outcome available\n      existing.settlementOutcome = MessageOutcome.ACCEPTED;\n    }\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { MessageOutcome, RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\n// assumption is that this first message (messageId = 0) settlement outcome is ACCEPTED (ACKed)\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT, MessageOutcome.ACCEPTED);\n\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n    this._hasAutoAckSupport = autoAck;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n\n    function verifyNackSettlementOutcomesSupport(requiredSettlementOutcomes) {\n      let error = null;\n      // check for whether the broker session supports the NACK capability\n      const settlementOutcomes = requiredSettlementOutcomes;\n      if (settlementOutcomes && settlementOutcomes.length > 0) {\n        // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n        const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n        if(isNackRequired && !fsm._sessionInterface.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n          const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n            settlementOutcomes.map(v => MessageOutcome.nameOf(v)).join(', ')\n          } ]`;\n          // log the operation error as a Warning\n          LOG_WARN(outcomeNotSupportedError);\n          // then create the actual OperationError object here\n          error = new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION);\n        }      \n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n      else if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n\n    /**\n     * Check Capabilities on Re-Bind\n     * \n     * @param {*} curState - current state\n     * @param {*} externalTransition - is an external transition?\n     * @returns {State} retrurns the new state for the state machine\n     * @private\n     */\n    function checkCapabilitiesChoicePointOnRebind(curState, externalTransition = false) {\n      let error = null;\n      if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to re-bind\n      if (externalTransition) {\n        return curState.externalTransitionTo(fsm.Reconnecting.RBindSent);\n      }\n      return curState.transitionTo(fsm.Reconnecting.RBindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state and partition group ID, if any');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          (properties.requiredSettlementOutcomes && properties.requiredSettlementOutcomes.length > 0));\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          properties.requiredSettlementOutcomes]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        // the partition group ID\n        let partitionGroupIdValue = msg.getPartitionGroupId();\n        if(partitionGroupIdValue == undefined || partitionGroupIdValue == null) {\n          partitionGroupIdValue = undefined; // set it as undefined\n          fsm._clearPartitionGroupId(); // clear the partitionGroupId\n        }\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n          partitionGroupId:     partitionGroupIdValue,\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n          partitionGroupId:     partitionGroupIdValue,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return checkCapabilitiesChoicePointOnRebind(this, false);\n          // return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return checkCapabilitiesChoicePointOnRebind(this, false);\n        // return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return checkCapabilitiesChoicePointOnRebind(this, true);\n          // return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return checkCapabilitiesChoicePointOnRebind(this, false);\n      // return this.transitionTo(fsm.Reconnecting.RBindSent);\n    });\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emitting UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emitting UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          const dupAckRanges = new Map();\n          dupAckRanges.set(MessageOutcome.ACCEPTED, [[messageID, messageID]]);\n          this._sendAck(dupAckRanges); // send ack for duplicates as ACCEPTED outcome (broker would use previous settlement outcome for message)\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId, isAutoAcked = false) {\n    // internally call the applicationSettle(messageId, MessageOutcome.ACCEPTED); \n    // since the implementations are the same\n    this.applicationSettle(messageId, MessageOutcome.ACCEPTED, isAutoAcked);\n  }\n\n  applicationSettle(messageId, messageOutcome = MessageOutcome.ACCEPTED, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n\n    // increment the correct stat for the outcome\n    switch(messageOutcome) {\n      case MessageOutcome.FAILED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.FAILED');\n        // count persistent and non-persistent settled failed msgs\n        this._consumer.incStat(StatType.RX_SETTLE_FAILED);\n        break;\n      // case MessageOutcome.RELEASED:\n      //   // no current support for RELEASED settlement Outcome\n      //   break;\n      case MessageOutcome.REJECTED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.REJECTED');\n        // count persistent and non-persistent settled rejected msgs\n        this._consumer.incStat(StatType.RX_SETTLE_REJECTED);\n        break;\n\n      case MessageOutcome.ACCEPTED:\n         // count persistent and non-persistent settled accepted msgs\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.ACCEPTED');\n        // count for manual calls on Message.acknowledge(); or Message.settle(outcome); methods\n        // so that we don't count for auto-Acks\n        if(!isAutoAcked) {\n          this._consumer.incStat(StatType.RX_SETTLE_ACCEPTED); // count persistent and non-persistent settled accepted msgs\n        }\n        // increment the Acked stat for calls to accept() and auto-acks\n        this._consumer.incStat(StatType.RX_ACKED); // count it as normal acknowledgement\n        break;\n    }\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      const oldAckRanges = new Map();\n      oldAckRanges.set(messageOutcome, [[messageId, messageId]]);\n      this._sendAck(oldAckRanges); // send settlement outcome for message\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT, messageOutcome);\n    // if the message outcome is not ACCEPTED, then flush the buffer immediately\n    if(messageOutcome !== MessageOutcome.ACCEPTED) {\n      this._sendAcks(true); // send the accumulated Ack(s) and Nacks immediately\n    } else {\n      this._setTransportAckTimer();\n    }\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _clearPartitionGroupId() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Clear the consumer.partitionGroupId; Set it to undefined');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n\n    LOG_TRACE('Initializing partitionGroupId');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Map.<Array.<ackpair>>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    // they will hold an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    const currentRangeLength = currentRange.length;\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      // check for the type of settlement outcome and push if same as aggregation group\n      if(\n        currentRangeLength === 0 ||\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome === applicationAck.settlementOutcome)\n      ) {\n        currentRange.push(applicationAck);\n        return; // Wait for end of range or flush\n      }\n      // if settlement outcomes were flushed and applicationAck still remaining, start another aggregation group\n      else if(\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome !== applicationAck.settlementOutcome)\n      ) {\n        const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n        ackRanges[rangeOutcome].push(currentRange); // flush the range since we detect a change in outcomes\n\n        acksPendingState.currentRange = []; // Clear the accumulators for this range.\n        acksPendingState.currentRange.push(applicationAck); // push the detected change\n        return; // Wait for end of range or flush\n      }\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range for each of the settlement outcomes.\n    if (currentRangeLength) {\n      const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n      ackRanges[rangeOutcome].push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n\n    // aggregate the total length of the ack/nack ranges\n    let totalRangeLen  = 0;\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      totalRangeLen += ackRanges[allMessageOutcomes[i]].length;\n    }\n\n    if (applicationAck === null || (totalRangeLen === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES)) {\n      // Reduce each range for each of the settlement outcomes to a first and last ID.\n      const bareRanges = new Map(); // ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n      let hasAnyBareRanges = false;\n\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        // check for value and only put real values into map\n        if(ackRanges[allMessageOutcomes[i]].length > 0) {\n          bareRanges.set(allMessageOutcomes[i], ackRanges[allMessageOutcomes[i]].map(\n            range => [range[0].id, range[range.length - 1].id]\n          ));\n          // we have written at least one outcome ack/nack range into the map\n          hasAnyBareRanges = true;\n        }\n      }\n\n      if (hasAnyBareRanges || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n\n        this._sendAck(bareRanges); // now contains a Map of Arrays to pass settlement outcomes to Broker\n\n        // expectation is only ONE NACK before we flush the (N)acks in the RingBuffer to the broker\n        const failedBareRanges = bareRanges.get(MessageOutcome.FAILED);\n        const rejectedBareRanges = bareRanges.get(MessageOutcome.REJECTED);\n\n        // Warning: this log statement reduces debug performance by about 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks(ACCEPTED): ${bareRanges.has(MessageOutcome.ACCEPTED)\n            ? bareRanges.get(MessageOutcome.ACCEPTED).map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}\\n`,\n          `Application Nacks(FAILED): ${bareRanges.has(MessageOutcome.FAILED)\n            ? `[${failedBareRanges[0][0]}..${failedBareRanges[0][1]}]`\n            : '[]'}\\n`,\n          `Application Nacks(REJECTED): ${bareRanges.has(MessageOutcome.REJECTED)\n            ? `[${rejectedBareRanges[0][0]}..${rejectedBareRanges[0][1]}]`\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        ackRanges[allMessageOutcomes[i]].forEach((ackRange) => {\n          ackRange.forEach((ack) => {\n            if (ack.state !== ApplicationAckState.ACKED_SENT) {\n              try {\n                this._applicationAcks.updateAckState(ack.id,\n                                                     ApplicationAckState.ACKED_SENT);\n              } catch (e) {\n                const { LOG_ERROR } = this.logger;\n                LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n              }\n            }\n          });\n        });\n      }\n\n      // Clear the main accumulators since it has hit the wire.\n      acksPendingState.ackRanges = [];\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n      }\n    }\n    // Clear the accumulators for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [], // holds an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n      currentRange:      [], // holds an Array for each supported settlement outcomes per aggregation (i.e. indexes -> 0,1,2,3)\n    };\n\n    // initialize the ackRanges with Array of Arrays\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n    }\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      assert(acksPendingState.ackRanges[allMessageOutcomes[i]].length === 0);\n    }\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n  get hasAutoAckSupport() {\n    return this._hasAutoAckSupport;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   * @default null\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  requiredSettlementOutcomes:              [], // MessageOutcome.ACCEPTED is not required to be set and always supported\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   * @default undefined\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The required settlement outcomes for the Message Consumer.\n   *\n   * A session is created with SUPPORTED_MESSAGE_ACK_CLIENT by setting\n   * the requiredSettlementOutcomes property to support negative acknowledgment outcomes.\n   *\n   * The {@link solace.MessageOutcome.ACCEPTED} outcome is not required to be set and is always\n   * supported as a settlement outcome.\n   *\n   * When the requiredSettlementOutcomes include either {@link solace.MessageOutcome.FAILED}\n   * or {@link solace.MessageOutcome.REJECTED}, a message can be settled with any of these outcomes.\n   *\n   * The {@link solace.Message#acknowledge} method internally calls the {@link solace.Message#settle}\n   * with the {@link solace.MessageOutcome.ACCEPTED} passed as the settlement outcome for that message.\n   *\n   * When received messages are Application Acknowledged/Settled with\n   * a {@link solace.MessageOutcome.ACCEPTED} outcome, they are removed from the Guaranteed\n   * Message storage on the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {Array.<solace.MessageOutcome>}\n   * @default []\n   */\n  get requiredSettlementOutcomes() {\n    return Check.something(this._requiredSettlementOutcomes)\n      && Check.array(this._requiredSettlementOutcomes)\n      ? this._requiredSettlementOutcomes\n      : DEFAULTS.requiredSettlementOutcomes;\n  }\n  set requiredSettlementOutcomes(value) {\n    this._requiredSettlementOutcomes = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageOutcome } = require('solclient-message');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n    this.partitionGroupId = undefined; // support Partition Q feature\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {any} isAutoAcked whether this is an auto-acked message\n   * @internal\n   */\n  applicationAck(messageId, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId, isAutoAcked);\n  }\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {solace.MessageOutcome} settlementOutcome The message settlement outcome\n   * @internal\n   */\n  applicationSettle(messageId, settlementOutcome) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application settlement for ${\n      messageId\n    } with outcome: solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)}`);\n    this._fsm.applicationSettle(messageId, settlementOutcome);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message._autoAcknowledge(); // No, so auto ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const { Baggage } = require('./lib/baggage');\nconst { TraceContext } = require('./lib/message-trace-context');\nconst { TraceContextSetter } = require('./lib/message-trace-context-setter');\nconst { MessageTracingSupport } = require('./lib/message-tracing-support');\n\nmodule.exports.Baggage = Baggage;\nmodule.exports.TraceContext = TraceContext;\nmodule.exports.TraceContextSetter = TraceContextSetter;\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const { Parameter: { isStringOrNothing } } = require('solclient-validate');\n\n/**\n * @classdesc\n * <b>This class abstracts baggage metadata used for distributed\n * message tracing with Solace messaging APIs types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class Baggage {\n \n    /**\n     * Get the value of the baggage associated with the message.\n     * This method is for internal use only.\n     *\n     * @returns {?String} value of baggage associated with the message\n     * @internal\n     */\n    getBaggage() {\n        return this._baggage || null;\n    }\n \n    /**\n     * Sets the value of the baggage associated with this message\n     * This method is for internal use only.\n     *\n     * @param {?String} value The valid value of baggage associated with this  message\n     * @see {@link https://www.w3.org/TR/2022/WD-baggage-20220928|w3c baggage format specification}  \n     * @internal\n     */\n    setBaggage(value) {\n        this._setBaggage(isStringOrNothing('baggage', value));\n    }\n    _setBaggage(value) {\n        this._baggage = value;\n    }\n \n}\n\nmodule.exports.Baggage = Baggage;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n    isNumber,\n    isBoolean,\n    isString,\n    isStringOrNothing,\n} = Parameter;\n\nconst { uint8ArrayToString } = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts settable metadata used for \n * distributed message tracing with Solace messaging APIs \n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class TraceContextSetter {\n\n    /**\n     * Abstract constructor for metadata used \n     * for distributed message tracing.\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor() {\n        this._traceId = null;\n        this._spanId = null;\n        this._isSampled = false;\n        this._traceState = null;\n        this._version = 0x01; // version=0001 (4 bits, version=1);\n    }\n\n    /**\n     * Clone this TraceContextSetter object.\n     * \n     * @returns {TraceContextSetter} the cloned TraceContextSetter instance\n     */\n    clone() {\n        const _clonedContextSetter = new TraceContextSetter();\n        _clonedContextSetter._setSpanId(this._spanId);\n        _clonedContextSetter._setTraceId(this._traceId);\n        _clonedContextSetter._setSampled(this._isSampled);\n        _clonedContextSetter._setTraceState(this._traceState);\n        _clonedContextSetter._setVersion(this._version);\n        return _clonedContextSetter;\n    }\n\n    /**\n     * The length of the traceId bytes in the binary message\n    */\n    static get TRACE_ID_BYTES_LENGTH() {\n        return 16;\n    }\n\n    /**\n     * The length of the spanId bytes in the binary message\n    */\n    static get SPAN_ID_BYTES_LENGTH() {\n        return 8;\n    }\n\n    /**\n     * The version which for now is 1. -> 0001\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);;\n    }\n    /**\n     * Sets the version\n     * \n     * @param {Number} value The version encoded as Hex value\n     */\n    setVersion(value) {\n        this._setVersion(isNumber('version', value));\n    }\n    _setVersion(value) {\n        this._version = value;\n    }\n\n    /**\n     * @private\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Sets the value of the trace identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 16-length Hex string\n     */\n    setTraceId(value) {\n        this._setTraceId(isString('traceId', value));\n    }\n    _setTraceId(value) {\n        this._traceId = value;\n    }\n \n    /**\n     * @private\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Sets the value of the span identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 8-length Hex string\n     */\n    setSpanId(value) {\n        this._setSpanId(isString('spanId', value));\n    }\n    _setSpanId(value) {\n        this._spanId = value;\n    }\n \n    /**\n     * @private\n    */\n    get isSampled() {\n        return this._isSampled || false;\n    }\n    /**\n     * Turns on or off sampling for the associated message.\n     * \n     * @param {Boolean} value if true sampling is on, off otherwise\n     */\n    setSampled(value) {\n        this._setSampled(isBoolean('isSampled', value));\n    }\n    _setSampled(value) {\n        this._isSampled = value;\n    }\n \n    /**\n     * @private\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Sets the value of the trace state associated with the message.\n     * \n     * @param {?String} value The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    setTraceState(value) {\n        this._setTraceState(isStringOrNothing('traceState', value));\n    }\n    _setTraceState(value) {\n        this._traceState = value;\n    }\n\n    /**\n     * Gets a new instance of the Message Trace Context Setter \n     * from the values in the SMF header associated with the message.\n     * \n     * @param {Buffer | Uint8Array | String | null} traceContextValue The value of trace context associated with the message\n     * @returns {solace.TraceContextSetter | null} Context setter object\n     */\n    static fromTraceContext(traceContextValue) {\n        // implementation here\n        if (traceContextValue == null) {\n            return null;\n        }\n\n        let traceContextBuffer = null;\n        if (BufferImpl.isBuffer(traceContextValue)) {\n            traceContextBuffer = traceContextValue; // do nothing since it is already a buffer\n        } else if (typeof traceContextValue === 'string') {\n            traceContextBuffer = BufferImpl.from(traceContextValue, 'latin1');\n        }\n\n        // the trace context value is at least 32 bytes (without trace state)\n        if (!traceContextBuffer || traceContextBuffer.length < 32) {\n            return null;\n        }\n\n        try {\n            const traceContextBytes = (new Uint8Array(traceContextBuffer)).buffer;\n            let bytesRead = 0; // to track the byte read offsets\n\n            const traceContextSetter = new TraceContextSetter();\n\n            const firstByte = traceContextBytes.slice(bytesRead, bytesRead + (1));\n            const byte1DataView = new DataView(firstByte, 0, 1);\n            let byte1 = byte1DataView.getUint8(bytesRead);// get the first byte\n\n            const version = byte1 >> 4; // get the version from the four MSB\n            traceContextSetter.setVersion(version); // set the version\n\n            const isSampled = ((byte1 & 0x0F) == 0x04);\n            traceContextSetter.setSampled(isSampled); // set the sampled status\n            bytesRead++;\n\n            const traceId16Bytes = traceContextBytes.slice(bytesRead, bytesRead + (16));\n            const traceId = uint8ArrayToString(traceId16Bytes, 'hex'); // set the traceId\n            traceContextSetter.setTraceId(traceId);\n            bytesRead += TraceContextSetter.TRACE_ID_BYTES_LENGTH;\n\n            const spanId8Bytes = traceContextBytes.slice(bytesRead, bytesRead + (8));\n            const spanId = uint8ArrayToString(spanId8Bytes, 'hex'); // set the spanId\n            traceContextSetter.setSpanId(spanId);\n            bytesRead += TraceContextSetter.SPAN_ID_BYTES_LENGTH;\n\n            bytesRead ++; // Skip InjectionStandard byte\n            bytesRead += 4; // Skip the 4 RFU bytes\n\n            const traceStateLengthBytes = traceContextBytes.slice(bytesRead, bytesRead + (2));\n            const traceStateLengthDataView = new DataView(traceStateLengthBytes, 0, traceStateLengthBytes.byteLength);\n            const traceStateLength = traceStateLengthDataView.getUint16(0, false);// get the trace length\n            bytesRead += 2; // move pointer past length bytes\n\n            // if there is a trace state value, read it\n            if (traceStateLength > 0) {\n                const traceStateBytes = traceContextBytes.slice(bytesRead, bytesRead + (traceStateLength));\n                const traceState = uint8ArrayToString(traceStateBytes); // set the trace state\n                traceContextSetter.setTraceState(traceState);\n            }\n            return traceContextSetter;\n        } catch (ex) {\n            return null;\n        }\n    }\n}\n\nmodule.exports.TraceContextSetter = TraceContextSetter;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\nconst {\n    isBoolean,\n    isStringOrNothing,\n} = Parameter;\n\nconst {\n    stringToUint8Array,\n    hexStringToUint8Array,\n} = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts readonly view on a metadata used for \n * distributed message tracing with Solace messaging APIs\n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\nclass TraceContext {\n\n    /**\n     * Abstract constructor for readonly view on metadata used \n     * for distributed message tracing.\n     * \n     * @param {TraceContextSetter} traceContextSetter {TraceContextSetter}\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor(traceContextSetter) {\n        this._traceId = isStringOrNothing('traceId', traceContextSetter.traceId);\n        this._spanId = isStringOrNothing('spanId', traceContextSetter.spanId);\n        this._isSampled = isBoolean('isSampled', traceContextSetter.isSampled);\n        this._traceState = traceContextSetter.traceState;\n        this._version = traceContextSetter.version;\n    }\n\n    /**\n     * Clone the a TraceContext object used \n     * for distributed message tracing.\n     * \n     * @param {TraceContext} toClone {TraceContext}\n     * @returns {TraceContext} the newly cloned TraceContext instance\n     */\n    static clone(toClone) {\n        const newContextSetter = new TraceContextSetter();\n        newContextSetter._setSpanId(toClone.getSpanId());\n        newContextSetter._setTraceId(toClone.getTraceId());\n        newContextSetter._setSampled(toClone.getIsSampled());\n        newContextSetter._setTraceState(toClone.getTraceState());\n        newContextSetter._setVersion(toClone.getVersion());\n        return new TraceContext(newContextSetter);\n    }\n\n    /**\n     * The version which for now is 1.\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);\n    }\n    /**\n     * Gets the version associated with the message trace.\n     * \n     * @returns {Number} The version encoded as Hex value\n     */\n    getVersion() {\n        return this.version;\n    }\n\n    /**\n     * The maximum allowed string size of trace state to propagate.\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n    */\n    get MAX_TRACE_STATE_LENGTH() {\n        return 512;\n    }\n \n    /**\n     * The tranceId property as a 16-length string\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Gets the value of the trace identifier associated with the message.\n     * \n     * @returns {String} value of trace identifier associated with the message as\n     * 16-length string.\n     */\n    getTraceId() {\n        return this._traceId;\n    }\n \n    /**\n     * The spanId property a 8-length string\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Gets the value of the span identifier associated with the message.\n     * \n     * @returns {String} value of span identifier associated with the message as\n     * 8-length string.\n     */\n    getSpanId() {\n        return this._spanId;\n    }\n\n    /**\n     * The isSampled boolean property\n    */\n    get isSampled() {\n        return this._isSampled;\n    }\n    /**\n     * Returns true if the sampling for the associated message is on,\n     * otherwise false.\n     * \n     * @returns {Boolean} indicates whether the sampling is on or off\n     */\n    getIsSampled() {\n        return this._isSampled || false;\n    }\n\n    /**\n     * The traceState property\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTraceState() {\n        return this._traceState || null;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTruncatedTraceState() {\n        return this._standardTraceStateTruncation(this.MAX_TRACE_STATE_LENGTH);\n    }\n\n\n    /**\n     * It returns the encoded bytes that is \n     * passed to the SMF header to be encoded in \n     * SMF for the message.\n     * \n     * @returns {?Uint8Array} The value of encoded trace span context\n     */\n    getEncodedTraceContext() {\n        // format the string payload \n        // and return the correct format as a byte array or null\n        if (this.traceId == null || this.spanId == null) {\n            return null;\n        }\n\n        const traceStateLength = this.traceState == null ? 0 : this.traceState.length;\n\n        // the fixed part of the encoded data is at least 32 bytes\n        const contentBuffer = new ArrayBuffer(32 + traceStateLength);\n        let offsetPos = 0; // start from the beginning of the buffer\n        const contentBufferDataView = new DataView(contentBuffer);\n\n        let byte1 = 0; // headerByte: version 4 bits, sampled 2 bits and RFU=0 2 bits\n        // set the version to the four MSB\n        byte1 |= (this.version << 4); // version=0001 (4 bits, version=1)\n        byte1 |= this.isSampled ? 0x04 : 0x00; //sampled=0100 (2 bits, sampled=1 and 2 bits RFU=0)\n\n        // write the 1 byte header\n        contentBufferDataView.setUint8(offsetPos, byte1, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write the first 16 bytes traceId\n        const traceId16byte = hexStringToUint8Array(this.traceId); // get the 8 byte array\n        for(let i = 0; i < 16; i ++) { // write the first 16 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, traceId16byte[i], false); // write the bytes\n        }\n        offsetPos += 16; // move pointer to next free position (plus 16 bytes)\n\n        // write the first 8 bytes spanId\n        const spanId8byte = hexStringToUint8Array(this.spanId) // get the 8 byte array\n        for(let i = 0; i < 8; i ++) { // write the first 8 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, spanId8byte[i], false); // write the bytes\n        }\n        offsetPos += 8; // move pointer to next free position (plus 8 bytes)\n\n        // write 1 byte InjectionStandard=1 (W3C)\n        contentBufferDataView.setUint8(offsetPos, 0x01, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write 4 bytes RFU=0\n        // use BigEndian; litteEndian = false\n        contentBufferDataView.setUint16(offsetPos, 0, false); // write first two RFU bytes of zeros\n        contentBufferDataView.setUint16(offsetPos + 2, 0, false); // write last two RFU bytes of zeros\n        offsetPos += 4; // move pointer to next free position\n\n\t    if (this.traceState == null) {\n            // write 2 bytes TraceState length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, 0, false); // write two bytes of zeros\n            offsetPos += 2; // move pointer to next free position\n\t    } else {\n\t      // If required, apply truncation logic on traceState\n\t      const truncatedTraceState = this.getTruncatedTraceState();\n\t      if (truncatedTraceState != null) {\n            // write 2 bytes TraceState length\n            const traceStateLength = truncatedTraceState.length;\n            // convert to two bytes\n            const traceStateLengthBytes = new Uint16Array([traceStateLength]); // get 2 bytes of length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, traceStateLengthBytes, false);\n            offsetPos += 2; // move pointer to next free position\n\n            // set the remaining trace state bytes\n            const traceStateBytes = stringToUint8Array(truncatedTraceState);\n            for(let i = 0; i < traceStateBytes.length; i ++) {\n                // use BigEndian; litteEndian = false\n                contentBufferDataView.setUint8(offsetPos + i, traceStateBytes[i], false); // write the bytes\n            }\n            offsetPos += traceStateBytes.length;\n\t      }\n\t    }\n\n        // get the 8-byte array\n\t    return new Uint8Array(contentBuffer);\n    }\n\n    /**\n     * Truncate long trace states properly\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n     * @private\n     * @param {Number} maxTraceStateLength the maximum length for the trace state\n     * @returns {?String} The truncated trace state\n     */\n    _standardTraceStateTruncation(maxTraceStateLength) {\n        // cover corner cases\n\t    if (!this._traceState || this._traceState == null) {\n\t      return null;\n\t    } else if (this._traceState.length < maxTraceStateLength) {\n\t      return this._traceState; // no need to truncate\n\t    }\n\t\n        const ignoredMembers = new Array();\n\t    const traceStateBuilderArray = new Array();\n        let traceStateBuilderArrayLength = 0;\n\t    const listMembers = this._traceState.split(',');\n\n\t    for (let i = 0; i < listMembers.length; i++) {\n            let listMember = listMembers[i]; // current iteration object\n            if (listMember !== '' && listMember != null) {\n                let currentMemberLength = listMember.length;\n                if (currentMemberLength > 128) {\n                    // first of all, let's ignore members with length > 128 char\n                    ignoredMembers.push(listMember);\n                } else {\n                    let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                        traceStateBuilderArrayLength > 0 ? 1 : 0));\n\n                    if (newExpectedLength <= maxTraceStateLength) {\n                        // the comma seperator is added at the end when building the string\n                        traceStateBuilderArray.push(listMember);\n                        // increment by length of added member + 1 (for the comma)\n                        traceStateBuilderArrayLength += (currentMemberLength + (\n                            traceStateBuilderArrayLength > 0 ? 1 : 0));\n                    } else {\n                        ignoredMembers.push(listMember);\n                    }\n                }\n            }\n\t    }\n\t\n\t    // See if we can add the ignored members now\n\t    for (let i = 0; i < ignoredMembers.length; i++) {\n            let currentMember = ignoredMembers[i];\n            let currentMemberLength = currentMember.length;\n\n            let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                traceStateBuilderArrayLength > 0 ? 1 : 0));\n            if (newExpectedLength <= maxTraceStateLength) {\n                // the comma seperator is added at the end when building the string\n                traceStateBuilderArray.push(currentMember);\n                // increment by length of added member + 1 (for the comma)\n                traceStateBuilderArrayLength += (currentMemberLength + (\n                    traceStateBuilderArrayLength > 0 ? 1 : 0));\n            }\n\t    }\n\t\n        // build the string with comma seperating the members\n\t    return traceStateBuilderArray.join(',');\n\t}\n\n    /**\n     * Returns the string representation of this object\n     * \n     * @override\n     */\n    toString() {\n        return \"{traceId=\" + this.getTraceId()\n            + \", spanId=\" + this.getSpanId()\n            + \", sampled=\" + this.isSampled\n            + \", traceState=\" + ((this.traceState == null) ? \"}\" : \"'\" + this.traceState + \"'}\");\n    }\n}\n\nmodule.exports.TraceContext = TraceContext;\n","\nconst { LogFormatter } = require('solclient-log');\nconst { Baggage } = require('./baggage');\nconst { TraceContext } = require('./message-trace-context');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\n/**\n * @classdesc\n * <b>This class is used to enable the distributed tracing \n * support for variety of Solace message types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @internal\n */\nclass MessageTracingSupport {\n\n  /**\n   * Represents OpenTelementry Support for Solace Messages.\n   * The solace.Message class will extend this class.\n   * \n   * @constructor\n   * @hideconstructor\n   * @private\n   **/\n  constructor() {\n    // empty constructor\n  }\n\n  /**\n   * Retrieves a {@link TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    if(this._traceContextSetter == null || this._traceContextSetter == undefined) {\n      // create a new context setter object\n      this._traceContextSetter = new TraceContextSetter();\n    }\n    return this._traceContextSetter;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {?solace.TraceContext} Transport context object associated with this message\n   */\n  getTransportContext() {\n    return this._transportContext;\n  }\n  /**\n   * The transport context setter\n   * \n   * @param {TraceContextSetter} contextSetter \n   */\n  _setTransportContext(contextSetter) {\n    if(contextSetter != null) {\n      this._transportContext = new TraceContext(contextSetter);\n    }\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {?solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // if there is no creation context, use the context setter to create it\n    return this._creationContext;\n  }\n  /**\n   * It is created only once by the producer/publisher and cannot be\n   * changed by intermediaries\n   * @param {TraceContextSetter} contextSetter \n   */\n  _setCreationContext(contextSetter) {\n    // set the creation context only once\n    if(contextSetter != null) {\n      this._creationContext = new TraceContext(contextSetter);\n    }\n  }\n \n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {?solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    return this._baggage;\n  }\n  /**\n   * The internal setter for the baggage prop.\n   * \n   * @param {Baggage} value \n   */\n  _setBaggage(value) {\n    this._baggage = value;\n  }\n}\n\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageOutcome } = require('./lib/message-outcomes');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageOutcome = MessageOutcome;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicSequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(message /*, flags*/) {\n    return ['HTTP Content Type', (message.getHttpContentType() !== undefined && message.getHttpContentType() !== null),\n      message.getHttpContentType(), null];\n  },\n\n  fpHttpContentEncoding(message /*, flags*/) {\n    return ['HTTP Content Encoding', (message.getHttpContentEncoding() !== undefined && message.getHttpContentEncoding() !== null),\n      message.getHttpContentEncoding(), null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (typeof cacheRequestId === 'number') {\n      return ['Cache Request Id', true, cacheRequestId, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n\n\n  fpTracingCreationContext(message, flags) {\n    const _creationContext = message.getCreationContext();\n\n    const isPresent = (_creationContext != null\n      && _creationContext.getTraceId() != null\n      && _creationContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_creationContext != null) ? _creationContext.toString() : null;\n    }\n    return ['Tracing CreationContext', isPresent, detailValue, null];\n  },\n\n  fpTracingTransportContext(message, flags) {\n    const _transportContext = message.getTransportContext();\n\n    const isPresent = (_transportContext != null\n      && _transportContext.getTraceId() != null\n      && _transportContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_transportContext != null) ? _transportContext.toString() : null;\n    }\n    return ['Trace Context SMF Parameter', isPresent, detailValue, null];\n  },\n\n  fpTracingBaggage(message, flags) {\n    const isPresent = (message.getBaggage() != null\n      && message.getBaggage().getBaggage() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      const _baggage = message.getBaggage();\n      detailValue = (_baggage != null) ? _baggage.getBaggage() : null;\n    }\n    return ['Tracing Baggage', isPresent, detailValue, null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of supported message settlement outcomes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageOutcome = {\n  /**\n   * Represents a successful message processing acknowledgement outcome.\n   *\n   * (see {@link solace.Message#acknowledge}) for more details\n   */\n  ACCEPTED:         0,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n   * the message.\n   * \n   * Delivery count for the message is incremented. Redelivery will be attempted. Message may\n   * be moved to DMQ once max-redelivered is reached. Message may be delayed if the endpoint has\n   * delayed redelivery configured.\n   */\n  FAILED:           1,\n  // /**\n  //  * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n  //  * the message.\n  //  * \n  //  * Delivery count for the message is NOT incremented. Redelivery will be attempted. Message may\n  //  * be moved to DMQ once max-redelivered is reached. \n  //  * A released message will always be eligible for redelivery, even if redeliveries are disabled. \n  //  * Message is immediately eligible for redelivery, even if endpoint is configured for delayed redelivery.\n  //  */\n  // RELEASED:           2,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application has rejected the\n   * message such as when application determines the message is invalid.\n   * \n   * Message will NOT be redelivered. Message will be moved to DMQ. If DMQ is not configured,\n   * message is deleted.\n   */\n  REJECTED:         3,\n};\n\nmodule.exports.MessageOutcome = Enum.new(MessageOutcome);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const { clone } = require('solclient-util'); // using the modified local clone version\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageOutcome } = require('./message-outcomes');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\nconst { Baggage, MessageTracingSupport, TraceContext, TraceContextSetter } = require('solclient-message-tracing');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; // Makes the accessor throw, never returned to user.\n\n  // for tracing support\n  message._traceContextSetter = null;\n  message._creationContext = null;\n  message._transportContext = null;\n  message._baggage = new Baggage();\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * Function called to clear extended var-len message properties\n * @param {Message} message The message to update\n * @internal\n */\nfunction clearExtendedVarLenParameters(message) {\n  // clear the tracing support params since\n  // they use extended var-len encoding\n  message._transportContext = null;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n * @extends solace.MessageTracingSupport\n */\nclass Message extends MessageTracingSupport {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    super(); // call the tracing support constructor\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   * @default false\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   * @default MessageDeliveryModeType.DIRECT\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   * @default false\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /**\n   * Gets the Http Content Encoding\n   * @returns {?String} the http content encoding, if set.\n   */\n    getHttpContentEncoding() {\n      return this._httpContentEncoding;\n    }\n  \n    /**\n     * Sets the Http Content Encoding\n     * @param {String} value The http content encoding.\n     */\n    setHttpContentEncoding(value) {\n      this._httpContentEncoding = isStringOrNothing(\"httpContentEncoding\", value);\n      if (this._httpContentEncoding === \"\") {\n        delete this._httpContentEncoding;\n      }\n    }\n  \n    /**\n     * Gets the Http Content Type\n     * @returns {?String} the http content type, if set.\n     */\n     getHttpContentType() {\n      return this._httpContentType;\n    }\n  \n    /**\n     * Sets the Http Content Type\n     * @param {String} value The http content type.\n     */\n    setHttpContentType(value) {\n      this._httpContentType = isStringOrNothing('httpContentType', value);\n      if (this._httpContentType === \"\") {\n        delete this._httpContentType;\n      }\n    }\n    \n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   * @default 0\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {Number|undefined} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   *\n   * @returns {Number|undefined} The delivery count reported by the broker.\n   * @throws {solace.OperationError} if endpoint does not report delivery count (message is not persistent).\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n\n  /**\n   * Settles this message in a requested way.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {solace.MessageOutcome} messageSettlementOutcome type of the settlement outcome, not expected to be {@code null}\n   * @throws {@link solace.OperationError}\n   *  * if broker does not support the specified outcome option;\n   *  * if the flow was created without specifying required {@link MessageOutcome}\n   *    Options within the consumer properties;\n   *  * if the associated {@link solace.Session} is configured\n   *    to use SUPPORTED_MESSAGE_ACK_AUTO (the default behaviour),\n   *    the use of {@link MessageOutcome#REJECTED}\n   *    and {@link MessageOutcome#FAILED} are not supported;\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connected\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   *    @see {@link solace.MessageOutcome}for detailed explanation of available options\n   */\n  settle(messageSettlementOutcome) {\n    // implementation here\n    // validation checks here\n    if (this._acked) {\n      throw new OperationError('Message can only be settled once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot settle a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot settle a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot settle using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot settle using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application settled`);\n      return;\n    }\n\n    // validate the settlement outcome and send correct Enum value\n    const settlementOutcome = messageSettlementOutcome;\n    if (MessageOutcome.values.indexOf(settlementOutcome) === -1) {\n      throw new OperationError(`Settlement outcome for message must be valid`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // check that the broker consumer session has support for the outcome and \n    const doesConsumerSupportOutcome = this._consumer.getProperties().requiredSettlementOutcomes.some(v => v === settlementOutcome);\n    // that the session was created with support for the outcome\n    if (settlementOutcome != MessageOutcome.ACCEPTED && !doesConsumerSupportOutcome) {\n      throw new OperationError(`solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)} not supported for this Message Consumer`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // actual settlement logic\n    this._consumer.applicationSettle(this._guaranteedMsgId, settlementOutcome);\n    this._acked = true; // also set as ACKed/settled\n  }\n\n  /**\n   * Returns whether settle(solace.MessageOutcome) has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isSettled() {\n    return this._acked || false;\n  }\n\n  /**\n   * Internal validation checks before we attempt to acknowledge this message.\n   * @private\n   */\n  _validateBeforeAcknowledge() {\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n  }\n\n  /**\n   * Acknowledges this message.\n   * This is the same as calling {@link solace.Message#settle(solace.MessageOutcome.ACCEPTED)}.\n   * Internally uses Message.settle() with the ACCEPTED MessageOutcome.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application acknowledge`);\n      return;\n    }\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, false);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Used by the message-dispatcher to auto-acknowledge this message.\n   * @internal\n   */\n  _autoAcknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, true);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /*\n   * returns a compressed binary attachment\n   * Used internally on the encode path.\n   * @returns {Uint8Array} A compressed array based on the binaryAttachment\n   * @private\n   */\n  _getCompressedBinaryAttachment() {\n    return this._compressedBinaryAttachment;\n  }\n  \n  /*\n   * Sets the compressed attachment for the messsage \n   * based on the level that was set in payloadCompressionLevel\n   * Used internally on the encode path.\n   * @param {Uint8Array} value sets the compressed attachment\n   * @private \n   */\n  _setCompressedBinaryAttachment(value) {\n    this._compressedBinaryAttachment = value;\n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @returns {Boolean} value if the binary attachment was compressed\n   * @private \n   */\n  _getPayloadCompressed() {\n    return this._payloadCompressed; \n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @param {Boolean} \n   * @private \n  */\n  _setPayloadCompressed(value) {\n    this._payloadCompressed = value;\n  }\n\n  // Message Tracing Section\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    // return the parent method\n    return super.getTraceContextSetter();\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getCreationContext();\n  }\n \n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {solace.TraceContext} Transport context object associated with this message;\n   */\n  getTransportContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getTransportContext();\n  }\n\n  /**\n   * Set the transport context.\n   * Called when the message is received from broker\n   * \n   * @param {solace.TraceContextSetter} contextSetter \n   */\n  setTransportContext(contextSetter) {\n    // call the parent method.\n    super._setTransportContext(contextSetter);\n  }\n\n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    // returns the parent method baggage instance\n    // used for setting and retriving the baggage value \n    return super.getBaggage();\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n\n  /**\n   * Clears all extended var-len message properties on this message.\n   * The message no longer has any extended variable length\n   * properties set.\n   * \n   * @internal\n   */\n  clearExtendedVarLenParams() {\n    clearExtendedVarLenParameters(this);\n  }\n}\n\n/**\n * A standard property key that clients should use if they want to\n * group messages into different queue partitions.\n * Expected value is UTF-8 encoded up to 255 bytes long string.\n */\nMessage.SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY = 'JMSXGroupID';\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\nconst { EndpointNameComplaint, explainInvalidEndpointName } = require('./lib/endpoint-name-complaint');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\nmodule.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n// Enum name, regexp, enum value, TE applicable\nconst nameChecks = [\n  [\"EMPTY_STRING\", /^$/, \"Zero length\", true],\n  [\"LT\", /</, \"Less than sign (<)\", true],\n  [\"GT\", />/, \"Greater than sign (>)\", true],\n  [\"ASTERISK\", /\\*/, \"Asterisk (*)\", true],\n  [\"QUESTION_MARK\", /\\?/, \"Question mark (?)\", true],\n  [\"AMPERSAND\", /&/, \"Ampersand (&)\", true],\n  [\"SEMICOLON\", /;/, \"Semicolon (;)\", true],\n  [\"LEADING_SLASH\", /^\\//, \"Starts with a slash (/).\", false],\n  [\"TRAILING_SLASH\", /\\/$/, \"Ends with a slash (/).\", false],\n  [\"DOUBLE_SLASH\", /\\/\\//, \"Empty level (//)\", false],\n  [\"TOO_LONG\", /.{200,}/, \"Longer than 200 characters\", true],\n  //[\"NO_ISSUE\", undefined, \"\"]\n];\n\n/**\n * The most frequent problems with endpoint names.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst EndpointNameComplaint = {\n  EMPTY_STRING: \"Zero length\",\n  LT: \"Less than sign (<)\",\n  GT: \"Greater than sign (>)\",\n  ASTERISK: \"Asterisk (*)\",\n  QUESTION_MARK: \"Question mark (?)\",\n  AMPERSAND: \"Ampersand (&)\",\n  SEMICOLON: \"Semicolon (;)\",\n  LEADING_SLASH: \"Starts with a slash (/).\",\n  TRAILING_SLASH: \"Ends with a slash (/).\",\n  DOUBLE_SLASH: \"Empty level (//)\",\n  TOO_LONG: \"Longer than 200 characters\",\n  NO_ISSUE: \"\"\n};\n\n//This should work, but the typescript generator doesn't like it.\n/*\nconst EndpointNameComplaint = {};\nnameChecks.forEach((triplet)=>{\n  EndpointNameComplaint[triplet[0]] = triplet[2];\n})\n*/\n\nfunction explainInvalidEndpointName(name, isTE) {\n  //complaints are ordered by probability\n  for (i in nameChecks) {\n    const triplet = nameChecks[i];\n    if (isTE && !triplet[3]) {\n      // Slash-related issues are queue only, so those rules are marked \"false\" in the check list.\n      continue;\n    }\n    if (name.match(triplet[1])) {\n      return triplet[2];\n    }\n  }\n  // This is an empty string because it's falsy.\n  return EndpointNameComplaint.NO_ISSUE;\n} \t\n\nmodule.exports.EndpointNameComplaint = Enum.new(EndpointNameComplaint);\n//module.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} [queueSpec.name=null] The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName() || ''}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object, or to {@link solace.Session#provisionEndpoint} .\n * Upon creation of a queue or TE, undefined\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : undefined,\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n * @private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  sdtstream.rewind();\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  sdtstream.rewind();\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { ProvisionEvent } = require('./lib/provision-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.ProvisionEvent = ProvisionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   * @deprecated since broker v9.10.0.12\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n  /**\n   * Support for ApplicationAck optional outcomes \"failed\" and \"rejected\".\n   */\n  AD_APP_ACK_FAILED:            30,\n  /**\n   * Broker supports variable-length SMF extended parameters.\n   */\n  VAR_LEN_EXT_PARAM:            31,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n  /**\n   * Indicates whether a client supports Partitioned Queues\n   * and whether a PartitionGroupId will be proccessed in a BindResponse message.\n   * Always true\n   * \n   * @since 10.12.0\n   */\n   PQ: 2,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n      // Assuming NACKs until proven otherwise (we have code to handle it missing on reconnect):\n      [CapabilityType.AD_APP_ACK_FAILED]: true,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    // call this to initialize the _mutableState property\n    this.reset(); \n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      // finished DNS resolution checks\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","const { SessionEvent } = require('./session-event');\n\nclass ProvisionEvent extends SessionEvent {\n  /**\n   * @constructor\n   * @param {solace.SessionEventCode} sessionEventCode The event code\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @param {QueueDescriptor} queueDescriptor Endpoint name and type as returned by the broker\n   * @param {QueueProperties} queueProperties Endpoint proerties as returned by the broker\n   * @private\n   */\n  constructor(\n      sessionEventCode,\n      infoStr,\n      responseCode = undefined,\n      errorSubcode = 0,\n      correlationKey = undefined,\n      reason = undefined,\n      queueDescriptor = null,\n      queueProperties = null) {\n  super([], sessionEventCode, infoStr, responseCode, errorSubcode, correlationKey, reason );\n  this._queueDescriptor = queueDescriptor;\n  this._queueProperties = queueProperties;\n  }\n\n\n  /**\n   * @type {QueueDescriptor}\n   * @description The endpoint name and type as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Durability is not set.\n   * Mostly relevant when the endpoint name was not provided in the provision call.\n   * @default null\n   */\n  get queueDescriptor() {\n    return this._queueDescriptor;\n  }\n\n  /**\n   * @internal\n   */\n  set queueDescriptor(value) {\n    this._queueDescriptor = value;\n  }\n\n  /**\n   * @type {QueueProperties}\n   * @description The endpoint properties as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Mostly relevant in case of an ENDPOINT_PROPERTY_MISMATCH provision error.\n   * @default null\n   */\n  get queueProperties() {\n    return this._queueProperties;\n  }\n\n  /**\n   * @internal\n   */\n  set queueProperties(value) {\n    this._queueProperties = value;\n  }\n  \n  [util_inspect_custom]() {\n    const result = super[util_inspect_custom]();\n    result.queueDescriptor = this._queueDescriptor;\n    result.queueProperties = this._queueProperties;\n    return result;\n  }\n\n}\n\nmodule.exports.ProvisionEvent = ProvisionEvent;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n  /**\n   * The provision or deprovision operation failed.\n   * @event solace.SessionEventCode#PROVISION_ERROR\n   * @param {solace.SessionEvent} error The details related to the failed provision/deprovison operation.\n   */\n  PROVISION_ERROR:                    30,\n  /**\n   * The provision or deprovision operation succeeded.\n   * @event solace.SessionEventCode#PROVISION_OK\n   * @param {solace.SessionEvent} event The details related to the successful provision or deprovision operation.\n   */\n  PROVISION_OK:                     31,\n\n  \n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     * @default null\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageOutcome,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\n\nconst {\n  anythingToBuffer,\n} = Convert;\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\nconst zlib = require('zlib');\nconst fflate = require('fflate');\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this); // this._transport == null at this point \n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n\n    const { LOG_WARN } = this.logger;\n\n    // check for whether the broker session supports the capabilities\n    const settlementOutcomes = consumerProperties.requiredSettlementOutcomes;\n    if (settlementOutcomes && settlementOutcomes.length > 0) {\n      // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n      const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n      if(isNackRequired && !this._session.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n        const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n          settlementOutcomes.map(v => `solace.MessageOutcome.${MessageOutcome.nameOf(v)}`).join(', ')\n        } ]`;\n        // log the operation error as a Warning\n        LOG_WARN(outcomeNotSupportedError);\n        // then throw the error here\n        throw new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION, null);\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n         // console.log('ADCTRL message:');\n         // console.log(message);\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      let result = false;\n      if(this._correlatedReqs) {\n        result = delete this._correlatedReqs[correlationTag];\n      }\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    const {LOG_WARN, LOG_DEBUG} = this.logger\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      // compress payload if session property is enabled\n      if (this._sessionProperties.payloadCompressionLevel > 0 && ((Check.anything(message._binaryAttachment) && message._binaryAttachment.length > 0) || Check.anything(message._structuredContainer)) ){\n        let compressedAttachment;\n        let origSize = 0;\n        try {\n          if (BUILD_ENV.TARGET_NODE){\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: zlib.constants.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              // const encodedContainer = SDTCodec.encodeSingleElement(message._structuredContainer);\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n              origSize = encodedContainer.length;\n              compressedAttachment = zlib.deflateSync(encodedContainer, options);\n\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = zlib.deflateSync(message._binaryAttachment, options);\n            }\n          } else { //browser\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: fflate.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n\n              const textEncoded = anythingToBuffer(encodedContainer);\n              origSize = textEncoded.length;\n              compressedAttachment = fflate.zlibSync(textEncoded, options);\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = fflate.zlibSync(message._binaryAttachment, options);\n            }\n            compressedAttachment = anythingToBuffer(compressedAttachment);\n          }\n          \n          // This does not consider the size growth from adding \"deflate\" to the ce.\n          // If there alread was a ce: \", deflate\".length = 9 bytes.\n          // If there was no ce but there already was something else in the header map: 15 bytes.\n          // If there was nothing in the header map nor the user property map: 47 bytes.\n          // (use testContext.m_session.getStat(solace.StatType.TX_TOTAL_DATA_BYTES) in a test to \t)\n          if (compressedAttachment.length + 9 < origSize) {\n            message._setCompressedBinaryAttachment(compressedAttachment);\n            Check.nothing(message.getHttpContentEncoding()) ? message._compressedCE = \"deflate\" : message._compressedCE = message.getHttpContentEncoding() + \", deflate\";\n          } else {\n            // It would be nice to cache the encodedContainer instead of re-encoding it right away.\n            LOG_DEBUG(\"Not compressing because it grows the payload! \"+ origSize + \" -> \"+ compressedAttachment.length + \"+ 9\");\n          }\n        } catch(err) {\n          // if error occurred when compressing pass the normal binary attachment\n          LOG_WARN(\"Error occurred while compressing, message attachment was not compressed. Original attachment will be sent. \", err);\n        }\n      }\n    \n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n      // Clear internal-use field to free up memory and allow message object reuse by client code.\n      if (Check.anything(message._getCompressedBinaryAttachment())){\n        message._setCompressedBinaryAttachment();\n      }\n      delete message._compressedCE;\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    \n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisited.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    //const DebugLib = require('solclient-debug');\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    //console.log(\"content:\");\n    //console.log(DebugLib.Debug.formatDumpBytes( content.toString('latin1'), true, 2));\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  provisionEndpoint(queueDescriptior, queueProperties, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getCreate(queueDescriptior, queueProperties, correlationTag);\n    LOG_DEBUG(\"Sending CREATE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Provision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for CREATE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  deprovisionEndpoint(queueDescriptior, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getDelete(queueDescriptior, correlationTag);\n    LOG_DEBUG(\"Sending DELETE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Deprovision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for DELETE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     force,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg, undefined, force);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          force,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg, undefined, force);\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\n// Works on an array, not an enum. Not very consistent, but it's what I need just now.\nfunction valIsMemberIgnoreCase(typeDesc, instance, key, arr, enumName, allowFalsy) {\n  const val = instance[key];\n  if (allowFalsy && !val ) return;\n  if (typeof (val) !== 'undefined' && !arr.some(v => v.toLowerCase() === val.toLowerCase())) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n    v('payloadCompressionLevel', [valNumber], [valRange, 0, 9]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('tlsMinProtocol', [valString], [valIsMemberIgnoreCase, SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS, \"SUPPORTED_SSL_PROTOCOLS\" , true]);\n      v('tlsMaxProtocol', [valString], [valIsMemberIgnoreCase, SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS, \"SUPPORTED_SSL_PROTOCOLS\" , true]);\n\n      if (props.tlsMinProtocol && props.tlsMaxProtocol) {\n        const minIndex = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS.indexOf(props.tlsMinProtocol.toLowerCase())\n        const maxIndex = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS.indexOf(props.tlsMaxProtocol.toLowerCase())\n        if (minIndex > maxIndex) {\n          throw new OperationError(`SessionProperties validation: Property 'tlsMinProtocol' ` +\n                                   `cannot be higher than 'tlsMaxProtocol'.`,\n                                   ErrorSubcode.PARAMETER_CONFLICT);\n        }\n      }\n\n      if (props.sslExcludedProtocols && (props.tlsMinProtocol || props.tlsMaxProtocol)) {\n        throw new OperationError(\"SessionProperties validation: Can't mix deprecated 'sslExcludedProtocols' \"+\n                                 \"with 'tlsMinProtocol' and 'tlsMaxProtocol'.\",\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n    _payloadCompressionLevel:   0,\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n  'tlsv1.3',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @default null\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @default null\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description Deprecated, use {@link solace.SessionProperties#tlsMinProtocol} and {@link solace.SessionProperties#tlsMaxProtocol} instead.\n   * @default null\n   * @target node\n   * @deprecated\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#tlsMinProtocol\n   * @type {String}\n   * @description The oldest TLS version to accept when connecting to the broker.\n   * Allowed values are: TLSv1.1, TLSv1.2, TLSv1.3\n   * @default \"TLSv1.2\"\n   * @target node\n   */\n  get tlsMinProtocol() {\n    return Check.nothing(this._tlsMinProtocol) ? '' : this._tlsMinProtocol;\n  }\n  set tlsMinProtocol(newValue) {\n    this._tlsMinProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#tlsMaxProtocol\n   * @type {String}\n   * @description The newest TLS version to negtiate when connecting to the broker.\n   * Allowed values are: TLSv1.1, TLSv1.2, TLSv1.3\n   * @default null\n   * @target node\n   */\n  get tlsMaxProtocol() {\n    return Check.nothing(this._tlsMaxProtocol) ? '' : this._tlsMaxProtocol;\n  }\n  set tlsMaxProtocol(newValue) {\n    this._tlsMaxProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections using TLSv1.2 or older. Ignored when TLSv1.3 is negotiated.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'tlsMinProtocol':           this.tlsMinProtocol,\n      'tlsMaxProtocol':           this.tlsMaxProtocol,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   * @default undefined\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  // ================== PAYLOAD COMPRESSION ========================\n  /**\n   * @name solace.SessionProperties#payloadCompressionLevel\n   * @type {Number}\n   * @description Valid values for the payload compression level to be applied to the payload of a message published by a client are 0-9.\n   * <p> Value meanings: </p>\n   * <ul>\n   * <li> 0 - disable payload compression (the default) </li>\n   * <li> 1 - lowest CPU impact </li>\n   * <li> 9 - highest compression </li>\n   * </ul>\n   * Values 1-9 are passed straight to zlib, 0 disables the payload compression feature on outgoing messages.\n   * No impact on payload-compressed incoming messages. \n   * <p>\n   * Default: 0\n   * </p>\n   * @default 0\n   */\n  get payloadCompressionLevel(){\n    return Check.nothing(this._payloadCompressionLevel)? 0 : this._payloadCompressionLevel;\n  }\n  set payloadCompressionLevel(newValue){\n    this._payloadCompressionLevel = newValue;\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n      'payloadCompressionLevel':          this.payloadCompressionLevel\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for pre-TLSv1.3 TLS connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using pre-TLSv1.3 TLS connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using TLS connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n    ['tlsv1.3']: 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        NotImplementedError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor, QueueProperties, QueuePropertiesValidator,\n        QueueType, explainInvalidEndpointName } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { ProvisionEvent } = require('./provision-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n * @fires solace.SessionEventCode#PROVISION_OK\n * @fires solace.SessionEventCode#PROVISION_ERROR\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      false, //observe socket buffer size constraint, return NO_SPACE if full.\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send unsubscribe request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send unsubscribe request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              // TODO: handle transport error?\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  true, // force beyond socket buffer limit because there's no error handling\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n              // TODO: handle transport error?\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    true, // force beyond socket buffer limit because there's no error handling\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n              // TODO: handle transport error?\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              true, // force beyond socket buffer limit because there's no error handling\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n\n    // check to see if we can send variable length params to the broker\n    if (!this.isCapable(CapabilityType.VAR_LEN_EXT_PARAM)) {\n      LOG_TRACE('Broker session does not support VAR LEN SMF extended parameters');\n      // clear these message properties since var-len extended\n      // properties not supported on broker\n      message.clearExtendedVarLenParams();\n\n      // throw error if these extended var-length message properties are set\n      if(this._failOnExtendedVariableLengthProperties(message)) {\n        throw new OperationError(\n          'Broker does not support variable length SMF extended parameters',\n          ErrorSubcode.INVALID_OPERATION);\n      }\n    }\n    this.validateAndSendMessage(message);\n  }\n\n  _failOnExtendedVariableLengthProperties(message) {\n    return false; // return false since no properties for now\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   *\n   * <p>The API fills in the correlationId and replyTo fields in the request when they are not preset by the application.\n   * This is the preferred use case to ensure replies are directed back to the correct requester.</p>\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n \n  /**\n   * Provisons a queue or topic endpoint on the broker without binding a flow or adding a subscription.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Only durable endpoints supported currently.\n   * @param {solace.QueueProperties} queueProperties Optional, in-out parameter.\n   *  In: Properties of the Queue/TE to be created. Empty or undefined fields are left to broker defaults.\n   *  Out (on PROVISION_OK, not on function return): Properties of the endpoint as created.\n   * @param {boolean} ignoreExists Makes the operation idempotent if true, by ignoring \"endpoint already exists\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  provisionEndpoint(queueDescriptor, queueProperties, ignoreExists, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreExists', ignoreExists);\n    Parameter.isInstanceOf('queueDescriptor', queueDescriptor, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueDescriptor must be supplied, can't be \"+queueDescriptor);\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"provisionEndpoint only works on named endpoints\");\n    // Cloning to apply the durable:true default.\n    const queueDescriptor2 = new QueueDescriptor(queueDescriptor);\n    if (!queueDescriptor2.durable) {\n      throw new NotImplementedError('provisionEndpoint() only works for durable endpoints.');\n      //console.log(\"Temporarily allowing durable Create.\");\n    }\n    if (queueProperties) {\n      Parameter.isInstanceOfOrNothing('queueProperties', queueProperties, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueProperties must be an object, ideally a solace.QueueProperties instance. Can't be \"+queueProperties);\n      QueuePropertiesValidator.validate(queueProperties);\n    }\n    const callback = this.handleProvisionResponse.bind(this, ignoreExists, true);\n    return this._sessionFSM.provisionEndpoint(queueDescriptor2, queueProperties, correlationKey, callback);\n\n\n  }\n\n  /**\n   * Deprovisons a queue or topic endpoint on the broker.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Durability is ignored.\n   * @param {boolean} ignoreMisssing Makes the operation idempotent if true, by ignoring \"endpoint doesn't exist\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  deprovisionEndpoint(queueDescriptor, ignoreMissing, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreMissing', ignoreMissing);\n    if (!(queueDescriptor instanceof Object)) {\n      throw new OperationError('queueDesscriptor object required', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"deprovisionEndpoint only works on named endpoints\");\n\n    // Leaving the last two parameters, the SMF response object and the CorrelatedRequest, unbound.\n    const callback = this.handleProvisionResponse.bind(this, ignoreMissing, false);\n\n    return this._sessionFSM.deprovisionEndpoint(queueDescriptor, correlationKey, callback);\n\n  }\n\n  /**\n   * Internal callback for provision/deprovision response handling.\n   * @param {solace.QueueProperties} queueProperties to update from the response (provision only)\n   * @param {boolean} ignore ignoreMissing or ignoreExists was set.\n   * @param {boolean} provision true for provision, false for deprovision.\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleProvisionResponse(ignore, provision, msg, request) {\n    const {correlationKey} = request;\n    const responseCode = msg._smfHeader.pm_respcode;\n    const responseString = msg._smfHeader.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);   \n    const queueDescriptor = new QueueDescriptor();\n    queueDescriptor.durable = undefined;\n    const queueProperties = new QueueProperties();\n    const { DestinationUtil } = DestinationLib;\n\n    if (msg.getQueueNameBytes() && msg.getQueueNameBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getQueueNameBytes()); \n      queueDescriptor.type = QueueType.QUEUE;\n    } else if (msg.getTopicEndpointBytes() && msg.getTopicEndpointBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getTopicEndpointBytes()); \n      queueDescriptor.type = QueueType.TOPIC_ENDPOINT;\n    } else {\n      queueDescriptor.name =  undefined;\n      queueDescriptor.type = undefined;\n    }\n\n    queueDescriptor.durable = msg.getDurability();\n    queueProperties.accessType = msg.getAccessType();\n    queueProperties.discardBehavior = msg.getQueueDiscardBehavior();\n    queueProperties.maxMessageRedelivery = msg.getMaxRedelivery();\n    queueProperties.maxMessageSize = msg.getMaxMsgSize();\n    queueProperties.permissions = msg.getAllOthersPermissions();\n    queueProperties.quotaMB = msg.getQuota();\n    queueProperties.respectsTTL = msg.getRespectsTTL();\n\n    let reason = null;\n    if ((responseCode === 400) && (errorSubcode === ErrorSubcode.INVALID_QUEUE_NAME || errorSubcode === ErrorSubcode.INVALID_TE_NAME)) {\n      reason = explainInvalidEndpointName(queueDescriptor.name);\n    }\n\n\n    let outcome = SessionEventCode.PROVISION_ERROR;\n    if (responseCode === 200) {\n      outcome = SessionEventCode.PROVISION_OK;\n    } else {\n      if (ignore && provision && errorSubcode == ErrorSubcode.ENDPOINT_ALREADY_EXISTS)  {\n        outcome = SessionEventCode.PROVISION_OK;\n      } else if (ignore && !provision && (errorSubcode == ErrorSubcode.UNKNOWN_QUEUE_NAME || errorSubcode == ErrorSubcode.UNKNOWN_TOPIC_ENDPOINT_NAME) ) {\n        outcome = SessionEventCode.PROVISION_OK;\n      }\n    }\n\n    const provisionEvent = new ProvisionEvent(outcome,\n        responseString,\n        responseCode,\n        errorSubcode,\n        correlationKey,\n        reason,\n        queueDescriptor,\n        queueProperties);\n    this.sendEvent(provisionEvent);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max, outcome = undefined) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  const paramLength = (outcome == undefined || outcome === 0) ? 18 : 19;\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(paramLength)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  if(outcome != undefined && outcome > 0) { // skip for MessageOutcome.ACCEPTED\n    data.push(Convert.int8ToStr(outcome)); // write the settlement outcome\n  }\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n      case SMFLib.SMFAdProtocolParam.PARTITION_GROUP_ID:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue(); // this is the Map() of all settlement ACK/NACK ranges\n          const uh = param.getUh();\n          const type = param.getType();\n          // iterate through the Map of ranges per settlement outcome\n          ranges.forEach((settlementRanges, outcome) => {\n            for (let i = 0; i < settlementRanges.length; ++i) {\n              const range = settlementRanges[i];\n              paramspace.push(encAdp64AckPairParam(uh,\n                                                   type,\n                                                   range[0],\n                                                   range[1],\n                                                   outcome));\n            }\n          });\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst { Baggage, TraceContextSetter } = require('solclient-message-tracing');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long, Convert: { stringToUint8Array, anythingToBuffer } } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\nconst zlib = require('zlib');\nconst fflate = require('fflate');\nconst { Check } = require('solclient-validate');\n\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR,\n        LOG_WARN } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    let preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x40) !== 0){\n      message._setPayloadCompressed(preambleByte0);\n    }\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      const ce = headerMap.getField('ce');\n      const ct = headerMap.getField('ct');\n\n      const bag = headerMap.getField('bag'); // get the baggage field\n      const ctx = headerMap.getField('ctx'); // the message creation context field\n\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n      if (ce) {\n        message.setHttpContentEncoding(ce.getValue());\n      }\n      if (ct) {\n        message.setHttpContentType(ct.getValue());\n      }\n      if (bag) {\n        // set the baggage\n        const _baggageObj = new Baggage();\n        _baggageObj.setBaggage(bag.getValue());\n        message._setBaggage(_baggageObj);\n      }\n      if (ctx) {\n        // create a context setter from the bytes or string depending on the active profile\n        const _traceContextSetter = TraceContextSetter.fromTraceContext(ctx.getValue());\n         // use it to set the message creation context, can be null\n        message._setCreationContext(_traceContextSetter);\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // set the trace span transport context for the message if present\n  if (smfHeader.pm_ts_transport_context) {\n    // create a context setter from the bytes\n    const _traceContextSetter = TraceContextSetter.fromTraceContext(smfHeader.pm_ts_transport_context);\n    // use it to create the transport context\n    message._setTransportContext(_traceContextSetter);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n  // uncompress message\n  if(message._getPayloadCompressed() && Check.anything(message.getHttpContentEncoding())){\n    if (message.getHttpContentEncoding().endsWith('deflate')){\n        try {\n          let inflatedAttachment;\n          if (BUILD_ENV.TARGET_NODE) {\n            inflatedAttachment = zlib.inflateSync(message._binaryAttachment);\n          } else {\n            inflatedAttachment = fflate.unzlibSync( message._binaryAttachment);\n            inflatedAttachment = anythingToBuffer(inflatedAttachment);\n          }\n          message._setBinaryAttachment(inflatedAttachment);\n          message._setPayloadCompressed(null);\n\n          // Popping \"deflate\" off the end of the content encoding list.\n          if (message.getHttpContentEncoding().trim() === \"deflate\") {\n            delete message._httpContentEncoding;\n          } else {\n            let newCE = message.getHttpContentEncoding().slice(0, 0-\"deflate\".length).trimRight()\n              if (newCE.endsWith(\",\")) {\n                newCE = newCE.slice(0, -1);\n                message.setHttpContentEncoding(newCE);\n              } else {\n                delete message._httpContentEncoding;\n\t      }\n          }\n        } catch(err){\n          LOG_WARN(\"Message payload was not decompressed, there was an error. Leaving the message body compressed \", err)\n          //LOG_WARN(message.dump());\n          message._messageType = SolclientMessageLib.MessageType.BINARY;\n        }\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n  uint8ArrayToString,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n  FORCED_LENGTH_MODE,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n  addToMapIfPresent(headerMap, 'ce', SDTFieldType.STRING, message._compressedCE ? message._compressedCE : message.getHttpContentEncoding());\n  addToMapIfPresent(headerMap, 'ct', SDTFieldType.STRING, message.getHttpContentType());\n\n  // the baggage value in the correct format. See - https://www.w3.org/TR/baggage/\n  const _baggage = message.getBaggage();\n  addToMapIfPresent(headerMap, 'bag', SDTFieldType.STRING, (_baggage ? _baggage.getBaggage() : null));\n  // message creation context will never be null\n  // set the encoded bytes into the map\n  const _creationContext = message.getCreationContext();\n  addToMapIfPresent(\n    headerMap, 'ctx', SDTFieldType.BYTEARRAY,\n    (_creationContext ? _creationContext.getEncodedTraceContext() : null)\n  );\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n\n  if (Check.anything(message._getCompressedBinaryAttachment())){\n    preambleByte0 |= 0x40;\n  }\n  \n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      }\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  // get the transport context, if available\n  const _transportContext = message.getTransportContext();\n  if(_transportContext != null) {\n    // set the encoded Uint8 array into the header property\n    smfHeader.pm_ts_transport_context = _transportContext.getEncodedTraceContext();\n  }\n  \n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      message.getCreationContext() ||\n      message._compressedCE ||\n      message.getHttpContentEncoding() ||\n      message.getHttpContentType() ||\n      (message.getBaggage() && message.getBaggage().getBaggage()) ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    if (Check.anything(message._getCompressedBinaryAttachment())){\n      addContentElementToArrays(csumm, payload, \n        message._getCompressedBinaryAttachment().toString('latin1'), ContentSummaryType.BINARY_ATTACHMENT);\n    } else {\n      addContentElementToArrays(csumm, payload,\n        message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n    }\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_ts_transport_context) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.TS_TRANSPORT_CONTEXT,\n                                                     uint8ArrayToString(header.pm_ts_transport_context),\n                                                     FORCED_LENGTH_MODE.SIX);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.FORCED_LENGTH_MODE = {\n  FIVE:  5,\n  SIX:   6\n};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value, forcedLengthMode = -1) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n\n  // prevent unsupported value from breaking default behaviour\n  if(forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) {\n    forcedLengthMode = -1;\n  }\n\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (\n    ((length < 253) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.FIVE)\n  ) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (\n    ((length < 256 * 256 - 4) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.SIX)\n  ) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      case SMFExtendedParameterType.TS_TRANSPORT_CONTEXT:\n        // from specs, trace span context must be at least 36 bytes\n        // use 36 - 4 (account for error in 2-byte variable length value calculation above) = 32\n        if(valueLen >= 32) {\n          // will convert this string to a UInt8Array later\n          smfHeader.pm_ts_transport_context = dataBuf.toString('latin1', pos, pos + valueLen);\n        } else {\n          LOG_TRACE('Skipped due to unexpected size of extended parameter ' +\n                    `type ${type} value length ${valueLen} offset ${pos}`);\n        }\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          // this is some kind of AD publisher ID in a direct message, but it's ony 4 bytes.\n          // It's of no use to us and is not exposed publicly.\n          // Skip.\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { MessageOutcome } = require('solclient-message');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DUARBILITY_INT_TO_BOOL = {\n  1: true,  // durable\n  2: false, // non-durable guaranteed\n  3: false  // non-durable reliable\n}\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} Durability (durable vs non-durable), if present\n   */\n  getDurability() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_DURABLE, strToInt8, bUInt8);\n    if (param === 3) {\n      LOG_INFO(\"Non durable reliable queue. This does not happen often.\");\n    }\n    return DUARBILITY_INT_TO_BOOL[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated topic endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated queue name\n   */\n  getQueueNameBytes() {\n    return this._readParameter(SMFAdProtocolParam.QUEUENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The partitionGroupId, if present\n   */\n  getPartitionGroupId() {\n    return this._readParameter(SMFAdProtocolParam.PARTITION_GROUP_ID,\n                               strToInt16, bUInt16BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      (queueDescriptor.durable ? 1 : 2) // Durable vs Non-Durable-Guaranteed\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Creates a DELETE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request, ignoring durability\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getDelete(\n    queueDescriptor,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.DELETE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   *  @param {Long} [partitionGroupId=undefined] Partition Group ID for support of\n   *          Partition Queue feature, associate new flow with the same\n   *          PartitionGroupId as an old flow (e.g due to a reconnect).\n   * @param {Boolean} [hasNackSupport=false] If true, flow is created with Consumer Redelivery\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined,\n                                partitionGroupId = undefined,\n                                hasNackSupport = false) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    /**\n     * A Flow that has Browser support cannot have NACK support \n     */\n    if (hasNackSupport /* is true */) {\n      // [AssuredCtrl FlowType Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x3 // create flow with Consumer Redelivery support\n      ));\n    } else if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2 // create flow with browser support\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    // support for PartitionGroupId. Only send when not null and undefined\n    if (partitionGroupId !== undefined && partitionGroupId !== null) {\n      // [AssuredCtrl PartitionGroupId Parameter]    ***\n      LOG_TRACE(`Adding partitionGroupId to message: ${partitionGroupId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.PARTITION_GROUP_ID,\n        partitionGroupId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Map.<Array.<Array.<Long>>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `Map.set( MessageOutcome.ACCEPTED, [ [singleMessageId, singleMessageId] ] )`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && (applicationAckRanges.size > 0)) {\n      // aggregate the total length of the ack/nack ranges\n      let totalRangeLen  = 0;\n      const allOutcomes = MessageOutcome.values;\n      for(let i = 0; i < allOutcomes.length; i ++) {\n        totalRangeLen += applicationAckRanges.has(allOutcomes[i]) ? applicationAckRanges.get(allOutcomes[i]).length : 0;\n      }\n\n      if (totalRangeLen > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n  CapabilityType.AD_APP_ACK_FAILED,\n  CapabilityType.VAR_LEN_EXT_PARAM,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n  [ClientCapabilityType.PQ, 0x20],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID, ClientCapabilityType.PQ]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n    this.pm_ts_transport_context = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n  PARTITION_GROUP_ID:                      0x38,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n  PARTITION_KEY_HASH:       0x35, // @Todo: not yet implemented as improvement for PQ\n  TS_TRANSPORT_CONTEXT:     0x36,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n  /**\n   * Count of received persistent and non-persistent messages that were rejected.\n   */\n  RX_SETTLE_REJECTED:       44,\n  /**\n   * Count of received persistent and non-persistent messages that were failed.\n   */\n  RX_SETTLE_FAILED:         45,\n  /**\n   * Count of received persistent and non-persistent messages that were accepted manually (no auto-acks).\n   */\n  RX_SETTLE_ACCEPTED:       46,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    // added check to prevent it returning as undefined/null\n    return this._correlationCounter ? this._correlationCounter : 0;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  // Got rid of the inconsequential ifs for old IE versions in 2024 (again?)\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code, to be overridden in subclass\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n    LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n    if (this._transportSession) {\n      this._transportSession._socket._sender._socket.destroy(new Error(errorMsg));\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\nconst clone = require('./lib/clone');\n\nmodule.exports = {\n  clone,\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('./clone'); // using the modified local clone version\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","/* Any copyright is dedicated to the Public Domain.\n * http://creativecommons.org/publicdomain/zero/1.0/ */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-labels */\n/* eslint-env browser */\nmodule.exports = function (scope) {\n  // feature detect for URL constructor\n  let hasWorkingUrl = false;\n  if (!scope.forceJURL) {\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      hasWorkingUrl = u.href === 'http://a/c%20d';\n    } catch (e) {\n      // no problem\n    }\n  }\n\n  if (hasWorkingUrl) {\n    return;\n  }\n\n  // Otherwise the keys get minified.\n  /* eslint-disable dot-notation */\n  const relative = Object.create(null);\n  relative['ftp'] = 21;\n  relative['file'] = 0;\n  relative['gopher'] = 70;\n  relative['http'] = 80;\n  relative['https'] = 443;\n  relative['ws'] = 80;\n  relative['wss'] = 443;\n  /* eslint-enable dot-notation */\n\n  const relativePathDotMapping = Object.create(null);\n  relativePathDotMapping['%2e'] = '.';\n  relativePathDotMapping['.%2e'] = '..';\n  relativePathDotMapping['%2e.'] = '..';\n  relativePathDotMapping['%2e%2e'] = '..';\n\n  function clear() {\n    this._scheme = '';\n    this._schemeData = '';\n    this._username = '';\n    this._password = null;\n    this._host = '';\n    this._port = '';\n    this._path = [];\n    this._query = '';\n    this._fragment = '';\n    this._isInvalid = false;\n    this._isRelative = false;\n  }\n\n  function isRelativeScheme(scheme) {\n    return relative[scheme] !== undefined;\n  }\n\n  function invalid() {\n    clear.call(this);\n    this._isInvalid = true;\n  }\n\n  function IDNAToASCII(h) {\n    if (h === '') {\n      invalid.call(this);\n    }\n    // TODO: more robust\n    return h.toLowerCase();\n  }\n\n  function percentEscape(c) {\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ? `\n       [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  function percentEscapeQuery(c) {\n    // TODO: This actually needs to encode c using encoding and then\n    // convert the bytes one-by-one.\n\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ` (do not escape '?')\n       [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  let EOF;\n  const ALPHA = /[a-zA-Z]/;\n  const ALPHANUMERIC = /[a-zA-Z0-9+\\-.]/;\n\n  function parse(input, stateOverride, base) {\n    const errors = [];\n    function err(message) {\n      errors.push(message);\n    }\n\n    let state = stateOverride || 'scheme start';\n    let cursor = 0;\n    let buffer = '';\n    let seenAt = false;\n    let seenBracket = false;\n\n    loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {\n      const c = input[cursor];\n      switch (state) {\n        case 'scheme start':\n          if (c && ALPHA.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n            state = 'scheme';\n          } else if (!stateOverride) {\n            buffer = '';\n            state = 'no scheme';\n            continue;\n          } else {\n            err('Invalid scheme.');\n            break loop;\n          }\n          break;\n\n        case 'scheme':\n          if (c && ALPHANUMERIC.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n          } else if (c === ':') {\n            this._scheme = buffer;\n            buffer = '';\n            if (stateOverride) {\n              break loop;\n            }\n            if (isRelativeScheme(this._scheme)) {\n              this._isRelative = true;\n            }\n            if (this._scheme === 'file') {\n              state = 'relative';\n            } else if (this._isRelative && base && base._scheme === this._scheme) {\n              state = 'relative or authority';\n            } else if (this._isRelative) {\n              state = 'authority first slash';\n            } else {\n              state = 'scheme data';\n            }\n          } else if (!stateOverride) {\n            buffer = '';\n            cursor = 0;\n            state = 'no scheme';\n            continue;\n          } else if (EOF === c) {\n            break loop;\n          } else {\n            err(`Code point not allowed in scheme: ${c}`);\n            break loop;\n          }\n          break;\n\n        case 'scheme data':\n          if (c === '?') {\n            this._query = '?';\n            state = 'query';\n          } else if (c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            // TODO: error handling\n            this._schemeData += percentEscape(c);\n          }\n          break;\n\n        case 'no scheme':\n          if (!base || !(isRelativeScheme(base._scheme))) {\n            err('Missing scheme.');\n            invalid.call(this);\n          } else {\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative or authority':\n          if (c === '/' && input[cursor + 1] === '/') {\n            state = 'authority ignore slashes';\n          } else {\n            err(`Expected /, got: ${c}`);\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative':\n          this._isRelative = true;\n          if (this._scheme !== 'file') { this._scheme = base._scheme; }\n          if (EOF === c) {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._username = base._username;\n            this._password = base._password;\n            break loop;\n          } else if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') { err('\\\\ is an invalid code point.'); }\n            state = 'relative slash';\n          } else if (c === '?') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = '?';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'query';\n          } else if (c === '#') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._fragment = '#';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'fragment';\n          } else {\n            const nextC = input[cursor + 1];\n            const nextNextC = input[cursor + 2];\n            if (this._scheme !== 'file' || !ALPHA.test(c) ||\n                (nextC !== ':' && nextC !== '|') ||\n                (\n                  EOF !== nextNextC && nextNextC !== '/' &&\n                  nextNextC !== '\\\\' && nextNextC !== '?' && nextNextC !== '#'\n                )\n              ) {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n              this._path = base._path.slice();\n              this._path.pop();\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'relative slash':\n          if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') {\n              err('\\\\ is an invalid code point.');\n            }\n            if (this._scheme === 'file') {\n              state = 'file host';\n            } else {\n              state = 'authority ignore slashes';\n            }\n          } else {\n            if (this._scheme !== 'file') {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'authority first slash':\n          if (c === '/') {\n            state = 'authority second slash';\n          } else {\n            err(`Expected '/', got: ${c}`);\n            state = 'authority ignore slashes';\n            continue;\n          }\n          break;\n\n        case 'authority second slash':\n          state = 'authority ignore slashes';\n          if (c !== '/') {\n            err(`Expected '/', got: ${c}`);\n            continue;\n          }\n          break;\n\n        case 'authority ignore slashes':\n          if (c !== '/' && c !== '\\\\') {\n            state = 'authority';\n            continue;\n          } else {\n            err(`Expected authority, got: ${c}`);\n          }\n          break;\n\n        case 'authority':\n          if (c === '@') {\n            if (seenAt) {\n              err('@ already seen.');\n              buffer += '%40';\n            }\n            seenAt = true;\n            for (let i = 0; i < buffer.length; i++) {\n              const cp = buffer[i];\n              if (cp === '\\t' || cp === '\\n' || cp === '\\r') {\n                err('Invalid whitespace in authority.');\n                continue;\n              }\n              // TODO: check URL code points\n              if (cp === ':' && this._password === null) {\n                this._password = '';\n                continue;\n              }\n              const tempC = percentEscape(cp);\n              if (this._password !== null) {\n                this._password += tempC;\n              } else {\n                this._username += tempC;\n              }\n            }\n            buffer = '';\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            cursor -= buffer.length;\n            buffer = '';\n            state = 'host';\n            continue;\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'file host':\n          if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            if (buffer.length === 2 && ALPHA.test(buffer[0]) &&\n                (buffer[1] === ':' || buffer[1] === '|')) {\n              state = 'relative path';\n            } else if (buffer.length === 0) {\n              state = 'relative path start';\n            } else {\n              this._host = IDNAToASCII.call(this, buffer);\n              buffer = '';\n              state = 'relative path start';\n            }\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err('Invalid whitespace in file host.');\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'host':\n        case 'hostname':\n          if (c === ':' && !seenBracket) {\n            // TODO: host parsing\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'port';\n            if (stateOverride === 'hostname') {\n              break loop;\n            }\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'relative path start';\n            if (stateOverride) {\n              break loop;\n            }\n            continue;\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            if (c === '[') {\n              seenBracket = true;\n            } else if (c === ']') {\n              seenBracket = false;\n            }\n            buffer += c;\n          } else {\n            err(`Invalid code point in host/hostname: ${c}`);\n          }\n          break;\n\n        case 'port':\n          if (/[0-9]/.test(c)) {\n            buffer += c;\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#'\n                     || stateOverride) {\n            if (buffer !== '') {\n              const temp = parseInt(buffer, 10);\n              if (temp !== relative[this._scheme]) {\n                this._port = `${temp}`;\n              }\n              buffer = '';\n            }\n            if (stateOverride) {\n              break loop;\n            }\n            state = 'relative path start';\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err(`Invalid code point in port: ${c}`);\n          } else {\n            invalid.call(this);\n          }\n          break;\n\n        case 'relative path start':\n          if (c === '\\\\') {\n            err(\"'\\\\' not allowed in path.\");\n          }\n          state = 'relative path';\n          if (c !== '/' && c !== '\\\\') {\n            continue;\n          }\n          break;\n\n        case 'relative path':\n          if (EOF === c || c === '/' || c === '\\\\' ||\n              (!stateOverride && (c === '?' || c === '#'))) {\n            if (c === '\\\\') {\n              err('\\\\ not allowed in relative path.');\n            }\n            const tmp = relativePathDotMapping[buffer.toLowerCase()];\n            if (tmp) {\n              buffer = tmp;\n            }\n            if (buffer === '..') {\n              this._path.pop();\n              if (c !== '/' && c !== '\\\\') {\n                this._path.push('');\n              }\n            } else if (buffer === '.' && c !== '/' && c !== '\\\\') {\n              this._path.push('');\n            } else if (buffer !== '.') {\n              if (this._scheme === 'file' && this._path.length === 0 && buffer.length === 2 &&\n                  ALPHA.test(buffer[0]) && buffer[1] === '|') {\n                buffer = `${buffer[0]}:`;\n              }\n              this._path.push(buffer);\n            }\n            buffer = '';\n            if (c === '?') {\n              this._query = '?';\n              state = 'query';\n            } else if (c === '#') {\n              this._fragment = '#';\n              state = 'fragment';\n            }\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            buffer += percentEscape(c);\n          }\n          break;\n\n        case 'query':\n          if (!stateOverride && c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._query += percentEscapeQuery(c);\n          }\n          break;\n\n        case 'fragment':\n          if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._fragment += c;\n          }\n          break;\n\n        default:\n      }\n\n      cursor++;\n    }\n  }\n\n\n  // Does not process domain names or IP addresses.\n  // Does not handle encoding for the query parameter.\n  /* eslint-disable no-param-reassign */\n  function PolyfillURL(url, base /* , encoding */) {\n    if (base !== undefined && !(base instanceof PolyfillURL)) {\n      base = new PolyfillURL(String(base));\n    }\n\n    url = String(url);\n    this._url = url;\n    clear.call(this);\n\n    const input = url.replace(/^[ \\t\\r\\n\\f]+|[ \\t\\r\\n\\f]+$/g, '');\n    // encoding = encoding || 'utf-8'\n\n    parse.call(this, input, null, base);\n  }\n\n  PolyfillURL.prototype = {\n    toString() {\n      return this.href;\n    },\n    get href() {\n      if (this._isInvalid) { return this._url; }\n\n      let authority = '';\n      if (this._username !== '' || this._password !== null) {\n        authority = `${this._username +\n            (this._password !== null ? `:${this._password}` : '')}@`;\n      }\n\n      return this.protocol +\n          (this._isRelative ? `//${authority}${this.host}` : '') +\n          this.pathname + this._query + this._fragment;\n    },\n    set href(href) {\n      clear.call(this);\n      parse.call(this, href);\n    },\n\n    get protocol() {\n      return `${this._scheme}:`;\n    },\n    set protocol(protocol) {\n      if (this._isInvalid) { return; }\n      parse.call(this, `${protocol}:`, 'scheme start');\n    },\n\n    get host() {\n      if (this._isInvalid) return '';\n      if (this._port) return `${this._host}:${this._port}`;\n      return this._host;\n    },\n    set host(host) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, host, 'host');\n    },\n\n    get hostname() {\n      return this._host;\n    },\n    set hostname(hostname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, hostname, 'hostname');\n    },\n\n    get port() {\n      return this._port;\n    },\n    set port(port) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, port, 'port');\n    },\n\n    get pathname() {\n      if (this._isInvalid) return '';\n      if (this._isRelative) return `/${this._path.join('/')}`;\n      return this._schemeData;\n    },\n    set pathname(pathname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._path = [];\n      parse.call(this, pathname, 'relative path start');\n    },\n\n    get search() {\n      return this._isInvalid || !this._query || this._query === '?' ?\n          '' : this._query;\n    },\n    set search(search) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._query = '?';\n      if (search[0] === '?') { search = search.slice(1); }\n      parse.call(this, search, 'query');\n    },\n\n    get hash() {\n      return this._isInvalid || !this._fragment || this._fragment === '#' ?\n          '' : this._fragment;\n    },\n    set hash(hash) {\n      if (this._isInvalid) { return; }\n      this._fragment = '#';\n      if (hash[0] === '#') { hash = hash.slice(1); }\n      parse.call(this, hash, 'fragment');\n    },\n\n    get origin() {\n      if (this._isInvalid || !this._scheme) {\n        return '';\n      }\n      // javascript: Gecko returns String(\"\"), WebKit/Blink String(\"null\")\n      // Gecko throws error for \"data://\"\n      // data: Gecko returns \"\", Blink returns \"data://\", WebKit returns \"null\"\n      // Gecko returns String(\"\") for file: mailto:\n      // WebKit/Blink returns String(\"SCHEME://\") for file: mailto:\n      switch (this._scheme) {\n        case 'data':\n        case 'file':\n        case 'javascript':\n        case 'mailto':\n          return 'null';\n        default:\n      }\n      const host = this.host;\n      if (!host) {\n        return '';\n      }\n      return `${this._scheme}://${host}`;\n    },\n  };\n\n  // Copy over the static methods\n  const OriginalURL = scope.URL;\n  if (OriginalURL) {\n    PolyfillURL.createObjectURL = function createObjectURL(...args) {\n      // IE extension allows a second optional options argument.\n      // http://msdn.microsoft.com/en-us/library/ie/hh772302(v=vs.85).aspx\n      return OriginalURL.createObjectURL(...args);\n    };\n    PolyfillURL.revokeObjectURL = function revokeObjectURL(url) {\n      OriginalURL.revokeObjectURL(url);\n    };\n  }\n\n  scope.URL = PolyfillURL;\n};\n","/**\n * Copyright (c) 2011-2016 Paul Vorbach and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining \n * a copy of this software and associated documentation files \n * (the “Software”), to deal in the Software without restriction, \n * including without limitation the rights to use, copy, modify, \n * merge, publish, distribute, sublicense, and/or sell copies of \n * the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included \n * in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * The is a local modified version of the clone npm module (https://www.npmjs.com/package/clone).\n * According to its description, it offers a foolproof deep cloning \n * of objects, arrays, numbers, strings, maps, sets, \n * promises, etc. in JavaScript.\n * \n * I refactored it to be compatible with Webpack.\n * Refator List:\n * - update the use of the 'var' keyword to 'let' and 'const' where appropriate.\n * - Made the variable names more clearer and intuitive (clean code)\n * - I used ES6 contants/definitions where possible.\n * \n * Original can be found Here:\n * - On Npm -> https://www.npmjs.com/package/clone\n * - On GitHub -> https://github.com/pvorb/node-clone\n * \n * Created by oodigie on 26/05/2023.\n */\n\n'use strict';\n\nconst clone = (function() {\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nlet nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nlet nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nlet nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  const allParents = [];\n  const allChildren = [];\n\n  const useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    let child;\n    let proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      const index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      let keyChild, valueChild;\n      parent.forEach(function(value, key) {\n        keyChild = _clone(key, depth - 1);\n        valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      let entryChild;\n      parent.forEach(function(value) {\n        entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (let i in parent) {\n      let attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      const symbols = Object.getOwnPropertySymbols(parent);\n      for (let i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        let symbol = symbols[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      const allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (let i = 0; i < allPropertyNames.length; i++) {\n        let propertyName = allPropertyNames[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  let emptyCloneFunc = function () {};\n  emptyCloneFunc.prototype = parent;\n  return new emptyCloneFunc();\n};\n\n// private utility functions\n\nfunction __objToStr(obj) {\n  return Object.prototype.toString.call(obj);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(regExpOptions) {\n  let flags = '';\n  if (regExpOptions.global) flags += 'g';\n  if (regExpOptions.ignoreCase) flags += 'i';\n  if (regExpOptions.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n\n})();\n\nmodule.exports = clone;\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/**\n * Module exports.\n */\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n * @license MIT (© Joyent)\n */\n/* legacy: obj, showHidden, depth, colors*/\n\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\n\nfunction hasOwn(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwn(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  try {\n    if (ctx.showHidden && Object.getOwnPropertyNames) {\n      keys = Object.getOwnPropertyNames(value);\n    }\n  } catch (e) {\n    // ignore\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (Array.isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = { value: void 0 };\n  try {\n    // ie6 › navigator.toString\n    // throws Error: Object doesn't support this property or method\n    desc.value = value[key];\n  } catch (e) {\n    // ignore\n  }\n  try {\n    // ie10 › Object.getOwnPropertyDescriptor(window.location, 'hash')\n    // throws TypeError: Object doesn't support this action\n    if (Object.getOwnPropertyDescriptor) {\n      desc = Object.getOwnPropertyDescriptor(value, key) || desc;\n    }\n  } catch (e) {\n    // ignore\n  }\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwn(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","\"use strict\";\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar node_worker_1 = {};\nnode_worker_1[\"default\"] = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexports.FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return (0, node_worker_1.default)(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            if (split) {\n                this.b.set(chunk.subarray(0, split), this.s.z);\n                this.s.z = this.b.length;\n                this.p(this.b, false);\n            }\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    return Deflate;\n}());\nexports.Deflate = Deflate;\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexports.AsyncDeflate = AsyncDeflate;\nfunction deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\nexports.deflate = deflate;\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nfunction deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\nexports.deflateSync = deflateSync;\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexports.Inflate = Inflate;\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexports.AsyncInflate = AsyncInflate;\nfunction inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\nexports.inflate = inflate;\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.inflateSync = inflateSync;\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexports.Gzip = Gzip;\nexports.Compress = Gzip;\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexports.AsyncGzip = AsyncGzip;\nexports.AsyncCompress = AsyncGzip;\nfunction gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\nexports.gzip = gzip;\nexports.compress = gzip;\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nfunction gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\nexports.gzipSync = gzipSync;\nexports.compressSync = gzipSync;\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            if (this.p.length)\n                this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexports.Gunzip = Gunzip;\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this_1 = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, function (offset) { return _this_1.onmember && _this_1.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexports.AsyncGunzip = AsyncGunzip;\nfunction gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\nexports.gunzip = gunzip;\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\nexports.gunzipSync = gunzipSync;\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexports.Zlib = Zlib;\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexports.AsyncZlib = AsyncZlib;\nfunction zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\nexports.zlib = zlib;\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nfunction zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\nexports.zlibSync = zlibSync;\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexports.Unzlib = Unzlib;\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexports.AsyncUnzlib = AsyncUnzlib;\nfunction unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\nexports.unzlib = unzlib;\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.unzlibSync = unzlibSync;\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.o = StrmOpt.call(this, opts, cb) || {};\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_2 = this;\n                // enables reuse of this method by AsyncDecompress\n                var cb = function () { _this_2.ondata.apply(_this_2, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o, cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o, cb)\n                        : new this.Z(this.o, cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexports.Decompress = Decompress;\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        Decompress.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexports.AsyncDecompress = AsyncDecompress;\nfunction decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\nexports.decompress = decompress;\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\nexports.decompressSync = decompressSync;\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexports.DecodeUTF8 = DecodeUTF8;\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexports.EncodeUTF8 = EncodeUTF8;\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nfunction strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\nexports.strToU8 = strToU8;\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nfunction strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\nexports.strFromU8 = strFromU8;\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexports.ZipPassThrough = ZipPassThrough;\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexports.ZipDeflate = ZipDeflate;\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexports.AsyncZipDeflate = AsyncZipDeflate;\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexports.Zip = Zip;\nfunction zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\nexports.zip = zip;\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nfunction zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\nexports.zipSync = zipSync;\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexports.UnzipPassThrough = UnzipPassThrough;\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexports.UnzipInflate = UnzipInflate;\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexports.AsyncUnzipInflate = AsyncUnzipInflate;\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexports.Unzip = Unzip;\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nfunction unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\nexports.unzip = unzip;\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nfunction unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\nexports.unzipSync = unzipSync;\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.js\");\n"],"names":["root","factory","exports","module","define","amd","this","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","let","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBuffer","Buffer","hasBlob","Blob","BufferEncoder","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","shiftedVal","data","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","UNSIGNED_LSHIFT_24","ARRAY_BUFFER_CONVERT_CHUNK","uint8ArrayToString","format","undefined","dataLength","byteLength","uint8DataArray","Uint8Array","result","toLowerCase","padStart","stringToUint8Array","arrayBuf","ArrayBuffer","uint8Array","hexStringToUint8Array","arrayBufferToString","ab","len","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","int8ToStr","int8","int16ToStr","int16","int24ToStr","int24","int32ToStr","int32","int64ToStr","int64","high","low","byteArrayToStr","byteArray","slice","strToByteArray","strToHexArray","toHex","c","Array","prototype","map","call","split","strToInt8","strToInt16","strToInt24","strToInt32","strToUInt32","strToUInt64","fromBits","substr","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","MessageTracing","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageOutcome","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","Baggage","TraceContext","TraceContextSetter","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","EndpointNameComplaint","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","_internal","solace","Object","assign","PRINTABLE_LUT","tmp","SPACER","UNPRINTABLE","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","asciiOffset","dataLen","ccode","append","clear","parseSMFStream","Decode","decodeCompoundMessage","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","isString","topicName","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","QUEUE_PREFIX_LEN","TEMPORARY_QUEUE_PREFIX","createDestinationFromName","networkTopicName","networkTopicBytes","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createTemporaryName","vrid","id","generateUUID","describe","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","super","encoding","subscriptionParseNoExport","NOEXPORT_PREFIX","NOEXPORT_PREFIX_LEN","index","isNoExport","subscriptionParseShare","SHARE_PREFIX","SHARE_PREFIX_LEN","LEVEL_DELIMETER","LEVEL_DELIMETER_LEN","groupIndex","shareGroup","isShare","indexOf","substring","dispatchTopicIndex","subscriptionStringParse","layers","parseLayers","constOffset","constResult","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","parse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","global","BUILD_ENV","TEST","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","INVALID_QUEUE_NAME","INVALID_TE_NAME","MESSAGE_SIZE_OUT_OF_RANGE","UNSUPPORTED_PERMISSIONS","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED","PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","SYNC_REPLICATION_INELIGIBLE","MAX_ENDPOINTS_EXCEEDED","COPY_FROM_QUEUE_TEMPLATE_MISSING","COPY_FROM_TE_TEMPLATE_MISSING","ASSURED_DELIVERY_NOT_READY","getSubcodeMappingInner","respErrorCode","respStr","codeMap","searchKey","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","_requestEventCode","superObj","requestEventCode","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","setValues","p","key","enumName","instance","matches","filter","enumValues","Set","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","strings","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","traversePath","commonSource","keySource","pathArr","reduce","source","compoundKey","trim","rawPath","path","concat","isSuperset","subset","every","elem","has","inplaceUnion","setA","setB","union","inplaceIntersection","delete","intersection","inplaceDifference","difference","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","buildFilter","emits","emitSet","el","emitArray","DISABLED_ACTIONS","ignore","fail","direct","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","_onFirstDirectListener","firstDirect","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","disableEmitter","cancel","interval","onInterval","timerRef","setInterval","clearInterval","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","Version7Profile","legacyInstance","Version10Profile","v10Instance","Version105Profile","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","_profile","profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","reset","_getInitializeCount","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","disposed","flowId","_session","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","entryPointName","innerState","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","evt","_onEventCompletion","getCurrentState","currentState","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","buildLogForwarder","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","addGlobalFuncs","toUpperCase","formatter","_formatter","genericFunction","targetSelf","newLevel","Binding","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","g","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","settlementOutcome","exists","ACCEPTED","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evictingIndex","evicting","front","firstIndex","rawIndex","lastIndex","readIndex","callback","updateAckState","updateIndex","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowById","flowReconnecting","flowReconnected","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","RING_BUFFER_SIZE","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_hasAutoAckSupport","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","addEventToEmit","activeIndicationEnabled","requestStartDispatch","requestStopDispatch","requestStopDispatchFSM","_addEventToEmit","_requestStartDispatch","_requestStopDispatch","emitBindFailed","CONNECT_FAILED_ERROR","emitRebindFailed","verifyEndpointSubscription","destination","isCapable","SHARED_SUBSCRIPTIONS","verifyNackSettlementOutcomesSupport","requiredSettlementOutcomes","settlementOutcomes","isNackRequired","FAILED","REJECTED","AD_APP_ACK_FAILED","outcomeNotSupportedError","checkCapabilitiesChoicePoint","MESSAGE_REPLAY","topicEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","checkCapabilitiesChoicePointOnRebind","externalTransition","Reconnecting","RBindSent","handleAccidentalBind","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","connectTimeoutInMsecs","transitionToUnbound","_dispose","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","partitionGroupId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","accessTypeOrDefault","x","EXCLUSIVE","partitionGroupIdValue","getPartitionGroupId","_clearPartitionGroupId","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","getAccessType","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","errorSubcode","respEvent","BIND_SENT","newTimeout","UnbindSent","FlowUp","reconnectAttempts","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","consumerSuidStr","msgSuidStr","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","dupAckRanges","_sendAck","_setTransportAckTimer","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","isAutoAcked","applicationSettle","messageOutcome","RX_SETTLE_FAILED","RX_SETTLE_REJECTED","RX_SETTLE_ACCEPTED","RX_ACKED","oldAckRanges","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","allMessageOutcomes","currentRangeLength","rangeOutcome","totalRangeLen","MAX_CLIENT_ACK_RANGES","bareRanges","hasAnyBareRanges","range","forceTransportAck","failedBareRanges","rejectedBareRanges","setAcked","ackRange","Math","Number","POSITIVE_INFINITY","maxWindowSize","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_requiredSettlementOutcomes","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","getConsumerLocalName","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","success","subCode","respCode","respText","updateQueueSubscription","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","_autoAcknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","setLastSent","lastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","publisherId","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","ConnectReason","INIT","RESUME","FAILOVER","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","oldId","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Codec","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","MessageTracingSupport","isStringOrNothing","getBaggage","_baggage","setBaggage","_setBaggage","isNumber","isBoolean","_traceId","_spanId","_isSampled","_traceState","_version","_clonedContextSetter","_setSpanId","_setTraceId","_setSampled","_setTraceState","_setVersion","setVersion","setTraceId","setSpanId","setSampled","setTraceState","traceContextValue","traceContextBuffer","traceContextBytes","bytesRead","traceContextSetter","firstByte","byte1DataView","DataView","byte1","getUint8","version","isSampled","traceId16Bytes","traceId","TRACE_ID_BYTES_LENGTH","spanId8Bytes","spanId","SPAN_ID_BYTES_LENGTH","traceStateLengthBytes","traceStateLengthDataView","traceStateLength","getUint16","traceStateBytes","traceState","toClone","newContextSetter","getSpanId","getTraceId","getIsSampled","getTraceState","getVersion","getTruncatedTraceState","_standardTraceStateTruncation","MAX_TRACE_STATE_LENGTH","getEncodedTraceContext","contentBuffer","offsetPos","contentBufferDataView","setUint8","traceId16byte","spanId8byte","setUint16","truncatedTraceState","Uint16Array","maxTraceStateLength","ignoredMembers","traceStateBuilderArray","traceStateBuilderArrayLength","listMembers","listMember","currentMemberLength","newExpectedLength","currentMember","getTraceContextSetter","_traceContextSetter","getTransportContext","_transportContext","_setTransportContext","contextSetter","getCreationContext","_creationContext","_setCreationContext","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","getHttpContentType","fpHttpContentEncoding","getHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","mdu","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","cos","getUserCos","fpDeliveryMode","mode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpXmlMetadata","xmlMetadata","getXmlMetadata","fpTracingCreationContext","isPresent","fpTracingTransportContext","fpTracingBaggage","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","MessageDumpStandardProviderLib","MessageDumpState","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","dumpProviders","provider","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isInstanceOfOrNothing","isNumberOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","clearMessage","fields","f","clearExtendedVarLenParameters","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","_httpContentEncoding","setHttpContentEncoding","_httpContentType","setHttpContentType","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","MAX_MESSAGE_TTL_MS","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","settle","messageSettlementOutcome","canAck","hasAutoAckSupport","doesConsumerSupportOutcome","_validateBeforeAcknowledge","acknowledge","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","_binaryMetaChunk","meta","_smfHeader","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","sdtType","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","_getCompressedBinaryAttachment","_compressedBinaryAttachment","_setCompressedBinaryAttachment","_getPayloadCompressed","_payloadCompressed","_setPayloadCompressed","setTransportContext","validFlags","clearExtendedVarLenParams","SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY","ReplayStartType","RMID_VERSION_1_PREFIX","RMID_LEN","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","idBuffer","toBytesBE","hexString","sep","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","explainInvalidEndpointName","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","maybeAdaptFromDestination","targetType","queueSpec","_durable","nameChecks","EMPTY_STRING","LT","GT","ASTERISK","QUESTION_MARK","AMPERSAND","SEMICOLON","LEADING_SLASH","TRAILING_SLASH","DOUBLE_SLASH","TOO_LONG","NO_ISSUE","isTE","triplet","match","NONEXCLUSIVE","valTopicString","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","encodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","int48ToStr","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","encodeStream","C_2_48","pow","strencode","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","parseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","parseFieldHeader","onebyte","elemType","lenBytes","elemLen","elemValLen","ParseFloat","parseFloatField","readFloatBE","readDoubleBE","createField","readUIntBE","parseIntegerField","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","parseMapAt","datalen","mapObj","keyFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseStreamAt","fieldHeader","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","ProvisionEvent","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","VAR_LEN_EXT_PARAM","UNBIND_ACK","BR_ERRORID","PQ","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","defaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","generateRandomId","rand","random","toFixed","GlobalContext","sessionCounter","idCounter","RandId","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","urls","cb","host","url","address","resolved","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","code","syscall","hostname","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCode","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","PROVISION_ERROR","PROVISION_OK","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","_sessionEventCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","superclassArgsBuilder","SessionFSMEvent","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","fflate","SessionFSM","session","stats","logFormatter","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","clearConnectTimer","_currentHost","connectWaitTimeInMsecs","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","newTransport","updateTransportCompression","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","flows","sendConsumerSessionUpEvent","reconnectingFlows","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","payloadCompressionLevel","anything","compressedAttachment","origSize","Z_FINISH","encodedContainer","textEncoded","zlibSync","_compressedCE","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","provisionEndpoint","queueDescriptior","deprovisionEndpoint","getDelete","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","force","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","generateMessage","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","valArrayIsMember","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valUrlList","valArray","included","protocol","isHttpTransport","transportProtocol","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","validatePropsSupportedByTransport","nonHttpPropsSet","propNames","matchUrl","regex","all","arrayLength","currententry","string","useSsl","SessionPropertiesValidator","webTransportProtocolList","useClientCert","authenticationScheme","equal","empty","idToken","accessToken","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","transportCount","makeDefaults","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_tpProtocolInUse","_tpContentType","_publisherProperties","_payloadCompressionLevel","SessionPropertiesBrowser","_tpProtocol","_tpDowngradeTimeout","_transportProtocolList","_bufferedAmountQueryInterval","_setTransportProtocolInUse","_setWebTransportProtocolInUse","_lendsInspect","bufferedAmountQueryIntervalInMsecs","transportContentType","transportProtocolInUse","SessionPropertiesBase","_authScheme","_accessToken","_idToken","_issuerIdentifier","_url","_password","_userName","_clientName","_appDesc","_vpnName","_connectTimeout","minTimeout","margin","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","_genSendTimestamps","_genReceiveTimestamps","_includeSenderId","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","_setUserIdentification","_subLocalPriority","_subNetworkPriority","_ignoreDupSubError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","_sendBufferMaxSize","_assumedMaxAdSize","_maxWebPayload","issuerIdentifier","password","userName","clientName","applicationDescription","vpnName","vpnNameInUse","generateSendTimestamps","generateReceiveTimestamps","includeSenderId","generateSequenceNumber","p2pInboxInUse","userIdentification","subscriberLocalPriority","subscriberNetworkPriority","ignoreDuplicateSubscriptionError","sendBufferMaxSize","maxWebPayload","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","transportProtocolDefaultList","WS_BINARY","xhrBinary","streaming","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","statesCanAck","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","createFromSpec","handleDTEUnsubscribeResponse","updateProperty","responseCallback","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","resp","smpResp","afterRemoveCallback","ignoreSubscriptionNotFoundError","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","_failOnExtendedVariableLengthProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","sessionState","getSessionState","getTransportProtocol","capabilityType","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","ignoreExists","queueDescriptor2","handleProvisionResponse","ignoreMissing","provision","getQueueNameBytes","getDurability","outcome","provisionEvent","browserProperties","destinationType","factoryMethod","vrn","localName","operationEnum","allow","NEW","routerCapabilities","sendDest","senderTimestamp","noSenderTimestamp","hasAutoSenderTimestamp","now","sequenceNumber","noSequenceNumber","hasAutoSequenceNumber","senderId","noSenderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramLen","paramValueLen","smfParam","addParameter","encAdp0Param","uh","paramtype","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","paramLength","encAdpUTF8NTParam","byte2","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","PARTITION_GROUP_ID","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","settlementRanges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","ce","ct","bag","ctx","_baggageObj","fromTraceContext","adaptSmfToMessage","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","pm_ts_transport_context","payloadOffset","headerLength","cs","pm_content_summary","payloadLength","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","binaryMetadataChunk","endsWith","inflatedAttachment","unzlibSync","newCE","trimRight","payloadPosition","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","FORCED_LENGTH_MODE","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","adaptMessageToBinaryMeta","sdtPreamble","sdtStreamContainer","adaptMessageToSmf_nonPayload","smfHeaderIn","pm_ad_publishermsgId","pm_ad_ackimm","pm_queue_len","pm_queue_offset","userData","encodedSdtPayload","binaryMetaSMF","asEncodedSmf","MAX_24BITS","adaptMessageToSmf_payloadFinalize","payloadBytes","adaptMessageToSmf","bitRange","maskValues","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","LIGHT_QUEUE_NAME_OFFSET","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","TS_TRANSPORT_CONTEXT","SIX","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","setPayloadSize","encodedHeader","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeBits","paramTypeCount","lenMap","idx","lightMap","lenBits","lenCount","ContentSummaryDecodeMap","FIVE","parseTopicQueueOffsets","parseResponseParam","parseDeliveryMode","delmode","lookup","lut","parseContentSummary","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","forcedLengthMode","lengthModeMap","0","1","2","4","8","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","remaining","isSMFHeaderValid","isSMFAvailable","totalLen","parseSMFExtendedStream","streamLen","pUH","3","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","paramIsLightweight","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parsedTopicOffsets","pStart","pType","pLen","pValueLen","parsedResponse","SUB_ID_LIST","GENERIC_ATTACHMENT","AD_TOPICSEQUENCE_NUMBER","contentSummary","AD_FLOWREDELIVERED_FLAG","extSuccess","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DUARBILITY_INT_TO_BOOL","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","discardBehaviorValue","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","hasNackSupport","endpointBytes","endpointType","rsValue","replayStartTimeMs","replayStartTimeNs","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","allOutcomes","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","dto","local","network","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","sanityLoop","capLen","sprop","compressedTLS","plaintextTLS","clientCapsToStr","clientCapList","highestCap","capBits","cap","cc","isClientCert","DELIVERTOONEPRIORITY","prmGetDtoPriorityValue","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","formattedDate","SSL_DOWNGRADE","clientCaps","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","PARTITION_KEY_HASH","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","passEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","toTerminate","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","SMF_LOST_FRAMING_THRESHOLD","logPeekBuffer","bufPair","BufferSMFClient","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","TransportBase","eventCB","client","transportProps","_ssl","_client","_eventCB","_props","immediate","forceFailure","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","useSSL","WebTransportCapabilities","TransportClientStats","TcpRawTransport","CompressedTransport","TlsOnlyTransport","TcpTlsTransport","WebTransport","getId","compressingLayer","plaintextTransport","setClientStats","setUnderlyingTransport","tlsLayer","uncompressedTransport","rehome","encryptedTransport","compress","tlsShutdown","precallback","WebTransportsLib","lutTransportProtocols","protocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","INVALID_STATE_FOR_OPERATION","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","TransportSessionEvent","tsEventCode","_transportEventCode","_sid","getResponseCode","transportEventCode","TransportSessionState","WAITING_FOR_CREATE","WAITING_FOR_DESTROY","CONNECTION_FAILED","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","SOL_CONNECTION_DEBUG","prependOrigin","location","origin","getTs","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","LastGotToken","LastSendMsg","waitedTok","hadToken","LastGotData","LastReturnToken","returnedToken","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","setRequestHeader","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","xhr","check","onprogress","WebTransportSessionBase","PacketReadState","READING_HEADER","STREAMING","MSIE_TRANSPORT_PADDING","adaptURL","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","navigator","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","_state","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_clientstats","_queuedDataSize","initPreformattedHeaders","_flushCallback","sendQueuedData","getQueuedDataToSend","_canSendNeeded","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","WebSocketTransportSession","browserSupportsBinaryWebSockets","browserSupportsStreamingResponse","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS","bytesAllowed","getBufferedAmount","_bufferedAmountQueryIntervalInMsecs","_bufferedAmountQueryIntervalDelayMultiplier","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_transportSession","_lastDowngradeSucceeded","errorMsg","_socket","_sender","WebSocketCloseCodes","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","globalContext","MyWebSocket","WebSocket","_bufferedAmountQueryTimer","onOpen","onClose","originalSocket","msgBuf","wasClean","onDrain","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","onError","WAITING_FOR_CONNECT","onMessage","binaryType","onopen","onmessage","onclose","onerror","bufferAllow","maxPayloadBytes","close","cancelQuery","bufferedAmount","validator","validatorArgs","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","valArrayOfString","typedesc","cloneObj","CLONE_CIRCULAR","CLONE_DEPTH","acc","scope","hasWorkingUrl","forceJURL","u","URL","pathname","relative","relativePathDotMapping","_scheme","_schemeData","_username","_host","_port","_path","_query","_fragment","_isInvalid","_isRelative","isRelativeScheme","scheme","IDNAToASCII","percentEscape","unicode","percentEscapeQuery","EOF","ALPHA","ALPHANUMERIC","stateOverride","errors","cursor","seenAt","seenBracket","loop","nextC","nextNextC","cp","tempC","temp","PolyfillURL","authority","port","search","hash","OriginalURL","createObjectURL","revokeObjectURL","_instanceof","nativeMap","nativeSet","nativePromise","Promise","depth","allParents","allChildren","useBuffer","_clone","proto","reject","then","__isArray","__isRegExp","RegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","clonePrototype","emptyCloneFunc","__objToStr","regExpOptions","ignoreCase","multiline","WINDOWS_VERSION_MAP","DEFAULT","BROWSER_PROCESS","getBrowserAgentInfo","navObj","agentStr","browsers","agentInfo","os","arch","agentHas","strs","firstValue","vals","rule","exec","versionStrs","versionTests","parenParts","versionPart","versionMatch","versionTest","safeEncode","browserAgentInfo","arg","PAD_LEFT","PAD_RIGHT","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","capitalize","lastChar","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","TARGET","FORMATTED_DATE","pad","YYYY","SUMMARY","EPSILON","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","elseFn","when","condition","unless","NO_OBJ","objectValues","subcodeSummary","got","expectedStr","gotStr","validateError","typename","memberOfEnum","names","isEnumMemberOrNothing","isInstanceOfOrNull","isInstanceOfOrUndefined","isMember","memberOf","isNumberOrNull","isRangeCompare","isStringOrNull","toByteArray","fromByteArray","revLookup","Arr","getLens","b64","validLen","placeHoldersLen","lens","_byteLength","curByte","tripletToBase64","num","encodeChunk","uint8","extraBytes","parts","maxChunkLength","len2","opts","seen","stylize","stylizeNoColor","colors","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styles","styleType","style","isNull","hasOwn","prop","isRegExp","re","isObject","objectToString","isError","isDate","o","arrayToHash","formatArray","recurseTimes","visibleKeys","l","formatProperty","formatError","primitive","formatPrimitive","braces","toUTCString","reduceToSingleString","JSON","stringify","simple","prev","cur","numLinesEst","base64","ieee754","customInspectSymbol","Symbol","SlowBuffer","INSPECT_MAX_BYTES","K_MAX_LENGTH","kMaxLength","TYPED_ARRAY_SUPPORT","typedArraySupport","foo","setPrototypeOf","createBuffer","RangeError","encodingOrOffset","TypeError","poolSize","isView","fromArrayView","isInstance","fromArrayBuffer","SharedArrayBuffer","fromObject","toPrimitive","assertSize","alloc","checked","allocUnsafeSlow","isEncoding","actual","write","fromArrayLike","arrayView","numberIsNaN","_isBuffer","y","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","swap16","swap32","swap64","toLocaleString","thisStart","thisEnd","thisCopy","targetCopy","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","read","foundIndex","found","hexWrite","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","utf16leToBytes","isFinite","toJSON","res","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","out","hexSliceLookupTable","newBuf","checkOffset","ext","readUintLE","readUIntLE","noAssert","mul","readUintBE","readUint8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","lo","hi","BigInt","readBigUInt64BE","readIntLE","readIntBE","readInt16LE","readInt32LE","readBigInt64LE","readBigInt64BE","readFloatLE","readDoubleLE","checkInt","writeUintLE","writeUIntLE","maxBytes","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","checkIEEE754","writeFloat","littleEndian","writeFloatLE","writeFloatBE","writeDouble","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","E","sym","getMessage","Base","received","isInteger","addNumericalSeparator","checkBounds","ERR_OUT_OF_RANGE","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","INVALID_BASE64_RE","base64clean","units","leadSurrogate","src","dst","alphabet","table","i16","BufferBigIntNotDefined","R","Reflect","ReflectApply","receiver","ReflectOwnKeys","ownKeys","ProcessEmitWarning","warning","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","setMaxListeners","_getMaxListeners","that","getMaxListeners","doError","events","er","handler","listeners","arrayClone","_addListener","prepend","newListener","unshift","warned","w","onceWrapper","fired","wrapFn","_onceWrap","wrapped","originalListener","spliceOne","off","_listeners","unwrap","evlistener","unwrapListeners","rawListeners","eventNames","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","addEventListener","wrapListener","removeEventListener","ch2","node_worker_1","transfer","Worker","ed","$e$","postMessage","u16","i32","Int32Array","fleb","fdeb","clim","freb","eb","_a","fl","revfl","_b","fd","revfd","rev","hMap","cd","mb","le","co","rvb","sv","r_1","flt","fdt","flm","flrm","fdm","fdrm","bits16","shft","slc","FlateErrorCode","UnexpectedEOF","InvalidBlockType","InvalidLengthLiteral","InvalidDistance","StreamFinished","NoStreamHandler","InvalidHeader","NoCallback","InvalidUTF8","ExtraFieldTooLong","InvalidDate","FilenameTooLong","StreamFinishing","InvalidZipData","UnknownCompressionMethod","ec","ind","nt","inflt","dat","st","dict","sl","dl","noBuf","resize","noSt","cbuf","bl","nbuf","bt","lm","dm","lbt","dbt","tbts","t","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","dt","lms","dms","lpos","dsym","dend","wbits","wbits16","hTree","t2","et","i0","i1","i2","maxSym","tr","mbt","lft","i2_1","i2_2","i2_3","lc","cl","cli","cln","cls","clen","cf","wfblk","wblk","syms","lf","df","li","bs","dlt","mlb","ddt","mdb","_c","lclt","nlc","_d","lcdt","ndc","lcfreq","_e","lct","mlcb","nlcc","flen","ftlen","dtlen","ll","llm","lcts","it","clct","deo","dflt","lvl","plvl","pre","post","z","ceil","lst","opt","msk_1","head","bs1_1","bs2_1","hsh","lc_1","wi","hv","imod","pimod","rem","ch_1","dif","maxn","maxd","ml","nl","mmd","md","ti","pti","lin","din","crct","crc","cr","adler","dopt","dictionary","newDat","mem","mrg","wcln","fnStr","td","ks","st_1","spInd","ch","cbfs","wrkr","fns","td_1","bInflt","inflateSync","pbf","gopt","bDflt","deflateSync","gze","gzh","gzhl","wbytes","guze","gzs","gzl","zle","zlh","zule","zls","cbify","consume","astrm","strm","ondata","astrmify","b2","b4","b8","filename","mtime","flg","zs","lv","StrmOpt","Deflate","endLen","AsyncDeflate","deflate","Inflate","bts","AsyncInflate","inflate","Gzip","raw","Compress","AsyncGzip","AsyncCompress","gzip","gzipSync","compressSync","Gunzip","onmember","AsyncGunzip","_this_1","gunzip","gunzipSync","Zlib","AsyncZlib","zlib","Unzlib","AsyncUnzlib","unzlib","Decompress","G","I","Z","_this_2","AsyncDecompress","decompress","decompressSync","fltn","op","te","TextEncoder","TextDecoder","tds","dutf8","DecodeUTF8","EncodeUTF8","strToU8","latin1","ar_1","ar","ai","strFromU8","dbf","slzh","zh","fnl","es","z64e","sc","su","exfl","wzh","extra","col","exl","flag","compression","exf","wzf","ZipPassThrough","ZipDeflate","AsyncZipDeflate","Zip","file","fl_1","com","comment","hl_1","chks_1","pAll_1","_i","chks_2","chk","tr_1","ind_1","uf_1","nxt","cl_1","dd","zip","tot","slft","files","term","tAll","cbd","cbf","oe","cdl","badd","loc","_loop_1","cbl","zipSync","UnzipPassThrough","UnzipInflate","AsyncUnzipInflate","sz","Unzip","onfile","toAdd","is","oc","_loop_2","sig","this_1","bf","cmp_1","chks_3","sc_1","su_1","fn_1","d_1","file_1","ctr","chks_4","originalSize","state_1","register","queueMicrotask","unzip","ze","fltr","_loop_3","c_1","no","infl","unzipSync","c_2","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","wasm","WebAssembly","Instance","Module","unsigned","__isLong__","ctz32","clz32","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiplier","divide","divisor","approx","halfThis","shr","shl","toUnsigned","shru","log2","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","__webpack_exports__"],"sourceRoot":""}